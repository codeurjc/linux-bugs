commit a507f147e6f06e86b7649b46bc1d3caa34b196d6
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Mon Jan 1 12:39:09 2024 +0000

    Linux 6.1.70
    
    Link: https://lore.kernel.org/r/20231230115806.714618407@linuxfoundation.org
    Tested-by: Florian Fainelli <florian.fainelli@broadcom.com>
    Tested-by: SeongJae Park <sj@kernel.org>
    Tested-by: Salvatore Bonaccorso <carnil@debian.org>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Ron Economos <re@w6rz.net>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Pavel Machek (CIP) <pavel@denx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a413b88cdb69cdd7922d6481fead43e52be19710
Author: Mauricio Faria de Oliveira <mfo@canonical.com>
Date:   Thu Jul 20 11:30:32 2023 -0300

    loop: deprecate autoloading callback loop_probe()
    
    commit 23881aec85f3219e8462e87c708815ee2cd82358 upstream.
    
    The 'probe' callback in __register_blkdev() is only used under the
    CONFIG_BLOCK_LEGACY_AUTOLOAD deprecation guard.
    
    The loop_probe() function is only used for that callback, so guard it
    too, accordingly.
    
    See commit fbdee71bb5d8 ("block: deprecate autoloading based on dev_t").
    
    Signed-off-by: Mauricio Faria de Oliveira <mfo@canonical.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Link: https://lore.kernel.org/r/20230720143033.841001-2-mfo@canonical.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Cc: Sven Joachim <svenjoac@gmx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 75c27bdb21449e5ab5ddc3546fee1036ada0b587
Author: Léo Lam <leo@leolam.fr>
Date:   Sat Dec 16 05:47:17 2023 +0000

    wifi: nl80211: fix deadlock in nl80211_set_cqm_rssi (6.6.x)
    
    Commit 008afb9f3d57 ("wifi: cfg80211: fix CQM for non-range use"
    backported to 6.6.x) causes nl80211_set_cqm_rssi not to release the
    wdev lock in some of the error paths.
    
    Of course, the ensuing deadlock causes userland network managers to
    break pretty badly, and on typical systems this also causes lockups on
    on suspend, poweroff and reboot. See [1], [2], [3] for example reports.
    
    The upstream commit 7e7efdda6adb ("wifi: cfg80211: fix CQM for non-range
    use"), committed in November 2023, is completely fine because there was
    another commit in August 2023 that removed the wdev lock:
    see commit 076fc8775daf ("wifi: cfg80211: remove wdev mutex").
    
    The reason things broke in 6.6.5 is that commit 4338058f6009 was applied
    without also applying 076fc8775daf.
    
    Commit 076fc8775daf ("wifi: cfg80211: remove wdev mutex") is a rather
    large commit; adjusting the error handling (which is what this commit does)
    yields a much simpler patch and was tested to work properly.
    
    Fix the deadlock by releasing the lock before returning.
    
    [1] https://bugzilla.kernel.org/show_bug.cgi?id=218247
    [2] https://bbs.archlinux.org/viewtopic.php?id=290976
    [3] https://lore.kernel.org/all/87sf4belmm.fsf@turtle.gmx.de/
    
    Link: https://lore.kernel.org/stable/e374bb16-5b13-44cc-b11a-2f4eefb1ecf5@manjaro.org/
    Fixes: 008afb9f3d57 ("wifi: cfg80211: fix CQM for non-range use")
    Tested-by: "Léo Lam" <leo@leolam.fr>
    Tested-by: "Philip Müller" <philm@manjaro.org>
    Cc: stable@vger.kernel.org
    Cc: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: "Léo Lam" <leo@leolam.fr>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 15577a98ef2996b89fc89af1464a70e85ee1d1ee
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Sat Dec 16 05:47:15 2023 +0000

    wifi: cfg80211: fix CQM for non-range use
    
    commit 7e7efdda6adb385fbdfd6f819d76bc68c923c394 upstream.
    
    [note: this is commit 4a7e92551618f3737b305f62451353ee05662f57 reapplied;
    that commit had been reverted in 6.6.6 because it caused regressions, see
    https://lore.kernel.org/stable/2023121450-habitual-transpose-68a1@gregkh/
    for details]
    
    My prior race fix here broke CQM when ranges aren't used, as
    the reporting worker now requires the cqm_config to be set in
    the wdev, but isn't set when there's no range configured.
    
    Rather than continuing to special-case the range version, set
    the cqm_config always and configure accordingly, also tracking
    if range was used or not to be able to clear the configuration
    appropriately with the same API, which was actually not right
    if both were implemented by a driver for some reason, as is
    the case with mac80211 (though there the implementations are
    equivalent so it doesn't matter.)
    
    Also, the original multiple-RSSI commit lost checking for the
    callback, so might have potentially crashed if a driver had
    neither implementation, and userspace tried to use it despite
    not being advertised as supported.
    
    Cc: stable@vger.kernel.org
    Fixes: 4a4b8169501b ("cfg80211: Accept multiple RSSI thresholds for CQM")
    Fixes: 37c20b2effe9 ("wifi: cfg80211: fix cqm_config access race")
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Léo Lam <leo@leolam.fr>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 706448f716c19cc45c52e9a800f0293be1c79fe2
Author: Krister Johansen <kjlx@templeofstupid.com>
Date:   Fri Nov 3 10:39:47 2023 -0700

    fuse: share lookup state between submount and its parent
    
    commit c4d361f66ac91db8fc65061a9671682f61f4ca9d upstream.
    
    Fuse submounts do not perform a lookup for the nodeid that they inherit
    from their parent.  Instead, the code decrements the nlookup on the
    submount's fuse_inode when it is instantiated, and no forget is
    performed when a submount root is evicted.
    
    Trouble arises when the submount's parent is evicted despite the
    submount itself being in use.  In this author's case, the submount was
    in a container and deatched from the initial mount namespace via a
    MNT_DEATCH operation.  When memory pressure triggered the shrinker, the
    inode from the parent was evicted, which triggered enough forgets to
    render the submount's nodeid invalid.
    
    Since submounts should still function, even if their parent goes away,
    solve this problem by sharing refcounted state between the parent and
    its submount.  When all of the references on this shared state reach
    zero, it's safe to forget the final lookup of the fuse nodeid.
    
    Signed-off-by: Krister Johansen <kjlx@templeofstupid.com>
    Cc: stable@vger.kernel.org
    Fixes: 1866d779d5d2 ("fuse: Allow fuse_fill_super_common() for submounts")
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Krister Johansen <kjlx@templeofstupid.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ec7b81b0abcde34ac75a4b02239aa88306feab67
Author: SeongJae Park <sj@kernel.org>
Date:   Fri Dec 8 17:50:18 2023 +0000

    mm/damon/core: make damon_start() waits until kdamond_fn() starts
    
    commit 6376a824595607e99d032a39ba3394988b4fce96 upstream.
    
    The cleanup tasks of kdamond threads including reset of corresponding
    DAMON context's ->kdamond field and decrease of global nr_running_ctxs
    counter is supposed to be executed by kdamond_fn().  However, commit
    0f91d13366a4 ("mm/damon: simplify stop mechanism") made neither
    damon_start() nor damon_stop() ensure the corresponding kdamond has
    started the execution of kdamond_fn().
    
    As a result, the cleanup can be skipped if damon_stop() is called fast
    enough after the previous damon_start().  Especially the skipped reset
    of ->kdamond could cause a use-after-free.
    
    Fix it by waiting for start of kdamond_fn() execution from
    damon_start().
    
    Link: https://lkml.kernel.org/r/20231208175018.63880-1-sj@kernel.org
    Fixes: 0f91d13366a4 ("mm/damon: simplify stop mechanism")
    Signed-off-by: SeongJae Park <sj@kernel.org>
    Reported-by: Jakub Acs <acsjakub@amazon.de>
    Cc: Changbin Du <changbin.du@intel.com>
    Cc: Jakub Acs <acsjakub@amazon.de>
    Cc: <stable@vger.kernel.org> # 5.15.x
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: SeongJae Park <sj@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 41f4ff9fe22c4b83e8d6978118c3d89767b3438d
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Thu Dec 7 20:49:24 2023 +0100

    x86/alternatives: Sync core before enabling interrupts
    
    commit 3ea1704a92967834bf0e64ca1205db4680d04048 upstream.
    
    text_poke_early() does:
    
       local_irq_save(flags);
       memcpy(addr, opcode, len);
       local_irq_restore(flags);
       sync_core();
    
    That's not really correct because the synchronization should happen before
    interrupts are re-enabled to ensure that a pending interrupt observes the
    complete update of the opcodes.
    
    It's not entirely clear whether the interrupt entry provides enough
    serialization already, but moving the sync_core() invocation into interrupt
    disabled region does no harm and is obviously correct.
    
    Fixes: 6fffacb30349 ("x86/alternatives, jumplabel: Use text_poke_early() before mm_init()")
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Borislav Petkov (AMD) <bp@alien8.de>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: <stable@kernel.org>
    Link: https://lore.kernel.org/r/ZT6narvE%2BLxX%2B7Be@windriver.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 425379154b7fd1e8f6005235ce35d8d268b52d46
Author: Marc Zyngier <maz@kernel.org>
Date:   Thu Dec 7 15:11:59 2023 +0000

    KVM: arm64: vgic: Force vcpu vgic teardown on vcpu destroy
    
    commit 02e3858f08faabab9503ae2911cf7c7e27702257 upstream.
    
    When failing to create a vcpu because (for example) it has a
    duplicate vcpu_id, we destroy the vcpu. Amusingly, this leaves
    the redistributor registered with the KVM_MMIO bus.
    
    This is no good, and we should properly clean the mess. Force
    a teardown of the vgic vcpu interface, including the RD device
    before returning to the caller.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20231207151201.3028710-4-maz@kernel.org
    Signed-off-by: Oliver Upton <oliver.upton@linux.dev>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5dfacfd0fcd6fbd41c01ed981d289f036305231a
Author: Marc Zyngier <maz@kernel.org>
Date:   Thu Dec 7 15:11:58 2023 +0000

    KVM: arm64: vgic: Add a non-locking primitive for kvm_vgic_vcpu_destroy()
    
    commit d26b9cb33c2d1ba68d1f26bb06c40300f16a3799 upstream.
    
    As we are going to need to call into kvm_vgic_vcpu_destroy() without
    prior holding of the slots_lock, introduce __kvm_vgic_vcpu_destroy()
    as a non-locking primitive of kvm_vgic_vcpu_destroy().
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20231207151201.3028710-3-maz@kernel.org
    Signed-off-by: Oliver Upton <oliver.upton@linux.dev>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3a0fd93cd9f7f267d69d9cc797f0a07870012865
Author: Marc Zyngier <maz@kernel.org>
Date:   Thu Dec 7 15:11:57 2023 +0000

    KVM: arm64: vgic: Simplify kvm_vgic_destroy()
    
    commit 01ad29d224ff73bc4e16e0ef9ece17f28598c4a4 upstream.
    
    When destroying a vgic, we have rather cumbersome rules about
    when slots_lock and config_lock are held, resulting in fun
    buglets.
    
    The first port of call is to simplify kvm_vgic_map_resources()
    so that there is only one call to kvm_vgic_destroy() instead of
    two, with the second only holding half of the locks.
    
    For that, we kill the non-locking primitive and move the call
    outside of the locking altogether. This doesn't change anything
    (we re-acquire the locks and teardown the whole vgic), and
    simplifies the code significantly.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20231207151201.3028710-2-maz@kernel.org
    Signed-off-by: Oliver Upton <oliver.upton@linux.dev>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3339028dd082a789f9010f49708026950349eca1
Author: Yaxiong Tian <tianyaxiong@kylinos.cn>
Date:   Wed Nov 22 16:02:43 2023 +0800

    thunderbolt: Fix memory leak in margining_port_remove()
    
    commit ac43c9122e4287bbdbe91e980fc2528acb72cc1e upstream.
    
    The dentry returned by debugfs_lookup() needs to be released by calling
    dput() which is missing in margining_port_remove(). Fix this by calling
    debugfs_lookup_and_remove() that combines both and avoids the memory leak.
    
    Fixes: d0f1e0c2a699 ("thunderbolt: Add support for receiver lane margining")
    Cc: stable@vger.kernel.org
    Signed-off-by: Yaxiong Tian <tianyaxiong@kylinos.cn>
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 69b6596c6e4aa581eaed734497c7fcfb5c3a75fe
Author: Herve Codina <herve.codina@bootlin.com>
Date:   Tue Nov 14 16:26:55 2023 +0100

    lib/vsprintf: Fix %pfwf when current node refcount == 0
    
    commit 5c47251e8c4903111608ddcba2a77c0c425c247c upstream.
    
    A refcount issue can appeared in __fwnode_link_del() due to the
    pr_debug() call:
      WARNING: CPU: 0 PID: 901 at lib/refcount.c:25 refcount_warn_saturate+0xe5/0x110
      Call Trace:
      <TASK>
      ...
      of_node_get+0x1e/0x30
      of_fwnode_get+0x28/0x40
      fwnode_full_name_string+0x34/0x90
      fwnode_string+0xdb/0x140
      ...
      vsnprintf+0x17b/0x630
      ...
      __fwnode_link_del+0x25/0xa0
      fwnode_links_purge+0x39/0xb0
      of_node_release+0xd9/0x180
      ...
    
    Indeed, an fwnode (of_node) is being destroyed and so, of_node_release()
    is called because the of_node refcount reached 0.
    From of_node_release() several function calls are done and lead to
    a pr_debug() calls with %pfwf to print the fwnode full name.
    The issue is not present if we change %pfwf to %pfwP.
    
    To print the full name, %pfwf iterates over the current node and its
    parents and obtain/drop a reference to all nodes involved.
    
    In order to allow to print the full name (%pfwf) of a node while it is
    being destroyed, do not obtain/drop a reference to this current node.
    
    Fixes: a92eb7621b9f ("lib/vsprintf: Make use of fwnode API to obtain node names and separators")
    Cc: stable@vger.kernel.org
    Signed-off-by: Herve Codina <herve.codina@bootlin.com>
    Reviewed-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Petr Mladek <pmladek@suse.com>
    Link: https://lore.kernel.org/r/20231114152655.409331-1-herve.codina@bootlin.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2dd6f2286047994a1fb1859a95bab523cbce1a5f
Author: xiongxin <xiongxin@kylinos.cn>
Date:   Wed Dec 20 10:29:01 2023 +0800

    gpio: dwapb: mask/unmask IRQ when disable/enale it
    
    commit 1cc3542c76acb5f59001e3e562eba672f1983355 upstream.
    
    In the hardware implementation of the I2C HID driver based on DesignWare
    GPIO IRQ chip, when the user continues to use the I2C HID device in the
    suspend process, the I2C HID interrupt will be masked after the resume
    process is finished.
    
    This is because the disable_irq()/enable_irq() of the DesignWare GPIO
    driver does not synchronize the IRQ mask register state. In normal use
    of the I2C HID procedure, the GPIO IRQ irq_mask()/irq_unmask() functions
    are called in pairs. In case of an exception, i2c_hid_core_suspend()
    calls disable_irq() to disable the GPIO IRQ. With low probability, this
    causes irq_unmask() to not be called, which causes the GPIO IRQ to be
    masked and not unmasked in enable_irq(), raising an exception.
    
    Add synchronization to the masked register state in the
    dwapb_irq_enable()/dwapb_irq_disable() function. mask the GPIO IRQ
    before disabling it. After enabling the GPIO IRQ, unmask the IRQ.
    
    Fixes: 7779b3455697 ("gpio: add a driver for the Synopsys DesignWare APB GPIO block")
    Cc: stable@kernel.org
    Co-developed-by: Riwen Lu <luriwen@kylinos.cn>
    Signed-off-by: Riwen Lu <luriwen@kylinos.cn>
    Signed-off-by: xiongxin <xiongxin@kylinos.cn>
    Acked-by: Serge Semin <fancer.lancer@gmail.com>
    Reviewed-by: Andy Shevchenko <andy@kernel.org>
    Signed-off-by: Bartosz Golaszewski <bartosz.golaszewski@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ab1c3f91d174d60afec50c15727b1a21b43ef302
Author: Tony Lindgren <tony@atomide.com>
Date:   Fri Nov 24 10:50:56 2023 +0200

    bus: ti-sysc: Flush posted write only after srst_udelay
    
    commit f71f6ff8c1f682a1cae4e8d7bdeed9d7f76b8f75 upstream.
    
    Commit 34539b442b3b ("bus: ti-sysc: Flush posted write on enable before
    reset") caused a regression reproducable on omap4 duovero where the ISS
    target module can produce interconnect errors on boot. Turns out the
    registers are not accessible until after a delay for devices needing
    a ti,sysc-delay-us value.
    
    Let's fix this by flushing the posted write only after the reset delay.
    We do flushing also for ti,sysc-delay-us using devices as that should
    trigger an interconnect error if the delay is not properly configured.
    
    Let's also add some comments while at it.
    
    Fixes: 34539b442b3b ("bus: ti-sysc: Flush posted write on enable before reset")
    Cc: stable@vger.kernel.org
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cd9f9ef59d85a7ce9caa3722611e781326de1f24
Author: Nam Cao <namcao@linutronix.de>
Date:   Fri Dec 1 10:23:29 2023 +0100

    pinctrl: starfive: jh7100: ignore disabled device tree nodes
    
    commit 5c584f175d32f9cc66c909f851cd905da58b39ea upstream.
    
    The driver always registers pin configurations in device tree. This can
    cause some inconvenience to users, as pin configurations in the base
    device tree cannot be disabled in the device tree overlay, even when the
    relevant devices are not used.
    
    Ignore disabled pin configuration nodes in device tree.
    
    Fixes: ec648f6b7686 ("pinctrl: starfive: Add pinctrl driver for StarFive SoCs")
    Cc:  <stable@vger.kernel.org>
    Signed-off-by: Nam Cao <namcao@linutronix.de>
    Link: https://lore.kernel.org/r/fe4c15dcc3074412326b8dc296b0cbccf79c49bf.1701422582.git.namcao@linutronix.de
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7f7efa30fa87e60ae43574edf0ff1d63bd1dcee2
Author: Mikulas Patocka <mpatocka@redhat.com>
Date:   Tue Dec 5 16:39:16 2023 +0100

    dm-integrity: don't modify bio's immutable bio_vec in integrity_metadata()
    
    commit b86f4b790c998afdbc88fe1aa55cfe89c4068726 upstream.
    
    __bio_for_each_segment assumes that the first struct bio_vec argument
    doesn't change - it calls "bio_advance_iter_single((bio), &(iter),
    (bvl).bv_len)" to advance the iterator. Unfortunately, the dm-integrity
    code changes the bio_vec with "bv.bv_len -= pos". When this code path
    is taken, the iterator would be out of sync and dm-integrity would
    report errors. This happens if the machine is out of memory and
    "kmalloc" fails.
    
    Fix this bug by making a copy of "bv" and changing the copy instead.
    
    Fixes: 7eada909bfd7 ("dm: add integrity target")
    Cc: stable@vger.kernel.org      # v4.12+
    Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 33b976a0f2aeecdb4be1aafe6822593833028184
Author: Steven Rostedt (Google) <rostedt@goodmis.org>
Date:   Wed Dec 20 11:15:25 2023 -0500

    tracing / synthetic: Disable events after testing in synth_event_gen_test_init()
    
    commit 88b30c7f5d27e1594d70dc2bd7199b18f2b57fa9 upstream.
    
    The synth_event_gen_test module can be built in, if someone wants to run
    the tests at boot up and not have to load them.
    
    The synth_event_gen_test_init() function creates and enables the synthetic
    events and runs its tests.
    
    The synth_event_gen_test_exit() disables the events it created and
    destroys the events.
    
    If the module is builtin, the events are never disabled. The issue is, the
    events should be disable after the tests are run. This could be an issue
    if the rest of the boot up tests are enabled, as they expect the events to
    be in a known state before testing. That known state happens to be
    disabled.
    
    When CONFIG_SYNTH_EVENT_GEN_TEST=y and CONFIG_EVENT_TRACE_STARTUP_TEST=y
    a warning will trigger:
    
     Running tests on trace events:
     Testing event create_synth_test:
     Enabled event during self test!
     ------------[ cut here ]------------
     WARNING: CPU: 2 PID: 1 at kernel/trace/trace_events.c:4150 event_trace_self_tests+0x1c2/0x480
     Modules linked in:
     CPU: 2 PID: 1 Comm: swapper/0 Not tainted 6.7.0-rc2-test-00031-gb803d7c664d5-dirty #276
     Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 1.16.2-debian-1.16.2-1 04/01/2014
     RIP: 0010:event_trace_self_tests+0x1c2/0x480
     Code: bb e8 a2 ab 5d fc 48 8d 7b 48 e8 f9 3d 99 fc 48 8b 73 48 40 f6 c6 01 0f 84 d6 fe ff ff 48 c7 c7 20 b6 ad bb e8 7f ab 5d fc 90 <0f> 0b 90 48 89 df e8 d3 3d 99 fc 48 8b 1b 4c 39 f3 0f 85 2c ff ff
     RSP: 0000:ffffc9000001fdc0 EFLAGS: 00010246
     RAX: 0000000000000029 RBX: ffff88810399ca80 RCX: 0000000000000000
     RDX: 0000000000000000 RSI: ffffffffb9f19478 RDI: ffff88823c734e64
     RBP: ffff88810399f300 R08: 0000000000000000 R09: fffffbfff79eb32a
     R10: ffffffffbcf59957 R11: 0000000000000001 R12: ffff888104068090
     R13: ffffffffbc89f0a0 R14: ffffffffbc8a0f08 R15: 0000000000000078
     FS:  0000000000000000(0000) GS:ffff88823c700000(0000) knlGS:0000000000000000
     CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
     CR2: 0000000000000000 CR3: 00000001f6282001 CR4: 0000000000170ef0
     Call Trace:
      <TASK>
      ? __warn+0xa5/0x200
      ? event_trace_self_tests+0x1c2/0x480
      ? report_bug+0x1f6/0x220
      ? handle_bug+0x6f/0x90
      ? exc_invalid_op+0x17/0x50
      ? asm_exc_invalid_op+0x1a/0x20
      ? tracer_preempt_on+0x78/0x1c0
      ? event_trace_self_tests+0x1c2/0x480
      ? __pfx_event_trace_self_tests_init+0x10/0x10
      event_trace_self_tests_init+0x27/0xe0
      do_one_initcall+0xd6/0x3c0
      ? __pfx_do_one_initcall+0x10/0x10
      ? kasan_set_track+0x25/0x30
      ? rcu_is_watching+0x38/0x60
      kernel_init_freeable+0x324/0x450
      ? __pfx_kernel_init+0x10/0x10
      kernel_init+0x1f/0x1e0
      ? _raw_spin_unlock_irq+0x33/0x50
      ret_from_fork+0x34/0x60
      ? __pfx_kernel_init+0x10/0x10
      ret_from_fork_asm+0x1b/0x30
      </TASK>
    
    This is because the synth_event_gen_test_init() left the synthetic events
    that it created enabled. By having it disable them after testing, the
    other selftests will run fine.
    
    Link: https://lore.kernel.org/linux-trace-kernel/20231220111525.2f0f49b0@gandalf.local.home
    
    Cc: stable@vger.kernel.org
    Cc: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Cc: Tom Zanussi <zanussi@kernel.org>
    Fixes: 9fe41efaca084 ("tracing: Add synth event generation test module")
    Acked-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Reported-by: Alexander Graf <graf@amazon.com>
    Tested-by: Alexander Graf <graf@amazon.com>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d2b549d3107b2b7677415e1ac0e15cf8ae3eb593
Author: Alexander Atanasov <alexander.atanasov@virtuozzo.com>
Date:   Fri Dec 15 14:10:08 2023 +0200

    scsi: core: Always send batch on reset or error handling command
    
    commit 066c5b46b6eaf2f13f80c19500dbb3b84baabb33 upstream.
    
    In commit 8930a6c20791 ("scsi: core: add support for request batching") the
    block layer bd->last flag was mapped to SCMD_LAST and used as an indicator
    to send the batch for the drivers that implement this feature. However, the
    error handling code was not updated accordingly.
    
    scsi_send_eh_cmnd() is used to send error handling commands and request
    sense. The problem is that request sense comes as a single command that
    gets into the batch queue and times out. As a result the device goes
    offline after several failed resets. This was observed on virtio_scsi
    during a device resize operation.
    
    [  496.316946] sd 0:0:4:0: [sdd] tag#117 scsi_eh_0: requesting sense
    [  506.786356] sd 0:0:4:0: [sdd] tag#117 scsi_send_eh_cmnd timeleft: 0
    [  506.787981] sd 0:0:4:0: [sdd] tag#117 abort
    
    To fix this always set SCMD_LAST flag in scsi_send_eh_cmnd() and
    scsi_reset_ioctl().
    
    Fixes: 8930a6c20791 ("scsi: core: add support for request batching")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Alexander Atanasov <alexander.atanasov@virtuozzo.com>
    Link: https://lore.kernel.org/r/20231215121008.2881653-1-alexander.atanasov@virtuozzo.com
    Reviewed-by: Ming Lei <ming.lei@redhat.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 72e472a91c0ddd6dfcf9320019a40016a916466a
Author: Martin K. Petersen <martin.petersen@oracle.com>
Date:   Fri Dec 8 12:09:38 2023 -0500

    Revert "scsi: aacraid: Reply queue mapping to CPUs based on IRQ affinity"
    
    commit c5becf57dd5659c687d41d623a69f42d63f59eb2 upstream.
    
    This reverts commit 9dc704dcc09eae7d21b5da0615eb2ed79278f63e.
    
    Several reports have been made indicating that this commit caused
    hangs. Numerous attempts at root causing and fixing the issue have
    been unsuccessful so let's revert for now.
    
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=217599
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4258274bacfbd331ed33949a7ce14cac53c7239a
Author: Geliang Tang <geliang.tang@linux.dev>
Date:   Fri Dec 15 17:04:24 2023 +0100

    selftests: mptcp: join: fix subflow_send_ack lookup
    
    [ Upstream commit c8f021eec5817601dbd25ab7e3ad5c720965c688 ]
    
    MPC backups tests will skip unexpected sometimes (For example, when
    compiling kernel with an older version of gcc, such as gcc-8), since
    static functions like mptcp_subflow_send_ack also be listed in
    /proc/kallsyms, with a 't' in front of it, not 'T' ('T' is for a global
    function):
    
     > grep "mptcp_subflow_send_ack" /proc/kallsyms
    
     0000000000000000 T __pfx___mptcp_subflow_send_ack
     0000000000000000 T __mptcp_subflow_send_ack
     0000000000000000 t __pfx_mptcp_subflow_send_ack
     0000000000000000 t mptcp_subflow_send_ack
    
    In this case, mptcp_lib_kallsyms_doesnt_have "mptcp_subflow_send_ack$"
    will be false, MPC backups tests will skip. This is not what we expected.
    
    The correct logic here should be: if mptcp_subflow_send_ack is not a
    global function in /proc/kallsyms, do these MPC backups tests. So a 'T'
    must be added in front of mptcp_subflow_send_ack.
    
    Fixes: 632978f0a961 ("selftests: mptcp: join: skip MPC backups tests if not supported")
    Cc: stable@vger.kernel.org
    Signed-off-by: Geliang Tang <geliang.tang@linux.dev>
    Reviewed-by: Mat Martineau <martineau@kernel.org>
    Signed-off-by: Matthieu Baerts <matttbe@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a8555c86f508e0e246a2729fe0f40bdf9fc51da0
Author: Ming Lei <ming.lei@redhat.com>
Date:   Mon Oct 9 17:33:18 2023 +0800

    ublk: move ublk_cancel_dev() out of ub->mutex
    
    [ Upstream commit 85248d670b71d9edda9459ee14fdc85c8e9632c0 ]
    
    ublk_cancel_dev() just calls ublk_cancel_queue() to cancel all pending
    io commands after ublk request queue is idle. The only protection is just
    the read & write of ubq->nr_io_ready and avoid duplicated command cancel,
    so add one per-queue lock with cancel flag for providing this protection,
    meantime move ublk_cancel_dev() out of ub->mutex.
    
    Then we needn't to call io_uring_cmd_complete_in_task() to cancel
    pending command. And the same cancel logic will be re-used for
    cancelable uring command.
    
    This patch basically reverts commit ac5902f84bb5 ("ublk: fix AB-BA lockdep warning").
    
    Signed-off-by: Ming Lei <ming.lei@redhat.com>
    Link: https://lore.kernel.org/r/20231009093324.957829-4-ming.lei@redhat.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1c250f2c5fa5406fb7c5f7eb40218b7d5bb8cfa8
Author: Konstantin Meskhidze <konstantin.meskhidze@huawei.com>
Date:   Tue Sep 5 18:12:22 2023 +0800

    ubifs: fix possible dereference after free
    
    [ Upstream commit d81efd66106c03771ffc8637855a6ec24caa6350 ]
    
    'old_idx' could be dereferenced after free via 'rb_link_node' function
    call.
    
    Fixes: b5fda08ef213 ("ubifs: Fix memleak when insert_old_idx() failed")
    Co-developed-by: Ivanov Mikhail <ivanov.mikhail1@huawei-partners.com>
    Signed-off-by: Konstantin Meskhidze <konstantin.meskhidze@huawei.com>
    Reviewed-by: Zhihao Cheng <chengzhihao1@huawei.com>
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3c42cc437d7e1e3095be0eca9d1fea103262e947
Author: Naohiro Aota <naohiro.aota@wdc.com>
Date:   Tue Aug 8 01:12:38 2023 +0900

    btrfs: zoned: no longer count fresh BG region as zone unusable
    
    [ Upstream commit 6a8ebc773ef64c8f12d6d60fd6e53d5ccc81314b ]
    
    Now that we switched to write time activation, we no longer need to (and
    must not) count the fresh region as zone unusable. This commit is similar
    to revert of commit fa2068d7e922b434eb ("btrfs: zoned: count fresh BG
    region as zone unusable").
    
    Signed-off-by: Naohiro Aota <naohiro.aota@wdc.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b09a67617621f41e12ad9ec771ff320fc8b88a94
Author: Aric Cyr <aric.cyr@amd.com>
Date:   Thu Feb 9 20:03:33 2023 -0500

    Revert "drm/amd/display: Do not set DRR on pipe commit"
    
    [ Upstream commit 36951fc9460fce96bafd131ceb0f343cae6d3cb9 ]
    
    This reverts commit 4f1b5e739dfd1edde33329e3f376733a131fb1ff.
    
    [Why & How]
    Original change causes a regression. Revert
    until fix is available.
    
    Reviewed-by: Aric Cyr <aric.cyr@amd.com>
    Acked-by: Qingqing Zhuo <qingqing.zhuo@amd.com>
    Signed-off-by: Aric Cyr <aric.cyr@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 93da3d8af9ee2ae6c93badd48539aafba3251a01
Author: Li Lingfeng <lilingfeng3@huawei.com>
Date:   Mon Jun 5 15:03:16 2023 +0800

    dm thin metadata: Fix ABBA deadlock by resetting dm_bufio_client
    
    [ Upstream commit d48300120627a1cb98914738fff38b424625b8ad ]
    
    As described in commit 8111964f1b85 ("dm thin: Fix ABBA deadlock between
    shrink_slab and dm_pool_abort_metadata"), ABBA deadlocks will be
    triggered because shrinker_rwsem currently needs to held by
    dm_pool_abort_metadata() as a side-effect of thin-pool metadata
    operation failure.
    
    The following three problem scenarios have been noticed:
    
    1) Described by commit 8111964f1b85 ("dm thin: Fix ABBA deadlock between
       shrink_slab and dm_pool_abort_metadata")
    
    2) shrinker_rwsem and throttle->lock
              P1(drop cache)                        P2(kworker)
    drop_caches_sysctl_handler
     drop_slab
      shrink_slab
       down_read(&shrinker_rwsem)  - LOCK A
       do_shrink_slab
        super_cache_scan
         prune_icache_sb
          dispose_list
           evict
            ext4_evict_inode
             ext4_clear_inode
              ext4_discard_preallocations
               ext4_mb_load_buddy_gfp
                ext4_mb_init_cache
                 ext4_wait_block_bitmap
                  __ext4_error
                   ext4_handle_error
                    ext4_commit_super
                     ...
                     dm_submit_bio
                                         do_worker
                                          throttle_work_update
                                           down_write(&t->lock) -- LOCK B
                                          process_deferred_bios
                                           commit
                                            metadata_operation_failed
                                             dm_pool_abort_metadata
                                              dm_block_manager_create
                                               dm_bufio_client_create
                                                register_shrinker
                                                 down_write(&shrinker_rwsem)
                                                 -- LOCK A
                     thin_map
                      thin_bio_map
                       thin_defer_bio_with_throttle
                        throttle_lock
                         down_read(&t->lock)  - LOCK B
    
    3) shrinker_rwsem and wait_on_buffer
              P1(drop cache)                            P2(kworker)
    drop_caches_sysctl_handler
     drop_slab
      shrink_slab
       down_read(&shrinker_rwsem)  - LOCK A
       do_shrink_slab
       ...
        ext4_wait_block_bitmap
         __ext4_error
          ext4_handle_error
           jbd2_journal_abort
            jbd2_journal_update_sb_errno
             jbd2_write_superblock
              submit_bh
               // LOCK B
               // RELEASE B
                                 do_worker
                                  throttle_work_update
                                   down_write(&t->lock) - LOCK B
                                  process_deferred_bios
                                   process_bio
                                   commit
                                    metadata_operation_failed
                                     dm_pool_abort_metadata
                                      dm_block_manager_create
                                       dm_bufio_client_create
                                        register_shrinker
                                         register_shrinker_prepared
                                          down_write(&shrinker_rwsem)  - LOCK A
                                   bio_endio
          wait_on_buffer
           __wait_on_buffer
    
    Fix these by resetting dm_bufio_client without holding shrinker_rwsem.
    
    Fixes: 8111964f1b85 ("dm thin: Fix ABBA deadlock between shrink_slab and dm_pool_abort_metadata")
    Cc: stable@vger.kernel.org
    Signed-off-by: Li Lingfeng <lilingfeng3@huawei.com>
    Signed-off-by: Mike Snitzer <snitzer@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e9779fac685e03bd971d5713c7185db5ab55bd1e
Author: Mauricio Faria de Oliveira <mfo@canonical.com>
Date:   Thu Jul 20 11:30:33 2023 -0300

    loop: do not enforce max_loop hard limit by (new) default
    
    [ Upstream commit bb5faa99f0ce40756ab7bbbce4f16c01ca5ebd5a ]
    
    Problem:
    
    The max_loop parameter is used for 2 different purposes:
    
    1) initial number of loop devices to pre-create on init
    2) maximum number of loop devices to add on access/open()
    
    Historically, its default value (zero) caused 1) to create non-zero
    number of devices (CONFIG_BLK_DEV_LOOP_MIN_COUNT), and no hard limit on
    2) to add devices with autoloading.
    
    However, the default value changed in commit 85c50197716c ("loop: Fix
    the max_loop commandline argument treatment when it is set to 0") to
    CONFIG_BLK_DEV_LOOP_MIN_COUNT, for max_loop=0 not to pre-create devices.
    
    That does improve 1), but unfortunately it breaks 2), as the default
    behavior changed from no-limit to hard-limit.
    
    Example:
    
    For example, this userspace code broke for N >= CONFIG, if the user
    relied on the default value 0 for max_loop:
    
        mknod("/dev/loopN");
        open("/dev/loopN");  // now fails with ENXIO
    
    Though affected users may "fix" it with (loop.)max_loop=0, this means to
    require a kernel parameter change on stable kernel update (that commit
    Fixes: an old commit in stable).
    
    Solution:
    
    The original semantics for the default value in 2) can be applied if the
    parameter is not set (ie, default behavior).
    
    This still keeps the intended function in 1) and 2) if set, and that
    commit's intended improvement in 1) if max_loop=0.
    
    Before 85c50197716c:
      - default:     1) CONFIG devices   2) no limit
      - max_loop=0:  1) CONFIG devices   2) no limit
      - max_loop=X:  1) X devices        2) X limit
    
    After 85c50197716c:
      - default:     1) CONFIG devices   2) CONFIG limit (*)
      - max_loop=0:  1) 0 devices (*)    2) no limit
      - max_loop=X:  1) X devices        2) X limit
    
    This commit:
      - default:     1) CONFIG devices   2) no limit (*)
      - max_loop=0:  1) 0 devices        2) no limit
      - max_loop=X:  1) X devices        2) X limit
    
    Future:
    
    The issue/regression from that commit only affects code under the
    CONFIG_BLOCK_LEGACY_AUTOLOAD deprecation guard, thus the fix too is
    contained under it.
    
    Once that deprecated functionality/code is removed, the purpose 2) of
    max_loop (hard limit) is no longer in use, so the module parameter
    description can be changed then.
    
    Tests:
    
    Linux 6.4-rc7
    CONFIG_BLK_DEV_LOOP_MIN_COUNT=8
    CONFIG_BLOCK_LEGACY_AUTOLOAD=y
    
    - default (original)
    
            # ls -1 /dev/loop*
            /dev/loop-control
            /dev/loop0
            ...
            /dev/loop7
    
            # ./test-loop
            open: /dev/loop8: No such device or address
    
    - default (patched)
    
            # ls -1 /dev/loop*
            /dev/loop-control
            /dev/loop0
            ...
            /dev/loop7
    
            # ./test-loop
            #
    
    - max_loop=0 (original & patched):
    
            # ls -1 /dev/loop*
            /dev/loop-control
    
            # ./test-loop
            #
    
    - max_loop=8 (original & patched):
    
            # ls -1 /dev/loop*
            /dev/loop-control
            /dev/loop0
            ...
            /dev/loop7
    
            # ./test-loop
            open: /dev/loop8: No such device or address
    
    - max_loop=0 (patched; CONFIG_BLOCK_LEGACY_AUTOLOAD is not set)
    
            # ls -1 /dev/loop*
            /dev/loop-control
    
            # ./test-loop
            open: /dev/loop8: No such device or address
    
    Fixes: 85c50197716c ("loop: Fix the max_loop commandline argument treatment when it is set to 0")
    Signed-off-by: Mauricio Faria de Oliveira <mfo@canonical.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Link: https://lore.kernel.org/r/20230720143033.841001-3-mfo@canonical.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 600043e1856cf0ab798a8452f8839ee821427c1c
Author: Heiko Stuebner <heiko@sntech.de>
Date:   Wed Jan 18 15:22:52 2023 +0100

    RISC-V: Fix do_notify_resume / do_work_pending prototype
    
    [ Upstream commit 285b6a18daf1358e70a4c842884d9ff2d2fe53e2 ]
    
    Commit b0f4c74eadbf ("RISC-V: Fix unannoted hardirqs-on in return to
    userspace slow-path") renamed the do_notify_resume function to
    do_work_pending but did not change the prototype in signal.h
    Do that now, as the original function does not exist anymore.
    
    Fixes: b0f4c74eadbf ("RISC-V: Fix unannoted hardirqs-on in return to userspace slow-path")
    Signed-off-by: Heiko Stuebner <heiko.stuebner@vrull.eu>
    Reviewed-by: Andrew Jones <ajones@ventanamicro.com>
    Reviewed-by: Conor Dooley <conor.dooley@microchip.com>
    Link: https://lore.kernel.org/r/20230118142252.337103-1-heiko@sntech.de
    Signed-off-by: Palmer Dabbelt <palmer@rivosinc.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 764c6790dd71908957808a4d481d225a099383ea
Author: JP Kobryn <inwardvessel@gmail.com>
Date:   Mon Dec 4 12:23:20 2023 -0800

    9p: prevent read overrun in protocol dump tracepoint
    
    commit a931c6816078af3e306e0f444f492396ce40de31 upstream.
    
    An out of bounds read can occur within the tracepoint 9p_protocol_dump. In
    the fast assign, there is a memcpy that uses a constant size of 32 (macro
    named P9_PROTO_DUMP_SZ). When the copy is invoked, the source buffer is not
    guaranteed match this size.  It was found that in some cases the source
    buffer size is less than 32, resulting in a read that overruns.
    
    The size of the source buffer seems to be known at the time of the
    tracepoint being invoked. The allocations happen within p9_fcall_init(),
    where the capacity field is set to the allocated size of the payload
    buffer. This patch tries to fix the overrun by changing the fixed array to
    a dynamically sized array and using the minimum of the capacity value or
    P9_PROTO_DUMP_SZ as its length. The trace log statement is adjusted to
    account for this. Note that the trace log no longer splits the payload on
    the first 16 bytes. The full payload is now logged to a single line.
    
    To repro the orignal problem, operations to a plan 9 managed resource can
    be used. The simplest approach might just be mounting a shared filesystem
    (between host and guest vm) using the plan 9 protocol while the tracepoint
    is enabled.
    
    mount -t 9p -o trans=virtio <mount_tag> <mount_path>
    
    The bpftrace program below can be used to show the out of bounds read.
    Note that a recent version of bpftrace is needed for the raw tracepoint
    support. The script was tested using v0.19.0.
    
    /* from include/net/9p/9p.h */
    struct p9_fcall {
        u32 size;
        u8 id;
        u16 tag;
        size_t offset;
        size_t capacity;
        struct kmem_cache *cache;
        u8 *sdata;
        bool zc;
    };
    
    tracepoint:9p:9p_protocol_dump
    {
        /* out of bounds read can happen when this tracepoint is enabled */
    }
    
    rawtracepoint:9p_protocol_dump
    {
        $pdu = (struct p9_fcall *)arg1;
        $dump_sz = (uint64)32;
    
        if ($dump_sz > $pdu->capacity) {
            printf("reading %zu bytes from src buffer of %zu bytes\n",
                $dump_sz, $pdu->capacity);
        }
    }
    
    Signed-off-by: JP Kobryn <inwardvessel@gmail.com>
    Message-ID: <20231204202321.22730-1-inwardvessel@gmail.com>
    Fixes: 60ece0833b6c ("net/9p: allocate appropriate reduced message buffers")
    Cc: stable@vger.kernel.org
    Reviewed-by: Christian Schoenebeck <linux_oss@crudebyte.com>
    Signed-off-by: Dominique Martinet <asmadeus@codewreck.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7d09c84df5ab9e18464a2f048e393a7860a043e9
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Mon Dec 11 10:11:34 2023 +0200

    drm/i915: Reject async flips with bigjoiner
    
    commit 88a173e5dd05e788068e8fa20a8c37c44bd8f416 upstream.
    
    Currently async flips are busted when bigjoiner is in use.
    As a short term fix simply reject async flips in that case.
    
    Cc: stable@vger.kernel.org
    Closes: https://gitlab.freedesktop.org/drm/intel/-/issues/9769
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20231211081134.2698-1-ville.syrjala@linux.intel.com
    Reviewed-by: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
    (cherry picked from commit e93bffc2ac0a833b42841f31fff955549d38ce98)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c60e10d1549f8748a68ec13dcd177c62843985ff
Author: Paulo Alcantara <pc@manguebit.com>
Date:   Fri Dec 15 19:59:14 2023 -0300

    smb: client: fix OOB in smbCalcSize()
    
    commit b35858b3786ddbb56e1c35138ba25d6adf8d0bef upstream.
    
    Validate @smb->WordCount to avoid reading off the end of @smb and thus
    causing the following KASAN splat:
    
      BUG: KASAN: slab-out-of-bounds in smbCalcSize+0x32/0x40 [cifs]
      Read of size 2 at addr ffff88801c024ec5 by task cifsd/1328
    
      CPU: 1 PID: 1328 Comm: cifsd Not tainted 6.7.0-rc5 #9
      Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS
      rel-1.16.2-3-gd478f380-rebuilt.opensuse.org 04/01/2014
      Call Trace:
       <TASK>
       dump_stack_lvl+0x4a/0x80
       print_report+0xcf/0x650
       ? srso_alias_return_thunk+0x5/0xfbef5
       ? srso_alias_return_thunk+0x5/0xfbef5
       ? __phys_addr+0x46/0x90
       kasan_report+0xd8/0x110
       ? smbCalcSize+0x32/0x40 [cifs]
       ? smbCalcSize+0x32/0x40 [cifs]
       kasan_check_range+0x105/0x1b0
       smbCalcSize+0x32/0x40 [cifs]
       checkSMB+0x162/0x370 [cifs]
       ? __pfx_checkSMB+0x10/0x10 [cifs]
       cifs_handle_standard+0xbc/0x2f0 [cifs]
       ? srso_alias_return_thunk+0x5/0xfbef5
       cifs_demultiplex_thread+0xed1/0x1360 [cifs]
       ? __pfx_cifs_demultiplex_thread+0x10/0x10 [cifs]
       ? srso_alias_return_thunk+0x5/0xfbef5
       ? lockdep_hardirqs_on_prepare+0x136/0x210
       ? __pfx_lock_release+0x10/0x10
       ? srso_alias_return_thunk+0x5/0xfbef5
       ? mark_held_locks+0x1a/0x90
       ? lockdep_hardirqs_on_prepare+0x136/0x210
       ? srso_alias_return_thunk+0x5/0xfbef5
       ? srso_alias_return_thunk+0x5/0xfbef5
       ? __kthread_parkme+0xce/0xf0
       ? __pfx_cifs_demultiplex_thread+0x10/0x10 [cifs]
       kthread+0x18d/0x1d0
       ? kthread+0xdb/0x1d0
       ? __pfx_kthread+0x10/0x10
       ret_from_fork+0x34/0x60
       ? __pfx_kthread+0x10/0x10
       ret_from_fork_asm+0x1b/0x30
       </TASK>
    
    This fixes CVE-2023-6606.
    
    Reported-by: j51569436@gmail.com
    Closes: https://bugzilla.kernel.org/show_bug.cgi?id=218218
    Cc: stable@vger.kernel.org
    Signed-off-by: Paulo Alcantara (SUSE) <pc@manguebit.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bef4315f19ba6f434054f58b958c0cf058c7a43f
Author: Paulo Alcantara <pc@manguebit.com>
Date:   Wed Dec 13 12:25:57 2023 -0300

    smb: client: fix OOB in SMB2_query_info_init()
    
    commit 33eae65c6f49770fec7a662935d4eb4a6406d24b upstream.
    
    A small CIFS buffer (448 bytes) isn't big enough to hold
    SMB2_QUERY_INFO request along with user's input data from
    CIFS_QUERY_INFO ioctl.  That is, if the user passed an input buffer >
    344 bytes, the client will memcpy() off the end of @req->Buffer in
    SMB2_query_info_init() thus causing the following KASAN splat:
    
      BUG: KASAN: slab-out-of-bounds in SMB2_query_info_init+0x242/0x250 [cifs]
      Write of size 1023 at addr ffff88801308c5a8 by task a.out/1240
    
      CPU: 1 PID: 1240 Comm: a.out Not tainted 6.7.0-rc4 #5
      Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS
      rel-1.16.2-3-gd478f380-rebuilt.opensuse.org 04/01/2014
      Call Trace:
       <TASK>
       dump_stack_lvl+0x4a/0x80
       print_report+0xcf/0x650
       ? srso_alias_return_thunk+0x5/0xfbef5
       ? srso_alias_return_thunk+0x5/0xfbef5
       ? srso_alias_return_thunk+0x5/0xfbef5
       ? __phys_addr+0x46/0x90
       kasan_report+0xd8/0x110
       ? SMB2_query_info_init+0x242/0x250 [cifs]
       ? SMB2_query_info_init+0x242/0x250 [cifs]
       kasan_check_range+0x105/0x1b0
       __asan_memcpy+0x3c/0x60
       SMB2_query_info_init+0x242/0x250 [cifs]
       ? __pfx_SMB2_query_info_init+0x10/0x10 [cifs]
       ? srso_alias_return_thunk+0x5/0xfbef5
       ? smb_rqst_len+0xa6/0xc0 [cifs]
       smb2_ioctl_query_info+0x4f4/0x9a0 [cifs]
       ? __pfx_smb2_ioctl_query_info+0x10/0x10 [cifs]
       ? __pfx_cifsConvertToUTF16+0x10/0x10 [cifs]
       ? kasan_set_track+0x25/0x30
       ? srso_alias_return_thunk+0x5/0xfbef5
       ? __kasan_kmalloc+0x8f/0xa0
       ? srso_alias_return_thunk+0x5/0xfbef5
       ? cifs_strndup_to_utf16+0x12d/0x1a0 [cifs]
       ? __build_path_from_dentry_optional_prefix+0x19d/0x2d0 [cifs]
       ? __pfx_smb2_ioctl_query_info+0x10/0x10 [cifs]
       cifs_ioctl+0x11c7/0x1de0 [cifs]
       ? __pfx_cifs_ioctl+0x10/0x10 [cifs]
       ? srso_alias_return_thunk+0x5/0xfbef5
       ? rcu_is_watching+0x23/0x50
       ? srso_alias_return_thunk+0x5/0xfbef5
       ? __rseq_handle_notify_resume+0x6cd/0x850
       ? __pfx___schedule+0x10/0x10
       ? blkcg_iostat_update+0x250/0x290
       ? srso_alias_return_thunk+0x5/0xfbef5
       ? ksys_write+0xe9/0x170
       __x64_sys_ioctl+0xc9/0x100
       do_syscall_64+0x47/0xf0
       entry_SYSCALL_64_after_hwframe+0x6f/0x77
      RIP: 0033:0x7f893dde49cf
      Code: 00 48 89 44 24 18 31 c0 48 8d 44 24 60 c7 04 24 10 00 00 00 48
      89 44 24 08 48 8d 44 24 20 48 89 44 24 10 b8 10 00 00 00 0f 05 <89>
      c2 3d 00 f0 ff ff 77 18 48 8b 44 24 18 64 48 2b 04 25 28 00 00
      RSP: 002b:00007ffc03ff4160 EFLAGS: 00000246 ORIG_RAX: 0000000000000010
      RAX: ffffffffffffffda RBX: 00007ffc03ff4378 RCX: 00007f893dde49cf
      RDX: 00007ffc03ff41d0 RSI: 00000000c018cf07 RDI: 0000000000000003
      RBP: 00007ffc03ff4260 R08: 0000000000000410 R09: 0000000000000001
      R10: 00007f893dce7300 R11: 0000000000000246 R12: 0000000000000000
      R13: 00007ffc03ff4388 R14: 00007f893df15000 R15: 0000000000406de0
       </TASK>
    
    Fix this by increasing size of SMB2_QUERY_INFO request buffers and
    validating input length to prevent other callers from overflowing @req
    in SMB2_query_info_init() as well.
    
    Fixes: f5b05d622a3e ("cifs: add IOCTL for QUERY_INFO passthrough to userspace")
    Cc: stable@vger.kernel.org
    Reported-by: Robert Morris <rtm@csail.mit.edu>
    Signed-off-by: Paulo Alcantara <pc@manguebit.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 71fe685b6a47f887d23125681b59acbb5c059e15
Author: Paulo Alcantara <pc@manguebit.com>
Date:   Sat Dec 16 01:10:04 2023 -0300

    smb: client: fix potential OOB in cifs_dump_detail()
    
    commit b50492b05fd02887b46aef079592207fb5c97a4c upstream.
    
    Validate SMB message with ->check_message() before calling
    ->calc_smb_size().
    
    Signed-off-by: Paulo Alcantara (SUSE) <pc@manguebit.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 277832a306f916d9b7fddb9166dd4e876b402b17
Author: Paulo Alcantara <pc@manguebit.com>
Date:   Wed Dec 13 12:25:56 2023 -0300

    smb: client: fix OOB in cifsd when receiving compounded resps
    
    commit a8f68b11158f09754418de62e6b3e7b9b7a50cc9 upstream.
    
    Validate next header's offset in ->next_header() so that it isn't
    smaller than MID_HEADER_SIZE(server) and then standard_receive3() or
    ->receive() ends up writing off the end of the buffer because
    'pdu_length - MID_HEADER_SIZE(server)' wraps up to a huge length:
    
      BUG: KASAN: slab-out-of-bounds in _copy_to_iter+0x4fc/0x840
      Write of size 701 at addr ffff88800caf407f by task cifsd/1090
    
      CPU: 0 PID: 1090 Comm: cifsd Not tainted 6.7.0-rc4 #5
      Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS
      rel-1.16.2-3-gd478f380-rebuilt.opensuse.org 04/01/2014
      Call Trace:
       <TASK>
       dump_stack_lvl+0x4a/0x80
       print_report+0xcf/0x650
       ? srso_alias_return_thunk+0x5/0xfbef5
       ? srso_alias_return_thunk+0x5/0xfbef5
       ? __phys_addr+0x46/0x90
       kasan_report+0xd8/0x110
       ? _copy_to_iter+0x4fc/0x840
       ? _copy_to_iter+0x4fc/0x840
       kasan_check_range+0x105/0x1b0
       __asan_memcpy+0x3c/0x60
       _copy_to_iter+0x4fc/0x840
       ? srso_alias_return_thunk+0x5/0xfbef5
       ? hlock_class+0x32/0xc0
       ? srso_alias_return_thunk+0x5/0xfbef5
       ? __pfx__copy_to_iter+0x10/0x10
       ? srso_alias_return_thunk+0x5/0xfbef5
       ? lock_is_held_type+0x90/0x100
       ? srso_alias_return_thunk+0x5/0xfbef5
       ? __might_resched+0x278/0x360
       ? __pfx___might_resched+0x10/0x10
       ? srso_alias_return_thunk+0x5/0xfbef5
       __skb_datagram_iter+0x2c2/0x460
       ? __pfx_simple_copy_to_iter+0x10/0x10
       skb_copy_datagram_iter+0x6c/0x110
       tcp_recvmsg_locked+0x9be/0xf40
       ? __pfx_tcp_recvmsg_locked+0x10/0x10
       ? mark_held_locks+0x5d/0x90
       ? srso_alias_return_thunk+0x5/0xfbef5
       tcp_recvmsg+0xe2/0x310
       ? __pfx_tcp_recvmsg+0x10/0x10
       ? srso_alias_return_thunk+0x5/0xfbef5
       ? srso_alias_return_thunk+0x5/0xfbef5
       ? lock_acquire+0x14a/0x3a0
       ? srso_alias_return_thunk+0x5/0xfbef5
       inet_recvmsg+0xd0/0x370
       ? __pfx_inet_recvmsg+0x10/0x10
       ? __pfx_lock_release+0x10/0x10
       ? do_raw_spin_trylock+0xd1/0x120
       sock_recvmsg+0x10d/0x150
       cifs_readv_from_socket+0x25a/0x490 [cifs]
       ? __pfx_cifs_readv_from_socket+0x10/0x10 [cifs]
       ? srso_alias_return_thunk+0x5/0xfbef5
       cifs_read_from_socket+0xb5/0x100 [cifs]
       ? __pfx_cifs_read_from_socket+0x10/0x10 [cifs]
       ? __pfx_lock_release+0x10/0x10
       ? do_raw_spin_trylock+0xd1/0x120
       ? _raw_spin_unlock+0x23/0x40
       ? srso_alias_return_thunk+0x5/0xfbef5
       ? __smb2_find_mid+0x126/0x230 [cifs]
       cifs_demultiplex_thread+0xd39/0x1270 [cifs]
       ? __pfx_cifs_demultiplex_thread+0x10/0x10 [cifs]
       ? __pfx_lock_release+0x10/0x10
       ? srso_alias_return_thunk+0x5/0xfbef5
       ? mark_held_locks+0x1a/0x90
       ? lockdep_hardirqs_on_prepare+0x136/0x210
       ? srso_alias_return_thunk+0x5/0xfbef5
       ? srso_alias_return_thunk+0x5/0xfbef5
       ? __kthread_parkme+0xce/0xf0
       ? __pfx_cifs_demultiplex_thread+0x10/0x10 [cifs]
       kthread+0x18d/0x1d0
       ? kthread+0xdb/0x1d0
       ? __pfx_kthread+0x10/0x10
       ret_from_fork+0x34/0x60
       ? __pfx_kthread+0x10/0x10
       ret_from_fork_asm+0x1b/0x30
       </TASK>
    
    Fixes: 8ce79ec359ad ("cifs: update multiplex loop to handle compounded responses")
    Cc: stable@vger.kernel.org
    Reported-by: Robert Morris <rtm@csail.mit.edu>
    Signed-off-by: Paulo Alcantara (SUSE) <pc@manguebit.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3f6da210470c33d76df3c105c391e0335f10d416
Author: Fabio Estevam <festevam@denx.de>
Date:   Fri Dec 15 11:13:57 2023 +0000

    dt-bindings: nvmem: mxs-ocotp: Document fsl,ocotp
    
    commit a2a8aefecbd0f87d6127951cef33b3def8439057 upstream.
    
    Both imx23.dtsi and imx28.dtsi describe the OCOTP nodes in
    the format:
    
    compatible = "fsl,imx28-ocotp", "fsl,ocotp";
    
    Document the "fsl,ocotp" entry to fix the following schema
    warning:
    
    efuse@8002c000: compatible: ['fsl,imx23-ocotp', 'fsl,ocotp'] is too long
    from schema $id: http://devicetree.org/schemas/nvmem/mxs-ocotp.yaml#
    
    Fixes: 2c504460f502 ("dt-bindings: nvmem: Convert MXS OCOTP to json-schema")
    Cc:  <Stable@vger.kernel.org>
    Signed-off-by: Fabio Estevam <festevam@denx.de>
    Acked-by: Conor Dooley <conor.dooley@microchip.com>
    Signed-off-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Link: https://lore.kernel.org/r/20231215111358.316727-2-srinivas.kandagatla@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1092525155eaad5c69ca9f3b6f3e7895a9424d66
Author: Ronald Wahl <ronald.wahl@raritan.com>
Date:   Thu Dec 14 19:11:12 2023 +0100

    net: ks8851: Fix TX stall caused by TX buffer overrun
    
    commit 3dc5d44545453de1de9c53cc529cc960a85933da upstream.
    
    There is a bug in the ks8851 Ethernet driver that more data is written
    to the hardware TX buffer than actually available. This is caused by
    wrong accounting of the free TX buffer space.
    
    The driver maintains a tx_space variable that represents the TX buffer
    space that is deemed to be free. The ks8851_start_xmit_spi() function
    adds an SKB to a queue if tx_space is large enough and reduces tx_space
    by the amount of buffer space it will later need in the TX buffer and
    then schedules a work item. If there is not enough space then the TX
    queue is stopped.
    
    The worker function ks8851_tx_work() dequeues all the SKBs and writes
    the data into the hardware TX buffer. The last packet will trigger an
    interrupt after it was send. Here it is assumed that all data fits into
    the TX buffer.
    
    In the interrupt routine (which runs asynchronously because it is a
    threaded interrupt) tx_space is updated with the current value from the
    hardware. Also the TX queue is woken up again.
    
    Now it could happen that after data was sent to the hardware and before
    handling the TX interrupt new data is queued in ks8851_start_xmit_spi()
    when the TX buffer space had still some space left. When the interrupt
    is actually handled tx_space is updated from the hardware but now we
    already have new SKBs queued that have not been written to the hardware
    TX buffer yet. Since tx_space has been overwritten by the value from the
    hardware the space is not accounted for.
    
    Now we have more data queued then buffer space available in the hardware
    and ks8851_tx_work() will potentially overrun the hardware TX buffer. In
    many cases it will still work because often the buffer is written out
    fast enough so that no overrun occurs but for example if the peer
    throttles us via flow control then an overrun may happen.
    
    This can be fixed in different ways. The most simple way would be to set
    tx_space to 0 before writing data to the hardware TX buffer preventing
    the queuing of more SKBs until the TX interrupt has been handled. I have
    chosen a slightly more efficient (and still rather simple) way and
    track the amount of data that is already queued and not yet written to
    the hardware. When new SKBs are to be queued the already queued amount
    of data is honoured when checking free TX buffer space.
    
    I tested this with a setup of two linked KS8851 running iperf3 between
    the two in bidirectional mode. Before the fix I got a stall after some
    minutes. With the fix I saw now issues anymore after hours.
    
    Fixes: 3ba81f3ece3c ("net: Micrel KS8851 SPI network driver")
    Cc: "David S. Miller" <davem@davemloft.net>
    Cc: Eric Dumazet <edumazet@google.com>
    Cc: Jakub Kicinski <kuba@kernel.org>
    Cc: Paolo Abeni <pabeni@redhat.com>
    Cc: Ben Dooks <ben.dooks@codethink.co.uk>
    Cc: Tristram Ha <Tristram.Ha@microchip.com>
    Cc: netdev@vger.kernel.org
    Cc: stable@vger.kernel.org # 5.10+
    Signed-off-by: Ronald Wahl <ronald.wahl@raritan.com>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Link: https://lore.kernel.org/r/20231214181112.76052-1-rwahl@gmx.de
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e9df9f0891288d9172aab589f3374f78a37afa19
Author: Rouven Czerwinski <r.czerwinski@pengutronix.de>
Date:   Thu Dec 7 08:58:36 2023 +0100

    net: rfkill: gpio: set GPIO direction
    
    commit 23484d817082c3005252d8edfc8292c8a1006b5b upstream.
    
    Fix the undefined usage of the GPIO consumer API after retrieving the
    GPIO description with GPIO_ASIS. The API documentation mentions that
    GPIO_ASIS won't set a GPIO direction and requires the user to set a
    direction before using the GPIO.
    
    This can be confirmed on i.MX6 hardware, where rfkill-gpio is no longer
    able to enabled/disable a device, presumably because the GPIO controller
    was never configured for the output direction.
    
    Fixes: b2f750c3a80b ("net: rfkill: gpio: prevent value glitch during probe")
    Cc: stable@vger.kernel.org
    Signed-off-by: Rouven Czerwinski <r.czerwinski@pengutronix.de>
    Link: https://msgid.link/20231207075835.3091694-1-r.czerwinski@pengutronix.de
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 805611157d684b46473cd343e0c95e888918d8c4
Author: Fedor Pchelkin <pchelkin@ispras.ru>
Date:   Wed Dec 6 23:09:13 2023 +0300

    net: 9p: avoid freeing uninit memory in p9pdu_vreadf
    
    commit ff49bf1867578f23a5ffdd38f927f6e1e16796c4 upstream.
    
    If some of p9pdu_readf() calls inside case 'T' in p9pdu_vreadf() fails,
    the error path is not handled properly. *wnames or members of *wnames
    array may be left uninitialized and invalidly freed.
    
    Initialize *wnames to NULL in beginning of case 'T'. Initialize the first
    *wnames array element to NULL and nullify the failing *wnames element so
    that the error path freeing loop stops on the first NULL element and
    doesn't proceed further.
    
    Found by Linux Verification Center (linuxtesting.org).
    
    Fixes: ace51c4dd2f9 ("9p: add new protocol support code")
    Signed-off-by: Fedor Pchelkin <pchelkin@ispras.ru>
    Message-ID: <20231206200913.16135-1-pchelkin@ispras.ru>
    Cc: stable@vger.kernel.org
    Reviewed-by: Simon Horman <horms@kernel.org>
    Reviewed-by: Christian Schoenebeck <linux_oss@crudebyte.com>
    Signed-off-by: Dominique Martinet <asmadeus@codewreck.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4c775b4cd8dd676e83f4a67d3e34f5ff80f0c7cf
Author: Christoffer Sandberg <cs@tuxedo.de>
Date:   Fri Dec 22 23:25:38 2023 -0800

    Input: soc_button_array - add mapping for airplane mode button
    
    commit ea3715941a9b7d816a1e9096ac0577900af2a69e upstream.
    
    This add a mapping for the airplane mode button on the TUXEDO Pulse Gen3.
    
    While it is physically a key it behaves more like a switch, sending a key
    down on first press and a key up on 2nd press. Therefor the switch event
    is used here. Besides this behaviour it uses the HID usage-id 0xc6
    (Wireless Radio Button) and not 0xc8 (Wireless Radio Slider Switch), but
    since neither 0xc6 nor 0xc8 are currently implemented at all in
    soc_button_array this not to standard behaviour is not put behind a quirk
    for the moment.
    
    Signed-off-by: Christoffer Sandberg <cs@tuxedo.de>
    Signed-off-by: Werner Sembach <wse@tuxedocomputers.com>
    Link: https://lore.kernel.org/r/20231215171718.80229-1-wse@tuxedocomputers.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5df2b49e7e78e8de540a4b2793c918a254e30aec
Author: Jose Ignacio Tornos Martinez <jtornosm@redhat.com>
Date:   Thu Dec 7 18:50:07 2023 +0100

    net: usb: ax88179_178a: avoid failed operations when device is disconnected
    
    commit aef05e349bfd81c95adb4489639413fadbb74a83 upstream.
    
    When the device is disconnected we get the following messages showing
    failed operations:
    Nov 28 20:22:11 localhost kernel: usb 2-3: USB disconnect, device number 2
    Nov 28 20:22:11 localhost kernel: ax88179_178a 2-3:1.0 enp2s0u3: unregister 'ax88179_178a' usb-0000:02:00.0-3, ASIX AX88179 USB 3.0 Gigabit Ethernet
    Nov 28 20:22:11 localhost kernel: ax88179_178a 2-3:1.0 enp2s0u3: Failed to read reg index 0x0002: -19
    Nov 28 20:22:11 localhost kernel: ax88179_178a 2-3:1.0 enp2s0u3: Failed to write reg index 0x0002: -19
    Nov 28 20:22:11 localhost kernel: ax88179_178a 2-3:1.0 enp2s0u3 (unregistered): Failed to write reg index 0x0002: -19
    Nov 28 20:22:11 localhost kernel: ax88179_178a 2-3:1.0 enp2s0u3 (unregistered): Failed to write reg index 0x0001: -19
    Nov 28 20:22:11 localhost kernel: ax88179_178a 2-3:1.0 enp2s0u3 (unregistered): Failed to write reg index 0x0002: -19
    
    The reason is that although the device is detached, normal stop and
    unbind operations are commanded from the driver. These operations are
    not necessary in this situation, so avoid these logs when the device is
    detached if the result of the operation is -ENODEV and if the new flag
    informing about the disconnecting status is enabled.
    
    cc:  <stable@vger.kernel.org>
    Fixes: e2ca90c276e1f ("ax88179_178a: ASIX AX88179_178A USB 3.0/2.0 to gigabit ethernet adapter driver")
    Signed-off-by: Jose Ignacio Tornos Martinez <jtornosm@redhat.com>
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Link: https://lore.kernel.org/r/20231207175007.263907-1-jtornosm@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0f7bffd40a517660853ebdc1a104bd493e6bbe4f
Author: Alex Lu <alex_lu@realsil.com.cn>
Date:   Tue Dec 12 10:30:34 2023 +0800

    Bluetooth: Add more enc key size check
    
    commit 04a342cc49a8522e99c9b3346371c329d841dcd2 upstream.
    
    When we are slave role and receives l2cap conn req when encryption has
    started, we should check the enc key size to avoid KNOB attack or BLUFFS
    attack.
    From SIG recommendation, implementations are advised to reject
    service-level connections on an encrypted baseband link with key
    strengths below 7 octets.
    A simple and clear way to achieve this is to place the enc key size
    check in hci_cc_read_enc_key_size()
    
    The btmon log below shows the case that lacks enc key size check.
    
    > HCI Event: Connect Request (0x04) plen 10
            Address: BB:22:33:44:55:99 (OUI BB-22-33)
            Class: 0x480104
              Major class: Computer (desktop, notebook, PDA, organizers)
              Minor class: Desktop workstation
              Capturing (Scanner, Microphone)
              Telephony (Cordless telephony, Modem, Headset)
            Link type: ACL (0x01)
    < HCI Command: Accept Connection Request (0x01|0x0009) plen 7
            Address: BB:22:33:44:55:99 (OUI BB-22-33)
            Role: Peripheral (0x01)
    > HCI Event: Command Status (0x0f) plen 4
          Accept Connection Request (0x01|0x0009) ncmd 2
            Status: Success (0x00)
    > HCI Event: Connect Complete (0x03) plen 11
            Status: Success (0x00)
            Handle: 1
            Address: BB:22:33:44:55:99 (OUI BB-22-33)
            Link type: ACL (0x01)
            Encryption: Disabled (0x00)
    ...
    
    > HCI Event: Encryption Change (0x08) plen 4
            Status: Success (0x00)
            Handle: 1 Address: BB:22:33:44:55:99 (OUI BB-22-33)
            Encryption: Enabled with E0 (0x01)
    < HCI Command: Read Encryption Key Size (0x05|0x0008) plen 2
            Handle: 1 Address: BB:22:33:44:55:99 (OUI BB-22-33)
    > HCI Event: Command Complete (0x0e) plen 7
          Read Encryption Key Size (0x05|0x0008) ncmd 2
            Status: Success (0x00)
            Handle: 1 Address: BB:22:33:44:55:99 (OUI BB-22-33)
            Key size: 6
    // We should check the enc key size
    ...
    
    > ACL Data RX: Handle 1 flags 0x02 dlen 12
          L2CAP: Connection Request (0x02) ident 3 len 4
            PSM: 25 (0x0019)
            Source CID: 64
    < ACL Data TX: Handle 1 flags 0x00 dlen 16
          L2CAP: Connection Response (0x03) ident 3 len 8
            Destination CID: 64
            Source CID: 64
            Result: Connection pending (0x0001)
            Status: Authorization pending (0x0002)
    > HCI Event: Number of Completed Packets (0x13) plen 5
            Num handles: 1
            Handle: 1 Address: BB:22:33:44:55:99 (OUI BB-22-33)
            Count: 1
            #35: len 16 (25 Kb/s)
            Latency: 5 msec (2-7 msec ~4 msec)
    < ACL Data TX: Handle 1 flags 0x00 dlen 16
          L2CAP: Connection Response (0x03) ident 3 len 8
            Destination CID: 64
            Source CID: 64
            Result: Connection successful (0x0000)
            Status: No further information available (0x0000)
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Alex Lu <alex_lu@realsil.com.cn>
    Signed-off-by: Max Chou <max.chou@realtek.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 39347d6450818a3f0f87087daa1338d851a546dc
Author: Xiao Yao <xiaoyao@rock-chips.com>
Date:   Tue Dec 12 00:27:18 2023 +0800

    Bluetooth: MGMT/SMP: Fix address type when using SMP over BREDR/LE
    
    commit 59b047bc98084f8af2c41483e4d68a5adf2fa7f7 upstream.
    
    If two Bluetooth devices both support BR/EDR and BLE, and also
    support Secure Connections, then they only need to pair once.
    The LTK generated during the LE pairing process may be converted
    into a BR/EDR link key for BR/EDR transport, and conversely, a
    link key generated during the BR/EDR SSP pairing process can be
    converted into an LTK for LE transport. Hence, the link type of
    the link key and LTK is not fixed, they can be either an LE LINK
    or an ACL LINK.
    
    Currently, in the mgmt_new_irk/ltk/crsk/link_key functions, the
    link type is fixed, which could lead to incorrect address types
    being reported to the application layer. Therefore, it is necessary
    to add link_type/addr_type to the smp_irk/ltk/crsk and link_key,
    to ensure the generation of the correct address type.
    
    SMP over BREDR:
    Before Fix:
    > ACL Data RX: Handle 11 flags 0x02 dlen 12
            BR/EDR SMP: Identity Address Information (0x09) len 7
            Address: F8:7D:76:F2:12:F3 (OUI F8-7D-76)
    @ MGMT Event: New Identity Resolving Key (0x0018) plen 30
            Random address: 00:00:00:00:00:00 (Non-Resolvable)
            LE Address: F8:7D:76:F2:12:F3 (OUI F8-7D-76)
    @ MGMT Event: New Long Term Key (0x000a) plen 37
            LE Address: F8:7D:76:F2:12:F3 (OUI F8-7D-76)
            Key type: Authenticated key from P-256 (0x03)
    
    After Fix:
    > ACL Data RX: Handle 11 flags 0x02 dlen 12
          BR/EDR SMP: Identity Address Information (0x09) len 7
            Address: F8:7D:76:F2:12:F3 (OUI F8-7D-76)
    @ MGMT Event: New Identity Resolving Key (0x0018) plen 30
            Random address: 00:00:00:00:00:00 (Non-Resolvable)
            BR/EDR Address: F8:7D:76:F2:12:F3 (OUI F8-7D-76)
    @ MGMT Event: New Long Term Key (0x000a) plen 37
            BR/EDR Address: F8:7D:76:F2:12:F3 (OUI F8-7D-76)
            Key type: Authenticated key from P-256 (0x03)
    
    SMP over LE:
    Before Fix:
    @ MGMT Event: New Identity Resolving Key (0x0018) plen 30
            Random address: 5F:5C:07:37:47:D5 (Resolvable)
            LE Address: F8:7D:76:F2:12:F3 (OUI F8-7D-76)
    @ MGMT Event: New Long Term Key (0x000a) plen 37
            LE Address: F8:7D:76:F2:12:F3 (OUI F8-7D-76)
            Key type: Authenticated key from P-256 (0x03)
    @ MGMT Event: New Link Key (0x0009) plen 26
            BR/EDR Address: F8:7D:76:F2:12:F3 (OUI F8-7D-76)
            Key type: Authenticated Combination key from P-256 (0x08)
    
    After Fix:
    @ MGMT Event: New Identity Resolving Key (0x0018) plen 30
            Random address: 5E:03:1C:00:38:21 (Resolvable)
            LE Address: F8:7D:76:F2:12:F3 (OUI F8-7D-76)
    @ MGMT Event: New Long Term Key (0x000a) plen 37
            LE Address: F8:7D:76:F2:12:F3 (OUI F8-7D-76)
            Key type: Authenticated key from P-256 (0x03)
    @ MGMT Event: New Link Key (0x0009) plen 26
            Store hint: Yes (0x01)
            LE Address: F8:7D:76:F2:12:F3 (OUI F8-7D-76)
            Key type: Authenticated Combination key from P-256 (0x08)
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Xiao Yao <xiaoyao@rock-chips.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e14a7ebafe4ee25614579162fd5a247f9dd0546c
Author: Frédéric Danis <frederic.danis@collabora.com>
Date:   Fri Dec 8 18:41:50 2023 +0100

    Bluetooth: L2CAP: Send reject on command corrupted request
    
    commit 78b99eb1faa7371bf9c534690f26a71b6996622d upstream.
    
    L2CAP/COS/CED/BI-02-C PTS test send a malformed L2CAP signaling packet
    with 2 commands in it (a connection request and an unknown command) and
    expect to get a connection response packet and a command reject packet.
    The second is currently not sent.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Frédéric Danis <frederic.danis@collabora.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 37f71e2c9f515834841826f4eb68ec33cfb2a1ff
Author: Hyunwoo Kim <v4bel@theori.io>
Date:   Sat Dec 9 05:55:18 2023 -0500

    Bluetooth: af_bluetooth: Fix Use-After-Free in bt_sock_recvmsg
    
    commit 2e07e8348ea454615e268222ae3fc240421be768 upstream.
    
    This can cause a race with bt_sock_ioctl() because
    bt_sock_recvmsg() gets the skb from sk->sk_receive_queue
    and then frees it without holding lock_sock.
    A use-after-free for a skb occurs with the following flow.
    ```
    bt_sock_recvmsg() -> skb_recv_datagram() -> skb_free_datagram()
    bt_sock_ioctl() -> skb_peek()
    ```
    Add lock_sock to bt_sock_recvmsg() to fix this issue.
    
    Cc: stable@vger.kernel.org
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Hyunwoo Kim <v4bel@theori.io>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 470896ecbc928bd6f0f2150f057094d28a7e626b
Author: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
Date:   Mon Nov 20 10:04:39 2023 -0500

    Bluetooth: hci_event: Fix not checking if HCI_OP_INQUIRY has been sent
    
    commit 99e67d46e5ff3c7c901af6009edec72d3d363be8 upstream.
    
    Before setting HCI_INQUIRY bit check if HCI_OP_INQUIRY was really sent
    otherwise the controller maybe be generating invalid events or, more
    likely, it is a result of fuzzing tools attempting to test the right
    behavior of the stack when unexpected events are generated.
    
    Cc: stable@vger.kernel.org
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=218151
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d36d945f94c35a4436cc9f31ca2dfc901cedf999
Author: Clément Villeret <clement.villeret@gmail.com>
Date:   Thu Dec 14 21:36:32 2023 +0100

    ALSA: hda/realtek: Add quirk for ASUS ROG GV302XA
    
    commit 02a460adfc4920d4da775fb59ab3e54036daef22 upstream.
    
    Asus ROG Flowx13 (GV302XA) seems require same patch as others asus products
    
    Signed-off-by: Clément Villeret <clement.villeret@gmail.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/0a27bf4b-3056-49ac-9651-ebd7f3e36328@gmail.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9599a5e34ca93ba9443bec1de0e0237f097d372e
Author: Reinhard Speyerer <rspmn@arcor.de>
Date:   Tue Dec 12 18:15:38 2023 +0100

    USB: serial: option: add Quectel RM500Q R13 firmware support
    
    commit 06f22cd6635bdae7d73566fca9879b2026a08e00 upstream.
    
    Add support for Quectel RM500Q R13 firmware which uses Prot=40 for the
    NMEA port:
    
    T:  Bus=02 Lev=01 Prnt=01 Port=01 Cnt=01 Dev#=  8 Spd=5000 MxCh= 0
    D:  Ver= 3.20 Cls=00(>ifc ) Sub=00 Prot=00 MxPS= 9 #Cfgs=  1
    P:  Vendor=2c7c ProdID=0800 Rev= 4.14
    S:  Manufacturer=Quectel
    S:  Product=RM500Q-AE
    S:  SerialNumber=xxxxxxxx
    C:* #Ifs= 5 Cfg#= 1 Atr=a0 MxPwr=896mA
    I:* If#= 0 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=30 Driver=option
    E:  Ad=81(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    E:  Ad=01(O) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    I:* If#= 1 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=40 Driver=option
    E:  Ad=83(I) Atr=03(Int.) MxPS=  10 Ivl=32ms
    E:  Ad=82(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    E:  Ad=02(O) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    I:* If#= 2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=85(I) Atr=03(Int.) MxPS=  10 Ivl=32ms
    E:  Ad=84(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    E:  Ad=03(O) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    I:* If#= 3 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=87(I) Atr=03(Int.) MxPS=  10 Ivl=32ms
    E:  Ad=86(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    E:  Ad=04(O) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    I:* If#= 4 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=ff Driver=qmi_wwan
    E:  Ad=88(I) Atr=03(Int.) MxPS=   8 Ivl=32ms
    E:  Ad=8e(I) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    E:  Ad=0f(O) Atr=02(Bulk) MxPS=1024 Ivl=0ms
    
    Signed-off-by: Reinhard Speyerer <rspmn@arcor.de>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a91fb450df5dd562c5f154f95128cce55822b87f
Author: Slark Xiao <slark_xiao@163.com>
Date:   Fri Dec 1 10:09:50 2023 +0800

    USB: serial: option: add Foxconn T99W265 with new baseline
    
    commit 13fde9ac23ca8c6d1ac13cc9eefe1f1ac3ee30a4 upstream.
    
    This ID was added based on latest SDX12 code base line, and we
    made some changes with previous 0489:e0db.
    
    Test evidence as below:
    T:  Bus=02 Lev=01 Prnt=01 Port=00 Cnt=01 Dev#=  3 Spd=5000 MxCh= 0
    D:  Ver= 3.20 Cls=ef(misc ) Sub=02 Prot=01 MxPS= 9 #Cfgs=  2
    P:  Vendor=0489 ProdID=e0da Rev=05.04
    S:  Manufacturer=Qualcomm
    S:  Product=Qualcomm Snapdragon X12
    S:  SerialNumber=2bda65fb
    C:  #Ifs= 6 Cfg#= 2 Atr=a0 MxPwr=896mA
    I:  If#=0x0 Alt= 0 #EPs= 1 Cls=02(commc) Sub=0e Prot=00 Driver=cdc_mbim
    I:  If#=0x1 Alt= 1 #EPs= 2 Cls=0a(data ) Sub=00 Prot=02 Driver=cdc_mbim
    I:  If#=0x2 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=ff Prot=40 Driver=option
    I:  If#=0x3 Alt= 0 #EPs= 1 Cls=ff(vend.) Sub=ff Prot=ff Driver=(none)
    I:  If#=0x4 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=ff Prot=30 Driver=option
    I:  If#=0x5 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=42 Prot=01 Driver=(none)
    
    0&1: MBIM, 2: Modem, 3:GNSS, 4:Diag, 5:ADB
    
    Signed-off-by: Slark Xiao <slark_xiao@163.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 73b6b6ab03ae2b820f88ccd6fced2da67c457ae7
Author: Alper Ak <alperyasinak1@gmail.com>
Date:   Tue Aug 8 13:51:58 2023 +0300

    USB: serial: option: add Quectel EG912Y module support
    
    commit 6d79d9434c69bb8ffa8a631050eb0ad6b83d3e90 upstream.
    
    Add Quectel EG912Y "DIAG, AT, MODEM"
    
    0x6001: ECM / RNDIS + DIAG + AT + MODEM
    
    T:  Bus=01 Lev=02 Prnt=02 Port=00 Cnt=01 Dev#=  3 Spd=480  MxCh= 0
    D:  Ver= 2.00 Cls=ef(misc ) Sub=02 Prot=01 MxPS=64 #Cfgs=  1
    P:  Vendor=2c7c ProdID=6001 Rev= 3.18
    S:  Manufacturer=Android
    S:  Product=Android
    S:  SerialNumber=0000
    C:* #Ifs= 5 Cfg#= 1 Atr=e0 MxPwr=500mA
    A:  FirstIf#= 0 IfCount= 2 Cls=02(comm.) Sub=06 Prot=00
    I:* If#= 0 Alt= 0 #EPs= 1 Cls=02(comm.) Sub=06 Prot=00 Driver=cdc_ether
    E:  Ad=87(I) Atr=03(Int.) MxPS=  64 Ivl=4096ms
    I:  If#= 1 Alt= 0 #EPs= 0 Cls=0a(data ) Sub=00 Prot=00 Driver=cdc_ether
    I:* If#= 1 Alt= 1 #EPs= 2 Cls=0a(data ) Sub=00 Prot=00 Driver=cdc_ether
    E:  Ad=83(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=0c(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 2 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=82(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=0b(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 3 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=89(I) Atr=03(Int.) MxPS=  64 Ivl=4096ms
    E:  Ad=86(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=0f(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 4 Alt= 0 #EPs= 3 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=88(I) Atr=03(Int.) MxPS=  64 Ivl=4096ms
    E:  Ad=81(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=0a(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    
    Signed-off-by: Alper Ak <alperyasinak1@gmail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9b968a708678278a9c7bd52bab831e647d2ab5d1
Author: Mark Glover <mark.glover@actisense.com>
Date:   Wed Dec 20 13:57:40 2023 +0000

    USB: serial: ftdi_sio: update Actisense PIDs constant names
    
    commit 513d88a88e0203188a38f4647dd08170aebd85df upstream.
    
    Update the constant names for unused USB PIDs (product identifiers) to
    reflect the new products now using the PIDs.
    
    Signed-off-by: Mark Glover <mark.glover@actisense.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit db57ef0dd4c22b60375b952e6ad97885a9837663
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Thu Dec 14 09:08:16 2023 +0100

    wifi: cfg80211: fix certs build to not depend on file order
    
    commit 3c2a8ebe3fe66a5f77d4c164a0bea8e2ff37b455 upstream.
    
    The file for the new certificate (Chen-Yu Tsai's) didn't
    end with a comma, so depending on the file order in the
    build rule, we'd end up with invalid C when concatenating
    the (now two) certificates. Fix that.
    
    Cc: stable@vger.kernel.org
    Reported-by: Biju Das <biju.das.jz@bp.renesas.com>
    Reported-by: Naresh Kamboju <naresh.kamboju@linaro.org>
    Fixes: fb768d3b13ff ("wifi: cfg80211: Add my certificate")
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ec350809cd98ba01878e1b43831250207d5ce301
Author: Chen-Yu Tsai <wens@kernel.org>
Date:   Thu Dec 7 21:20:50 2023 +0800

    wifi: cfg80211: Add my certificate
    
    commit fb768d3b13ffa325b7e84480d488ac799c9d2cd7 upstream.
    
    As announced [1][2], I have taken over maintainership of the
    wireless-regdb project.
    
    Add my certificate so that newer releases are valid to the kernel.
    Seth's certificate should be kept around for awhile, at least until
    a few new releases by me happen.
    
    This should also be applied to stable trees so that stable kernels
    can utilize newly released database binaries.
    
    [1] https://lore.kernel.org/linux-wireless/CAGb2v657baNMPKU3QADijx7hZa=GUcSv2LEDdn6N=QQaFX8r-g@mail.gmail.com/
    [2] https://lore.kernel.org/linux-wireless/ZWmRR5ul7EDfxCan@wens.tw/
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Chen-Yu Tsai <wens@kernel.org>
    Acked-by: Seth Forshee <sforshee@kernel.org>
    Link: https://msgid.link/ZXHGsqs34qZyzZng@wens.tw
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 228d9960ae819cdd9e57eecabb424c2350d749a8
Author: Tasos Sahanidis <tasos@tasossah.com>
Date:   Thu Dec 7 15:44:41 2023 +0200

    usb-storage: Add quirk for incorrect WP on Kingston DT Ultimate 3.0 G3
    
    commit 772685c14743ad565bb271041ad3c262298cd6fc upstream.
    
    This flash drive reports write protect during the first mode sense.
    
    In the past this was not an issue as the kernel called revalidate twice,
    thus asking the device for its write protect status twice, with write
    protect being disabled in the second mode sense.
    
    However, since commit 1e029397d12f ("scsi: sd: Reorganize DIF/DIX code to
    avoid calling revalidate twice") that is no longer the case, thus the
    device shows up read only.
    
    [490891.289495] sd 12:0:0:0: [sdl] Write Protect is on
    [490891.289497] sd 12:0:0:0: [sdl] Mode Sense: 2b 00 80 08
    
    This does not appear to be a timing issue, as enabling the usbcore quirk
    USB_QUIRK_DELAY_INIT has no effect on write protect.
    
    Fixes: 1e029397d12f ("scsi: sd: Reorganize DIF/DIX code to avoid calling revalidate twice")
    Cc: stable <stable@kernel.org>
    Signed-off-by: Tasos Sahanidis <tasos@tasossah.com>
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Reviewed-by: Martin K. Petersen <martin.petersen@oracle.com>
    Link: https://lore.kernel.org/r/20231207134441.298131-1-tasos@tasossah.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 82f913724bc99d0acfed5ddf0c48e74978252e1a
Author: Jeremie Knuesel <knuesel@gmail.com>
Date:   Sun Dec 17 12:22:43 2023 +0100

    ALSA: usb-audio: Increase delay in MOTU M quirk
    
    commit 48d6b91798a6694fdd6edb62799754b9d3fe0792 upstream.
    
    Increase the quirk delay from 2 seconds to 4 seconds. This reflects a
    change in the Windows driver in which the delay was increased to about
    3.7 seconds. The larger delay fixes an issue where the device fails to
    work unless it was powered up early during boot.
    
    Also clarify in the quirk comment that the quirk is only applied to
    older devices (USB ID 07fd:0008).
    
    Signed-off-by: Jeremie Knuesel <knuesel@gmail.com>
    Suggested-by: Alexander Tsoy <alexander@tsoy.me>
    Cc: <stable@vger.kernel.org>
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=211975
    Link: https://lore.kernel.org/r/20231217112243.33409-1-knuesel@gmail.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 01bc94b581921a3a104d346bbb02e9f459d3a939
Author: David Lechner <dlechner@baylibre.com>
Date:   Tue Oct 31 16:05:19 2023 -0500

    iio: triggered-buffer: prevent possible freeing of wrong buffer
    
    commit bce61476dc82f114e24e9c2e11fb064781ec563c upstream.
    
    Commit ee708e6baacd ("iio: buffer: introduce support for attaching more
    IIO buffers") introduced support for multiple buffers per indio_dev but
    left indio_dev->buffer for a few legacy use cases.
    
    In the case of the triggered buffer, iio_triggered_buffer_cleanup()
    still assumes that indio_dev->buffer points to the buffer allocated by
    iio_triggered_buffer_setup_ext(). However, since
    iio_triggered_buffer_setup_ext() now calls iio_device_attach_buffer()
    to attach the buffer, indio_dev->buffer will only point to the buffer
    allocated by iio_device_attach_buffer() if it the first buffer attached.
    
    This adds a check to make sure that no other buffer has been attached
    yet to ensure that indio_dev->buffer will be assigned when
    iio_device_attach_buffer() is called.
    
    As per discussion in the review thread, we may want to deal with multiple
    triggers per device, but this is a fix for the issue in the meantime and
    any such support would be unlikely to be suitable for a backport.
    
    Fixes: ee708e6baacd ("iio: buffer: introduce support for attaching more IIO buffers")
    Signed-off-by: David Lechner <dlechner@baylibre.com>
    Acked-by: Nuno Sa <nuno.sa@analog.com>
    Link: https://lore.kernel.org/r/20231031210521.1661552-1-dlechner@baylibre.com
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c508a99fbc2138052b2f479959455a60886f6c2f
Author: Wadim Egorov <w.egorov@phytec.de>
Date:   Mon Sep 25 15:44:27 2023 +0200

    iio: adc: ti_am335x_adc: Fix return value check of tiadc_request_dma()
    
    commit 60576e84c187043cef11f11d015249e71151d35a upstream.
    
    Fix wrong handling of a DMA request where the probing only failed
    if -EPROPE_DEFER was returned. Instead, let us fail if a non -ENODEV
    value is returned. This makes DMAs explicitly optional. Even if the
    DMA request is unsuccessfully, the ADC can still work properly.
    We do also handle the defer probe case by making use of dev_err_probe().
    
    Fixes: f438b9da75eb ("drivers: iio: ti_am335x_adc: add dma support")
    Signed-off-by: Wadim Egorov <w.egorov@phytec.de>
    Reviewed-by: Bhavya Kapoor <b-kapoor@ti.com>
    Link: https://lore.kernel.org/r/20230925134427.214556-1-w.egorov@phytec.de
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1b670b0eeefa3fe029c5d9c1268b2a70136552fc
Author: Javier Carrasco <javier.carrasco.cruz@gmail.com>
Date:   Thu Oct 26 17:44:49 2023 +0200

    iio: common: ms_sensors: ms_sensors_i2c: fix humidity conversion time table
    
    commit 54cf39ec16335dadbe1ba008d8e5e98dae3e26f8 upstream.
    
    The HTU21 offers 4 sampling frequencies: 20, 40, 70 and 120, which are
    associated to an index that is used to select the right measurement
    resolution and its corresponding measurement time. The current
    implementation selects the measurement resolution and the temperature
    measurement time properly, but it does not select the right humidity
    measurement time in all cases.
    
    In summary, the 40 and 70 humidity measurement times are swapped.
    
    The reason for that is probably the unusual coding for the measurement
    resolution. According to the datasheet, the bits [7,0] of the "user
    register" are used as follows to select the bit resolution:
    
    --------------------------------------------------
    | Bit 7 | Bit 0 | RH | Temp | Trh (us) | Tt (us) |
    --------------------------------------------------
    |   0   |   0   | 12 |  14  |  16000   |  50000  |
    --------------------------------------------------
    |   0   |   1   | 8  |  12  |  3000    |  13000  |
    --------------------------------------------------
    |   1   |   0   | 10 |  13  |  5000    |  25000  |
    --------------------------------------------------
    |   1   |   1   | 11 |  11  |  8000    |  7000   |
    --------------------------------------------------
    *This table is available in the official datasheet, page 13/21. I have
    just appended the times provided in the humidity/temperature tables,
    pages 3/21, 5/21. Note that always a pair of resolutions is selected.
    
    The sampling frequencies [20, 40, 70, 120] are assigned to a linear
    index [0..3] which is then coded as follows [1]:
    
    Index    [7,0]
    --------------
    idx 0     0,0
    idx 1     1,0
    idx 2     0,1
    idx 3     1,1
    
    That is done that way because the temperature measurements are being
    used as the reference for the sampling frequency (the frequencies and
    the temperature measurement times are correlated), so increasing the
    index always reduces the temperature measurement time and its
    resolution. Therefore, the temperature measurement time array is as
    simple as [50000, 25000, 13000, 7000]
    
    On the other hand, the humidity resolution cannot follow the same
    pattern because of the way it is coded in the "user register", where
    both resolutions are selected at the same time. The humidity measurement
    time array is the following: [16000, 3000, 5000, 8000], which defines
    the following assignments:
    
    Index    [7,0]    Trh
    -----------------------
    idx 0     0,0     16000  -> right, [0,0] selects 12 bits (Trh = 16000)
    idx 1     1,0     3000   -> wrong! [1,0] selects 10 bits (Trh = 5000)
    idx 2     0,1     5000   -> wrong! [0,1] selects 8 bits (Trh = 3000)
    idx 3     1,1     8000   -> right, [1,1] selects 11 bits (Trh = 8000)
    
    The times have been ordered as if idx = 1 -> [0,1] and idx = 2 -> [1,0],
    which is not the case for the reason explained above.
    
    So a simple modification is required to obtain the right humidity
    measurement time array, swapping the values in the positions 1 and 2.
    
    The right table should be the following: [16000, 5000, 3000, 8000]
    
    Fix the humidity measurement time array with the right idex/value
    coding.
    
    [1] The actual code that makes this coding and assigns it to the current
    value of the "user register" is the following:
    config_reg &= 0x7E;
    config_reg |= ((i & 1) << 7) + ((i & 2) >> 1);
    
    Fixes: d574a87cc311 ("Add meas-spec sensors common part")
    Signed-off-by: Javier Carrasco <javier.carrasco.cruz@gmail.com>
    Link: https://lore.kernel.org/r/20231026-topic-htu21_conversion_time-v1-1-bd257dc44209@gmail.com
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1fe4c93fc77b841bc06da32b9231235f7ff8a97d
Author: Wei Yongjun <weiyongjun1@huawei.com>
Date:   Mon Nov 14 11:06:26 2022 +0000

    scsi: bnx2fc: Fix skb double free in bnx2fc_rcv()
    
    [ Upstream commit 08c94d80b2da481652fb633e79cbc41e9e326a91 ]
    
    skb_share_check() already drops the reference to the skb when returning
    NULL. Using kfree_skb() in the error handling path leads to an skb double
    free.
    
    Fix this by removing the variable tmp_skb, and return directly when
    skb_share_check() returns NULL.
    
    Fixes: 01a4cc4d0cd6 ("bnx2fc: do not add shared skbs to the fcoe_rx_list")
    Signed-off-by: Wei Yongjun <weiyongjun1@huawei.com>
    Link: https://lore.kernel.org/r/20221114110626.526643-1-weiyongjun@huaweicloud.com
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 66ccf5f7437a79a3a8c50caea14cbe80be98ee9f
Author: Haoran Liu <liuhaoran14@163.com>
Date:   Sun Dec 3 19:00:23 2023 +0000

    Input: ipaq-micro-keys - add error handling for devm_kmemdup
    
    [ Upstream commit 59b6a747e2d39227ac2325c5e29d6ab3bb070c2a ]
    
    Check the return value of i2c_add_adapter. Static analysis revealed that
    the function did not properly handle potential failures of
    i2c_add_adapter, which could lead to partial initialization of the I2C
    adapter and unstable operation.
    
    Signed-off-by: Haoran Liu <liuhaoran14@163.com>
    Link: https://lore.kernel.org/r/20231203164653.38983-1-liuhaoran14@163.com
    Fixes: d7535ffa427b ("Input: driver for microcontroller keys on the iPaq h3xxx")
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3637f6bdfe2ccd53c493836b6e43c9a73e4513b3
Author: Konrad Dybcio <konrad.dybcio@linaro.org>
Date:   Thu Nov 30 15:04:45 2023 +0100

    interconnect: qcom: sm8250: Enable sync_state
    
    [ Upstream commit bfc7db1cb94ad664546d70212699f8cc6c539e8c ]
    
    Add the generic icc sync_state callback to ensure interconnect votes
    are taken into account, instead of being pegged at maximum values.
    
    Fixes: b95b668eaaa2 ("interconnect: qcom: icc-rpmh: Add BCMs to commit list in pre_aggregate")
    Signed-off-by: Konrad Dybcio <konrad.dybcio@linaro.org>
    Link: https://lore.kernel.org/r/20231130-topic-8250icc_syncstate-v1-1-7ce78ba6e04c@linaro.org
    Signed-off-by: Georgi Djakov <djakov@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 90aa62722d3e23170942aa8c1c34081e8aa75d18
Author: Su Hui <suhui@nfschina.com>
Date:   Mon Oct 30 10:02:19 2023 +0800

    iio: imu: inv_mpu6050: fix an error code problem in inv_mpu6050_read_raw
    
    [ Upstream commit c3df0e29fb7788c4b3ddf37d5ed87dda2b822943 ]
    
    inv_mpu6050_sensor_show() can return -EINVAL or IIO_VAL_INT. Return the
    true value rather than only return IIO_VAL_INT.
    
    Fixes: d5098447147c ("iio: imu: mpu6050: add calibration offset support")
    Signed-off-by: Su Hui <suhui@nfschina.com>
    Link: https://lore.kernel.org/r/20231030020218.65728-1-suhui@nfschina.com
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 50d60bfc96817891743e12d577b6a3776fe409e7
Author: Mike Tipton <quic_mdtipton@quicinc.com>
Date:   Wed Oct 25 07:58:29 2023 -0700

    interconnect: Treat xlate() returning NULL node as an error
    
    [ Upstream commit ad2ab1297d0c80899125a842bb7a078abfe1e6ce ]
    
    Currently, if provider->xlate() or provider->xlate_extended()
    "successfully" return a NULL node, then of_icc_get_from_provider() won't
    consider that an error and will successfully return the NULL node. This
    bypasses error handling in of_icc_get_by_index() and leads to NULL
    dereferences in path_find().
    
    This could be avoided by ensuring provider callbacks always return an
    error for NULL nodes, but it's better to explicitly protect against this
    in the common framework.
    
    Fixes: 87e3031b6fbd ("interconnect: Allow endpoints translation via DT")
    Signed-off-by: Mike Tipton <quic_mdtipton@quicinc.com>
    Link: https://lore.kernel.org/r/20231025145829.11603-1-quic_mdtipton@quicinc.com
    Signed-off-by: Georgi Djakov <djakov@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 900c1b3c62f920a50352f5dff6995bca5836b0c7
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Mon Dec 4 22:24:43 2023 +0200

    drm/i915: Fix ADL+ tiled plane stride when the POT stride is smaller than the original
    
    [ Upstream commit 324b70e997aab0a7deab8cb90711faccda4e98c8 ]
    
    plane_view_scanout_stride() currently assumes that we had to pad the
    mapping stride with dummy pages in order to align it. But that is not
    the case if the original fb stride exceeds the aligned stride used
    to populate the remapped view, which is calculated from the user
    specified framebuffer width rather than the user specified framebuffer
    stride.
    
    Ignore the original fb stride in this case and just stick to the POT
    aligned stride. Getting this wrong will cause the plane to fetch the
    wrong data, and can lead to fault errors if the page tables at the
    bogus location aren't even populated.
    
    TODO: figure out if this is OK for CCS, or if we should instead increase
    the width of the view to cover the entire user specified fb stride
    instead...
    
    Cc: Imre Deak <imre.deak@intel.com>
    Cc: Juha-Pekka Heikkila <juhapekka.heikkila@gmail.com>
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20231204202443.31247-1-ville.syrjala@linux.intel.com
    Reviewed-by: Imre Deak <imre.deak@intel.com>
    Reviewed-by: Juha-Pekka Heikkila <juhapekka.heikkila@gmail.com>
    (cherry picked from commit 01a39f1c4f1220a4e6a25729fae87ff5794cbc52)
    Cc: stable@vger.kernel.org
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit de4349bdf9f3ba46d0e5e298924432957328ddfd
Author: Clint Taylor <clinton.a.taylor@intel.com>
Date:   Fri May 5 16:40:05 2023 +0200

    drm/i915/mtl: Add MTL for remapping CCS FBs
    
    [ Upstream commit 0da6bfe857ea9399498876cbe6ef428637b6e475 ]
    
    Add support for remapping CCS FBs on MTL to remove the restriction
    of the power-of-two sized stride and the 2MB surface offset alignment
    for these FBs.
    
    Signed-off-by: Clint Taylor <clinton.a.taylor@intel.com>
    Signed-off-by: Juha-Pekka Heikkila <juhapekka.heikkila@gmail.com>
    Reviewed-by: Radhakrishna Sripada <radhakrishna.sripada@intel.com>
    Signed-off-by: Nirmoy Das <nirmoy.das@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20230505144005.23480-2-nirmoy.das@intel.com
    Stable-dep-of: 324b70e997aa ("drm/i915: Fix ADL+ tiled plane stride when the POT stride is smaller than the original")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 52c1a67dd3039ba254484cb7740d9079663a80bd
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Mon Mar 20 11:05:18 2023 +0200

    drm/i915/dpt: Only do the POT stride remap when using DPT
    
    [ Upstream commit ef5cb493a9acd7d97870d6e542020980ae3f3483 ]
    
    If we want to test with DPT disabled on ADL the POT stride remap
    stuff needs to be disabled. Make it depend on actual DPT usage
    instead of just assuming it based on the modifier.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20230320090522.9909-3-ville.syrjala@linux.intel.com
    Reviewed-by: Juha-Pekka Heikkila <juhapekka.heikkila@gmail.com>
    Stable-dep-of: 324b70e997aa ("drm/i915: Fix ADL+ tiled plane stride when the POT stride is smaller than the original")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7afe8109456d94d6cc9374da869b2d64852b8535
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Thu Dec 7 21:34:34 2023 +0200

    drm/i915: Fix intel_atomic_setup_scalers() plane_state handling
    
    [ Upstream commit c3070f080f9ba18dea92eaa21730f7ab85b5c8f4 ]
    
    Since the plane_state variable is declared outside the scaler_users
    loop in intel_atomic_setup_scalers(), and it's never reset back to
    NULL inside the loop we may end up calling intel_atomic_setup_scaler()
    with a non-NULL plane state for the pipe scaling case. That is bad
    because intel_atomic_setup_scaler() determines whether we are doing
    plane scaling or pipe scaling based on plane_state!=NULL. The end
    result is that we may miscalculate the scaler mode for pipe scaling.
    
    The hardware becomes somewhat upset if we end up in this situation
    when scanning out a planar format on a SDR plane. We end up
    programming the pipe scaler into planar mode as well, and the
    result is a screenfull of garbage.
    
    Fix the situation by making sure we pass the correct plane_state==NULL
    when calculating the scaler mode for pipe scaling.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20231207193441.20206-2-ville.syrjala@linux.intel.com
    Reviewed-by: Jani Nikula <jani.nikula@intel.com>
    (cherry picked from commit e81144106e21271c619f0c722a09e27ccb8c043d)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b097184f80269f384e9f5556e6b3592441e955f4
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Tue Apr 18 20:55:16 2023 +0300

    drm/i915: Relocate intel_atomic_setup_scalers()
    
    [ Upstream commit 8976b18249407df8bf6ea18ecae0640a15341a50 ]
    
    Move intel_atomic_setup_scalers() next to the other scaler
    code in skl_scaler.c.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20230418175528.13117-4-ville.syrjala@linux.intel.com
    Reviewed-by: Jani Nikula <jani.nikula@intel.com>
    Stable-dep-of: c3070f080f9b ("drm/i915: Fix intel_atomic_setup_scalers() plane_state handling")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 99767368b7fad6bee30ca89ef96877d86e3181a1
Author: Luca Coelho <luciano.coelho@intel.com>
Date:   Fri Dec 23 15:05:08 2022 +0200

    drm/i915/mtl: limit second scaler vertical scaling in ver >= 14
    
    [ Upstream commit 8d4312e2b228ba7a5ac79154458098274ec61e9b ]
    
    In newer hardware versions (i.e. display version >= 14), the second
    scaler doesn't support vertical scaling.
    
    The current implementation of the scaling limits is simplified and
    only occurs when the planes are created, so we don't know which scaler
    is being used.
    
    In order to handle separate scaling limits for horizontal and vertical
    scaling, and different limits per scaler, split the checks in two
    phases.  We first do a simple check during plane creation and use the
    best-case scenario (because we don't know the scaler that may be used
    at a later point) and then do a more specific check when the scalers
    are actually being set up.
    
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>
    Reviewed-by: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
    Signed-off-by: Radhakrishna Sripada <radhakrishna.sripada@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20221223130509.43245-2-luciano.coelho@intel.com
    Stable-dep-of: c3070f080f9b ("drm/i915: Fix intel_atomic_setup_scalers() plane_state handling")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 387e8077593e669a899093714fd24b6703cdc0d5
Author: Maurizio Lombardi <mlombard@redhat.com>
Date:   Tue Dec 19 17:48:23 2023 +0100

    nvme-pci: fix sleeping function called from interrupt context
    
    [ Upstream commit f6fe0b2d35457c10ec37acc209d19726bdc16dbd ]
    
    the nvme_handle_cqe() interrupt handler calls nvme_complete_async_event()
    but the latter may call nvme_auth_stop() which is a blocking function.
    Sleeping functions can't be called in interrupt context
    
     BUG: sleeping function called from invalid context
     in_atomic(): 1, irqs_disabled(): 1, non_block: 0, pid: 0, name: swapper/15
      Call Trace:
         <IRQ>
          __cancel_work_timer+0x31e/0x460
          ? nvme_change_ctrl_state+0xcf/0x3c0 [nvme_core]
          ? nvme_change_ctrl_state+0xcf/0x3c0 [nvme_core]
          nvme_complete_async_event+0x365/0x480 [nvme_core]
          nvme_poll_cq+0x262/0xe50 [nvme]
    
    Fix the bug by moving nvme_auth_stop() to fw_act_work
    (executed by the nvme_wq workqueue)
    
    Fixes: f50fff73d620 ("nvme: implement In-Band authentication")
    Signed-off-by: Maurizio Lombardi <mlombard@redhat.com>
    Reviewed-by: Jens Axboe <axboe@kernel.dk>
    Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
    Signed-off-by: Keith Busch <kbusch@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b506833ee8872455e82f561e50386109a5911df4
Author: Kent Gibson <warthog618@gmail.com>
Date:   Thu Dec 21 09:20:36 2023 +0800

    gpiolib: cdev: add gpio_device locking wrapper around gpio_ioctl()
    
    [ Upstream commit 1d656bd259edb89dc1d9938ec5c5389867088546 ]
    
    While the GPIO cdev gpio_ioctl() call is in progress, the kernel can
    call gpiochip_remove() which will set gdev->chip to NULL, after which
    any subsequent access will cause a crash.
    
    gpio_ioctl() was overlooked by the previous fix to protect syscalls
    (bdbbae241a04), so add protection for that.
    
    Fixes: bdbbae241a04 ("gpiolib: protect the GPIO device against being dropped while in use by user-space")
    Fixes: d7c51b47ac11 ("gpio: userspace ABI for reading/writing GPIO lines")
    Fixes: 3c0d9c635ae2 ("gpiolib: cdev: support GPIO_V2_GET_LINE_IOCTL and GPIO_V2_LINE_GET_VALUES_IOCTL")
    Fixes: aad955842d1c ("gpiolib: cdev: support GPIO_V2_GET_LINEINFO_IOCTL and GPIO_V2_GET_LINEINFO_WATCH_IOCTL")
    Signed-off-by: Kent Gibson <warthog618@gmail.com>
    Signed-off-by: Bartosz Golaszewski <bartosz.golaszewski@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6eb51df9e7397fb5ff39dd148bc70dddb46b75fd
Author: Alexis Lothoré <alexis.lothore@bootlin.com>
Date:   Fri Dec 15 22:34:24 2023 +0100

    pinctrl: at91-pio4: use dedicated lock class for IRQ
    
    [ Upstream commit 14694179e561b5f2f7e56a0f590e2cb49a9cc7ab ]
    
    Trying to suspend to RAM on SAMA5D27 EVK leads to the following lockdep
    warning:
    
     ============================================
     WARNING: possible recursive locking detected
     6.7.0-rc5-wt+ #532 Not tainted
     --------------------------------------------
     sh/92 is trying to acquire lock:
     c3cf306c (&irq_desc_lock_class){-.-.}-{2:2}, at: __irq_get_desc_lock+0xe8/0x100
    
     but task is already holding lock:
     c3d7c46c (&irq_desc_lock_class){-.-.}-{2:2}, at: __irq_get_desc_lock+0xe8/0x100
    
     other info that might help us debug this:
      Possible unsafe locking scenario:
    
            CPU0
            ----
       lock(&irq_desc_lock_class);
       lock(&irq_desc_lock_class);
    
      *** DEADLOCK ***
    
      May be due to missing lock nesting notation
    
     6 locks held by sh/92:
      #0: c3aa0258 (sb_writers#6){.+.+}-{0:0}, at: ksys_write+0xd8/0x178
      #1: c4c2df44 (&of->mutex){+.+.}-{3:3}, at: kernfs_fop_write_iter+0x138/0x284
      #2: c32684a0 (kn->active){.+.+}-{0:0}, at: kernfs_fop_write_iter+0x148/0x284
      #3: c232b6d4 (system_transition_mutex){+.+.}-{3:3}, at: pm_suspend+0x13c/0x4e8
      #4: c387b088 (&dev->mutex){....}-{3:3}, at: __device_suspend+0x1e8/0x91c
      #5: c3d7c46c (&irq_desc_lock_class){-.-.}-{2:2}, at: __irq_get_desc_lock+0xe8/0x100
    
     stack backtrace:
     CPU: 0 PID: 92 Comm: sh Not tainted 6.7.0-rc5-wt+ #532
     Hardware name: Atmel SAMA5
      unwind_backtrace from show_stack+0x18/0x1c
      show_stack from dump_stack_lvl+0x34/0x48
      dump_stack_lvl from __lock_acquire+0x19ec/0x3a0c
      __lock_acquire from lock_acquire.part.0+0x124/0x2d0
      lock_acquire.part.0 from _raw_spin_lock_irqsave+0x5c/0x78
      _raw_spin_lock_irqsave from __irq_get_desc_lock+0xe8/0x100
      __irq_get_desc_lock from irq_set_irq_wake+0xa8/0x204
      irq_set_irq_wake from atmel_gpio_irq_set_wake+0x58/0xb4
      atmel_gpio_irq_set_wake from irq_set_irq_wake+0x100/0x204
      irq_set_irq_wake from gpio_keys_suspend+0xec/0x2b8
      gpio_keys_suspend from dpm_run_callback+0xe4/0x248
      dpm_run_callback from __device_suspend+0x234/0x91c
      __device_suspend from dpm_suspend+0x224/0x43c
      dpm_suspend from dpm_suspend_start+0x9c/0xa8
      dpm_suspend_start from suspend_devices_and_enter+0x1e0/0xa84
      suspend_devices_and_enter from pm_suspend+0x460/0x4e8
      pm_suspend from state_store+0x78/0xe4
      state_store from kernfs_fop_write_iter+0x1a0/0x284
      kernfs_fop_write_iter from vfs_write+0x38c/0x6f4
      vfs_write from ksys_write+0xd8/0x178
      ksys_write from ret_fast_syscall+0x0/0x1c
     Exception stack(0xc52b3fa8 to 0xc52b3ff0)
     3fa0:                   00000004 005a0ae8 00000001 005a0ae8 00000004 00000001
     3fc0: 00000004 005a0ae8 00000001 00000004 00000004 b6c616c0 00000020 0059d190
     3fe0: 00000004 b6c61678 aec5a041 aebf1a26
    
    This warning is raised because pinctrl-at91-pio4 uses chained IRQ. Whenever
    a wake up source configures an IRQ through irq_set_irq_wake, it will
    lock the corresponding IRQ desc, and then call irq_set_irq_wake on "parent"
    IRQ which will do the same on its own IRQ desc, but since those two locks
    share the same class, lockdep reports this as an issue.
    
    Fix lockdep false positive by setting a different class for parent and
    children IRQ
    
    Fixes: 776180848b57 ("pinctrl: introduce driver for Atmel PIO4 controller")
    Signed-off-by: Alexis Lothoré <alexis.lothore@bootlin.com>
    Link: https://lore.kernel.org/r/20231215-lockdep_warning-v1-1-8137b2510ed5@bootlin.com
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 903bb0c7b81f2a7c99c92a87a1bf049557d063aa
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Dec 4 09:47:01 2023 +0100

    x86/xen: add CPU dependencies for 32-bit build
    
    [ Upstream commit 93cd0597649844a0fe7989839a3202735fb3ae67 ]
    
    Xen only supports modern CPUs even when running a 32-bit kernel, and it now
    requires a kernel built for a 64 byte (or larger) cache line:
    
    In file included from <command-line>:
    In function 'xen_vcpu_setup',
        inlined from 'xen_vcpu_setup_restore' at arch/x86/xen/enlighten.c:111:3,
        inlined from 'xen_vcpu_restore' at arch/x86/xen/enlighten.c:141:3:
    include/linux/compiler_types.h:435:45: error: call to '__compiletime_assert_287' declared with attribute error: BUILD_BUG_ON failed: sizeof(*vcpup) > SMP_CACHE_BYTES
    arch/x86/xen/enlighten.c:166:9: note: in expansion of macro 'BUILD_BUG_ON'
      166 |         BUILD_BUG_ON(sizeof(*vcpup) > SMP_CACHE_BYTES);
          |         ^~~~~~~~~~~~
    
    Enforce the dependency with a whitelist of CPU configurations. In normal
    distro kernels, CONFIG_X86_GENERIC is enabled, and this works fine. When this
    is not set, still allow Xen to be built on kernels that target a 64-bit
    capable CPU.
    
    Fixes: db2832309a82 ("x86/xen: fix percpu vcpu_info allocation")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Reviewed-by: Juergen Gross <jgross@suse.com>
    Tested-by: Alyssa Ross <hi@alyssa.is>
    Link: https://lore.kernel.org/r/20231204084722.3789473-1-arnd@kernel.org
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2550d96aa2483999afa858b66717d5da93846f1f
Author: Quan Nguyen <quan@os.amperecomputing.com>
Date:   Mon Dec 11 17:22:16 2023 +0700

    i2c: aspeed: Handle the coalesced stop conditions with the start conditions.
    
    [ Upstream commit b4cc1cbba5195a4dd497cf2f8f09e7807977d543 ]
    
    Some masters may drive the transfers with low enough latency between
    the nak/stop phase of the current command and the start/address phase
    of the following command that the interrupts are coalesced by the
    time we process them.
    Handle the stop conditions before processing SLAVE_MATCH to fix the
    complaints that sometimes occur below.
    
    "aspeed-i2c-bus 1e78a040.i2c-bus: irq handled != irq. Expected
    0x00000086, but was 0x00000084"
    
    Fixes: f9eb91350bb2 ("i2c: aspeed: added slave support for Aspeed I2C driver")
    Signed-off-by: Quan Nguyen <quan@os.amperecomputing.com>
    Reviewed-by: Andrew Jeffery <andrew@codeconstruct.com.au>
    Reviewed-by: Andi Shyti <andi.shyti@kernel.org>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5c11f637999cb95083260e3f84b63db79c03a9cb
Author: Shengjiu Wang <shengjiu.wang@nxp.com>
Date:   Tue Dec 19 10:30:57 2023 +0800

    ASoC: fsl_sai: Fix channel swap issue on i.MX8MP
    
    [ Upstream commit 8f0f01647550daf9cd8752c1656dcb0136d79ce1 ]
    
    When flag mclk_with_tere and mclk_direction_output enabled,
    The SAI transmitter or receiver will be enabled in very early
    stage, that if FSL_SAI_xMR is set by previous case,
    for example previous case is one channel, current case is
    two channels, then current case started with wrong xMR in
    the beginning, then channel swap happen.
    
    The patch is to clear xMR in hw_free() to avoid such
    channel swap issue.
    
    Fixes: 3e4a82612998 ("ASoC: fsl_sai: MCLK bind with TX/RX enable bit")
    Signed-off-by: Shengjiu Wang <shengjiu.wang@nxp.com>
    Reviewed-by: Daniel Baluta <daniel.baluta@nxp.com>
    Link: https://msgid.link/r/1702953057-4499-1-git-send-email-shengjiu.wang@nxp.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 264d8c9b7f7faa2ded84c78f766aa6d61797523f
Author: Jerome Brunet <jbrunet@baylibre.com>
Date:   Mon Dec 18 15:56:52 2023 +0100

    ASoC: hdmi-codec: fix missing report for jack initial status
    
    [ Upstream commit 025222a9d6d25eee2ad9a1bb5a8b29b34b5ba576 ]
    
    This fixes a problem introduced while fixing ELD reporting with no jack
    set.
    
    Most driver using the hdmi-codec will call the 'plugged_cb' callback
    directly when registered to report the initial state of the HDMI connector.
    
    With the commit mentionned, this occurs before jack is ready and the
    initial report is lost for platforms actually providing a jack for HDMI.
    
    Fix this by storing the hdmi connector status regardless of jack being set
    or not and report the last status when jack gets set.
    
    With this, the initial state is reported correctly even if it is
    disconnected. This was not done initially and is also a fix.
    
    Fixes: 15be353d55f9 ("ASoC: hdmi-codec: register hpd callback on component probe")
    Reported-by: Zhengqiao Xia <xiazhengqiao@huaqin.corp-partner.google.com>
    Closes: https://lore.kernel.org/alsa-devel/CADYyEwTNyY+fR9SgfDa-g6iiDwkU3MUdPVCYexs2_3wbcM8_vg@mail.gmail.com/
    Cc: Hsin-Yi Wang <hsinyi@google.com>
    Tested-by: Zhengqiao Xia <xiazhengqiao@huaqin.corp-partner.google.com>
    Signed-off-by: Jerome Brunet <jbrunet@baylibre.com>
    Link: https://msgid.link/r/20231218145655.134929-1-jbrunet@baylibre.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9b4c95a63e2dfe5ea73d92fb82ec34c3efa76284
Author: David Howells <dhowells@redhat.com>
Date:   Thu Dec 21 13:57:31 2023 +0000

    afs: Fix use-after-free due to get/remove race in volume tree
    
    [ Upstream commit 9a6b294ab496650e9f270123730df37030911b55 ]
    
    When an afs_volume struct is put, its refcount is reduced to 0 before
    the cell->volume_lock is taken and the volume removed from the
    cell->volumes tree.
    
    Unfortunately, this means that the lookup code can race and see a volume
    with a zero ref in the tree, resulting in a use-after-free:
    
        refcount_t: addition on 0; use-after-free.
        WARNING: CPU: 3 PID: 130782 at lib/refcount.c:25 refcount_warn_saturate+0x7a/0xda
        ...
        RIP: 0010:refcount_warn_saturate+0x7a/0xda
        ...
        Call Trace:
         afs_get_volume+0x3d/0x55
         afs_create_volume+0x126/0x1de
         afs_validate_fc+0xfe/0x130
         afs_get_tree+0x20/0x2e5
         vfs_get_tree+0x1d/0xc9
         do_new_mount+0x13b/0x22e
         do_mount+0x5d/0x8a
         __do_sys_mount+0x100/0x12a
         do_syscall_64+0x3a/0x94
         entry_SYSCALL_64_after_hwframe+0x62/0x6a
    
    Fix this by:
    
     (1) When putting, use a flag to indicate if the volume has been removed
         from the tree and skip the rb_erase if it has.
    
     (2) When looking up, use a conditional ref increment and if it fails
         because the refcount is 0, replace the node in the tree and set the
         removal flag.
    
    Fixes: 20325960f875 ("afs: Reorganise volume and server trees to be rooted on the cell")
    Signed-off-by: David Howells <dhowells@redhat.com>
    Reviewed-by: Jeffrey Altman <jaltman@auristor.com>
    cc: Marc Dionne <marc.dionne@auristor.com>
    cc: linux-afs@lists.infradead.org
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 17605162e26be9841e296314b234d2e7678f6f34
Author: David Howells <dhowells@redhat.com>
Date:   Thu Dec 21 15:09:31 2023 +0000

    afs: Fix overwriting of result of DNS query
    
    [ Upstream commit a9e01ac8c5ff32669119c40dfdc9e80eb0b7d7aa ]
    
    In afs_update_cell(), ret is the result of the DNS lookup and the errors
    are to be handled by a switch - however, the value gets clobbered in
    between by setting it to -ENOMEM in case afs_alloc_vlserver_list()
    fails.
    
    Fix this by moving the setting of -ENOMEM into the error handling for
    OOM failure.  Further, only do it if we don't have an alternative error
    to return.
    
    Found by Linux Verification Center (linuxtesting.org) with SVACE.  Based
    on a patch from Anastasia Belova [1].
    
    Fixes: d5c32c89b208 ("afs: Fix cell DNS lookup")
    Signed-off-by: David Howells <dhowells@redhat.com>
    Reviewed-by: Jeffrey Altman <jaltman@auristor.com>
    cc: Anastasia Belova <abelova@astralinux.ru>
    cc: Marc Dionne <marc.dionne@auristor.com>
    cc: linux-afs@lists.infradead.org
    cc: lvc-project@linuxtesting.org
    Link: https://lore.kernel.org/r/20231221085849.1463-1-abelova@astralinux.ru/ [1]
    Link: https://lore.kernel.org/r/1700862.1703168632@warthog.procyon.org.uk/ # v1
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 791d5409cdb974c31a1bc7a903ea729ddc7d83df
Author: David Howells <dhowells@redhat.com>
Date:   Sat Dec 9 00:41:55 2023 +0000

    keys, dns: Allow key types (eg. DNS) to be reclaimed immediately on expiry
    
    [ Upstream commit 39299bdd2546688d92ed9db4948f6219ca1b9542 ]
    
    If a key has an expiration time, then when that time passes, the key is
    left around for a certain amount of time before being collected (5 mins by
    default) so that EKEYEXPIRED can be returned instead of ENOKEY.  This is a
    problem for DNS keys because we want to redo the DNS lookup immediately at
    that point.
    
    Fix this by allowing key types to be marked such that keys of that type
    don't have this extra period, but are reclaimed as soon as they expire and
    turn this on for dns_resolver-type keys.  To make this easier to handle,
    key->expiry is changed to be permanent if TIME64_MAX rather than 0.
    
    Furthermore, give such new-style negative DNS results a 1s default expiry
    if no other expiry time is set rather than allowing it to stick around
    indefinitely.  This shouldn't be zero as ls will follow a failing stat call
    immediately with a second with AT_SYMLINK_NOFOLLOW added.
    
    Fixes: 1a4240f4764a ("DNS: Separate out CIFS DNS Resolver code")
    Signed-off-by: David Howells <dhowells@redhat.com>
    Tested-by: Markus Suvanto <markus.suvanto@gmail.com>
    cc: Wang Lei <wang840925@gmail.com>
    cc: Jeff Layton <jlayton@redhat.com>
    cc: Steve French <smfrench@gmail.com>
    cc: Marc Dionne <marc.dionne@auristor.com>
    cc: Jarkko Sakkinen <jarkko@kernel.org>
    cc: "David S. Miller" <davem@davemloft.net>
    cc: Eric Dumazet <edumazet@google.com>
    cc: Jakub Kicinski <kuba@kernel.org>
    cc: Paolo Abeni <pabeni@redhat.com>
    cc: linux-afs@lists.infradead.org
    cc: linux-cifs@vger.kernel.org
    cc: linux-nfs@vger.kernel.org
    cc: ceph-devel@vger.kernel.org
    cc: keyrings@vger.kernel.org
    cc: netdev@vger.kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3e617c7e39eb6e605f86d5e726476ebd002d9ddf
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Dec 19 12:53:31 2023 +0000

    net: check dev->gso_max_size in gso_features_check()
    
    [ Upstream commit 24ab059d2ebd62fdccc43794796f6ffbabe49ebc ]
    
    Some drivers might misbehave if TSO packets get too big.
    
    GVE for instance uses a 16bit field in its TX descriptor,
    and will do bad things if a packet is bigger than 2^16 bytes.
    
    Linux TCP stack honors dev->gso_max_size, but there are
    other ways for too big packets to reach an ndo_start_xmit()
    handler : virtio_net, af_packet, GRO...
    
    Add a generic check in gso_features_check() and fallback
    to GSO when needed.
    
    gso_max_size was added in the blamed commit.
    
    Fixes: 82cc1a7a5687 ("[NET]: Add per-connection option to set max TSO frame size")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/20231219125331.4127498-1-edumazet@google.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 087b96adc694d2cb54cb387c67fc585cf68397c1
Author: David Howells <dhowells@redhat.com>
Date:   Mon Dec 11 15:15:02 2023 +0000

    afs: Fix dynamic root lookup DNS check
    
    [ Upstream commit 74cef6872ceaefb5b6c5c60641371ea28702d358 ]
    
    In the afs dynamic root directory, the ->lookup() function does a DNS check
    on the cell being asked for and if the DNS upcall reports an error it will
    report an error back to userspace (typically ENOENT).
    
    However, if a failed DNS upcall returns a new-style result, it will return
    a valid result, with the status field set appropriately to indicate the
    type of failure - and in that case, dns_query() doesn't return an error and
    we let stat() complete with no error - which can cause confusion in
    userspace as subsequent calls that trigger d_automount then fail with
    ENOENT.
    
    Fix this by checking the status result from a valid dns_query() and
    returning an error if it indicates a failure.
    
    Fixes: bbb4c4323a4d ("dns: Allow the dns resolver to retrieve a server set")
    Reported-by: Markus Suvanto <markus.suvanto@gmail.com>
    Closes: https://bugzilla.kernel.org/show_bug.cgi?id=216637
    Signed-off-by: David Howells <dhowells@redhat.com>
    Tested-by: Markus Suvanto <markus.suvanto@gmail.com>
    cc: Marc Dionne <marc.dionne@auristor.com>
    cc: linux-afs@lists.infradead.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9c6ea7abe3ed371b89a9ce02662f96c10a52a55a
Author: David Howells <dhowells@redhat.com>
Date:   Mon Dec 11 15:08:57 2023 +0000

    afs: Fix the dynamic root's d_delete to always delete unused dentries
    
    [ Upstream commit 71f8b55bc30e82d6355e07811213d847981a32e2 ]
    
    Fix the afs dynamic root's d_delete function to always delete unused
    dentries rather than only deleting them if they're positive.  With things
    as they stand upstream, negative dentries stemming from failed DNS lookups
    stick around preventing retries.
    
    Fixes: 66c7e1d319a5 ("afs: Split the dynroot stuff out and give it its own ops tables")
    Signed-off-by: David Howells <dhowells@redhat.com>
    Tested-by: Markus Suvanto <markus.suvanto@gmail.com>
    cc: Marc Dionne <marc.dionne@auristor.com>
    cc: linux-afs@lists.infradead.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a70c2dd74198492e36862faf9db4c6157a069ce2
Author: Liu Jian <liujian56@huawei.com>
Date:   Sat Dec 16 15:52:18 2023 +0800

    net: check vlan filter feature in vlan_vids_add_by_dev() and vlan_vids_del_by_dev()
    
    [ Upstream commit 01a564bab4876007ce35f312e16797dfe40e4823 ]
    
    I got the below warning trace:
    
    WARNING: CPU: 4 PID: 4056 at net/core/dev.c:11066 unregister_netdevice_many_notify
    CPU: 4 PID: 4056 Comm: ip Not tainted 6.7.0-rc4+ #15
    Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 1.15.0-1 04/01/2014
    RIP: 0010:unregister_netdevice_many_notify+0x9a4/0x9b0
    Call Trace:
     rtnl_dellink
     rtnetlink_rcv_msg
     netlink_rcv_skb
     netlink_unicast
     netlink_sendmsg
     __sock_sendmsg
     ____sys_sendmsg
     ___sys_sendmsg
     __sys_sendmsg
     do_syscall_64
     entry_SYSCALL_64_after_hwframe
    
    It can be repoduced via:
    
        ip netns add ns1
        ip netns exec ns1 ip link add bond0 type bond mode 0
        ip netns exec ns1 ip link add bond_slave_1 type veth peer veth2
        ip netns exec ns1 ip link set bond_slave_1 master bond0
    [1] ip netns exec ns1 ethtool -K bond0 rx-vlan-filter off
    [2] ip netns exec ns1 ip link add link bond_slave_1 name bond_slave_1.0 type vlan id 0
    [3] ip netns exec ns1 ip link add link bond0 name bond0.0 type vlan id 0
    [4] ip netns exec ns1 ip link set bond_slave_1 nomaster
    [5] ip netns exec ns1 ip link del veth2
        ip netns del ns1
    
    This is all caused by command [1] turning off the rx-vlan-filter function
    of bond0. The reason is the same as commit 01f4fd270870 ("bonding: Fix
    incorrect deletion of ETH_P_8021AD protocol vid from slaves"). Commands
    [2] [3] add the same vid to slave and master respectively, causing
    command [4] to empty slave->vlan_info. The following command [5] triggers
    this problem.
    
    To fix this problem, we should add VLAN_FILTER feature checks in
    vlan_vids_add_by_dev() and vlan_vids_del_by_dev() to prevent incorrect
    addition or deletion of vlan_vid information.
    
    Fixes: 348a1443cc43 ("vlan: introduce functions to do mass addition/deletion of vids by another device")
    Signed-off-by: Liu Jian <liujian56@huawei.com>
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ea03196ebc473d23fd9aadce9ae6ed6e603b92e4
Author: Yury Norov <yury.norov@gmail.com>
Date:   Fri Dec 15 12:33:53 2023 -0800

    net: mana: select PAGE_POOL
    
    [ Upstream commit 340943fbff3d8faa44d2223ca04917df28786a07 ]
    
    Mana uses PAGE_POOL API. x86_64 defconfig doesn't select it:
    
    ld: vmlinux.o: in function `mana_create_page_pool.isra.0':
    mana_en.c:(.text+0x9ae36f): undefined reference to `page_pool_create'
    ld: vmlinux.o: in function `mana_get_rxfrag':
    mana_en.c:(.text+0x9afed1): undefined reference to `page_pool_alloc_pages'
    make[3]: *** [/home/yury/work/linux/scripts/Makefile.vmlinux:37: vmlinux] Error 1
    make[2]: *** [/home/yury/work/linux/Makefile:1154: vmlinux] Error 2
    make[1]: *** [/home/yury/work/linux/Makefile:234: __sub-make] Error 2
    make[1]: Leaving directory '/home/yury/work/build-linux-x86_64'
    make: *** [Makefile:234: __sub-make] Error 2
    
    So we need to select it explicitly.
    
    Signed-off-by: Yury Norov <yury.norov@gmail.com>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Tested-by: Simon Horman <horms@kernel.org> # build-tested
    Fixes: ca9c54d2 ("net: mana: Add a driver for Microsoft Azure Network Adapter")
    Link: https://lore.kernel.org/r/20231215203353.635379-1-yury.norov@gmail.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a1986c429c68a90c56234c73de48ad07595732f6
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Nov 22 23:17:44 2023 +0100

    Bluetooth: hci_event: shut up a false-positive warning
    
    [ Upstream commit a5812c68d849505ea657f653446512b85887f813 ]
    
    Turning on -Wstringop-overflow globally exposed a misleading compiler
    warning in bluetooth:
    
    net/bluetooth/hci_event.c: In function 'hci_cc_read_class_of_dev':
    net/bluetooth/hci_event.c:524:9: error: 'memcpy' writing 3 bytes into a
    region of size 0 overflows the destination [-Werror=stringop-overflow=]
      524 |         memcpy(hdev->dev_class, rp->dev_class, 3);
          |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
    The problem here is the check for hdev being NULL in bt_dev_dbg() that
    leads the compiler to conclude that hdev->dev_class might be an invalid
    pointer access.
    
    Add another explicit check for the same condition to make sure gcc sees
    this cannot happen.
    
    Fixes: a9de9248064b ("[Bluetooth] Switch from OGF+OCF to using only opcodes")
    Fixes: 1b56c90018f0 ("Makefile: Enable -Wstringop-overflow globally")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fc64715105825b9822dd17416830df50355aad08
Author: Ying Hsu <yinghsu@chromium.org>
Date:   Fri Nov 10 01:46:05 2023 +0000

    Bluetooth: Fix deadlock in vhci_send_frame
    
    [ Upstream commit 769bf60e17ee1a56a81e7c031192c3928312c52e ]
    
    syzbot found a potential circular dependency leading to a deadlock:
        -> #3 (&hdev->req_lock){+.+.}-{3:3}:
        __mutex_lock_common+0x1b6/0x1bc2 kernel/locking/mutex.c:599
        __mutex_lock kernel/locking/mutex.c:732 [inline]
        mutex_lock_nested+0x17/0x1c kernel/locking/mutex.c:784
        hci_dev_do_close+0x3f/0x9f net/bluetooth/hci_core.c:551
        hci_rfkill_set_block+0x130/0x1ac net/bluetooth/hci_core.c:935
        rfkill_set_block+0x1e6/0x3b8 net/rfkill/core.c:345
        rfkill_fop_write+0x2d8/0x672 net/rfkill/core.c:1274
        vfs_write+0x277/0xcf5 fs/read_write.c:594
        ksys_write+0x19b/0x2bd fs/read_write.c:650
        do_syscall_x64 arch/x86/entry/common.c:55 [inline]
        do_syscall_64+0x51/0xba arch/x86/entry/common.c:93
        entry_SYSCALL_64_after_hwframe+0x61/0xcb
    
        -> #2 (rfkill_global_mutex){+.+.}-{3:3}:
        __mutex_lock_common+0x1b6/0x1bc2 kernel/locking/mutex.c:599
        __mutex_lock kernel/locking/mutex.c:732 [inline]
        mutex_lock_nested+0x17/0x1c kernel/locking/mutex.c:784
        rfkill_register+0x30/0x7e3 net/rfkill/core.c:1045
        hci_register_dev+0x48f/0x96d net/bluetooth/hci_core.c:2622
        __vhci_create_device drivers/bluetooth/hci_vhci.c:341 [inline]
        vhci_create_device+0x3ad/0x68f drivers/bluetooth/hci_vhci.c:374
        vhci_get_user drivers/bluetooth/hci_vhci.c:431 [inline]
        vhci_write+0x37b/0x429 drivers/bluetooth/hci_vhci.c:511
        call_write_iter include/linux/fs.h:2109 [inline]
        new_sync_write fs/read_write.c:509 [inline]
        vfs_write+0xaa8/0xcf5 fs/read_write.c:596
        ksys_write+0x19b/0x2bd fs/read_write.c:650
        do_syscall_x64 arch/x86/entry/common.c:55 [inline]
        do_syscall_64+0x51/0xba arch/x86/entry/common.c:93
        entry_SYSCALL_64_after_hwframe+0x61/0xcb
    
        -> #1 (&data->open_mutex){+.+.}-{3:3}:
        __mutex_lock_common+0x1b6/0x1bc2 kernel/locking/mutex.c:599
        __mutex_lock kernel/locking/mutex.c:732 [inline]
        mutex_lock_nested+0x17/0x1c kernel/locking/mutex.c:784
        vhci_send_frame+0x68/0x9c drivers/bluetooth/hci_vhci.c:75
        hci_send_frame+0x1cc/0x2ff net/bluetooth/hci_core.c:2989
        hci_sched_acl_pkt net/bluetooth/hci_core.c:3498 [inline]
        hci_sched_acl net/bluetooth/hci_core.c:3583 [inline]
        hci_tx_work+0xb94/0x1a60 net/bluetooth/hci_core.c:3654
        process_one_work+0x901/0xfb8 kernel/workqueue.c:2310
        worker_thread+0xa67/0x1003 kernel/workqueue.c:2457
        kthread+0x36a/0x430 kernel/kthread.c:319
        ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:298
    
        -> #0 ((work_completion)(&hdev->tx_work)){+.+.}-{0:0}:
        check_prev_add kernel/locking/lockdep.c:3053 [inline]
        check_prevs_add kernel/locking/lockdep.c:3172 [inline]
        validate_chain kernel/locking/lockdep.c:3787 [inline]
        __lock_acquire+0x2d32/0x77fa kernel/locking/lockdep.c:5011
        lock_acquire+0x273/0x4d5 kernel/locking/lockdep.c:5622
        __flush_work+0xee/0x19f kernel/workqueue.c:3090
        hci_dev_close_sync+0x32f/0x1113 net/bluetooth/hci_sync.c:4352
        hci_dev_do_close+0x47/0x9f net/bluetooth/hci_core.c:553
        hci_rfkill_set_block+0x130/0x1ac net/bluetooth/hci_core.c:935
        rfkill_set_block+0x1e6/0x3b8 net/rfkill/core.c:345
        rfkill_fop_write+0x2d8/0x672 net/rfkill/core.c:1274
        vfs_write+0x277/0xcf5 fs/read_write.c:594
        ksys_write+0x19b/0x2bd fs/read_write.c:650
        do_syscall_x64 arch/x86/entry/common.c:55 [inline]
        do_syscall_64+0x51/0xba arch/x86/entry/common.c:93
        entry_SYSCALL_64_after_hwframe+0x61/0xcb
    
    This change removes the need for acquiring the open_mutex in
    vhci_send_frame, thus eliminating the potential deadlock while
    maintaining the required packet ordering.
    
    Fixes: 92d4abd66f70 ("Bluetooth: vhci: Fix race when opening vhci device")
    Signed-off-by: Ying Hsu <yinghsu@chromium.org>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3e0d1585799d8a991eba9678f297fd78d9f1846e
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Dec 14 15:27:47 2023 +0000

    net/rose: fix races in rose_kill_by_device()
    
    [ Upstream commit 64b8bc7d5f1434c636a40bdcfcd42b278d1714be ]
    
    syzbot found an interesting netdev refcounting issue in
    net/rose/af_rose.c, thanks to CONFIG_NET_DEV_REFCNT_TRACKER=y [1]
    
    Problem is that rose_kill_by_device() can change rose->device
    while other threads do not expect the pointer to be changed.
    
    We have to first collect sockets in a temporary array,
    then perform the changes while holding the socket
    lock and rose_list_lock spinlock (in this order)
    
    Change rose_release() to also acquire rose_list_lock
    before releasing the netdev refcount.
    
    [1]
    
    [ 1185.055088][ T7889] ref_tracker: reference already released.
    [ 1185.061476][ T7889] ref_tracker: allocated in:
    [ 1185.066081][ T7889]  rose_bind+0x4ab/0xd10
    [ 1185.070446][ T7889]  __sys_bind+0x1ec/0x220
    [ 1185.074818][ T7889]  __x64_sys_bind+0x72/0xb0
    [ 1185.079356][ T7889]  do_syscall_64+0x40/0x110
    [ 1185.083897][ T7889]  entry_SYSCALL_64_after_hwframe+0x63/0x6b
    [ 1185.089835][ T7889] ref_tracker: freed in:
    [ 1185.094088][ T7889]  rose_release+0x2f5/0x570
    [ 1185.098629][ T7889]  __sock_release+0xae/0x260
    [ 1185.103262][ T7889]  sock_close+0x1c/0x20
    [ 1185.107453][ T7889]  __fput+0x270/0xbb0
    [ 1185.111467][ T7889]  task_work_run+0x14d/0x240
    [ 1185.116085][ T7889]  get_signal+0x106f/0x2790
    [ 1185.120622][ T7889]  arch_do_signal_or_restart+0x90/0x7f0
    [ 1185.126205][ T7889]  exit_to_user_mode_prepare+0x121/0x240
    [ 1185.131846][ T7889]  syscall_exit_to_user_mode+0x1e/0x60
    [ 1185.137293][ T7889]  do_syscall_64+0x4d/0x110
    [ 1185.141783][ T7889]  entry_SYSCALL_64_after_hwframe+0x63/0x6b
    [ 1185.148085][ T7889] ------------[ cut here ]------------
    
    WARNING: CPU: 1 PID: 7889 at lib/ref_tracker.c:255 ref_tracker_free+0x61a/0x810 lib/ref_tracker.c:255
    Modules linked in:
    CPU: 1 PID: 7889 Comm: syz-executor.2 Not tainted 6.7.0-rc4-syzkaller-00162-g65c95f78917e #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 11/10/2023
    RIP: 0010:ref_tracker_free+0x61a/0x810 lib/ref_tracker.c:255
    Code: 00 44 8b 6b 18 31 ff 44 89 ee e8 21 62 f5 fc 45 85 ed 0f 85 a6 00 00 00 e8 a3 66 f5 fc 48 8b 34 24 48 89 ef e8 27 5f f1 05 90 <0f> 0b 90 bb ea ff ff ff e9 52 fd ff ff e8 84 66 f5 fc 4c 8d 6d 44
    RSP: 0018:ffffc90004917850 EFLAGS: 00010202
    RAX: 0000000000000201 RBX: ffff88802618f4c0 RCX: 0000000000000000
    RDX: 0000000000000202 RSI: ffffffff8accb920 RDI: 0000000000000001
    RBP: ffff8880269ea5b8 R08: 0000000000000001 R09: fffffbfff23e35f6
    R10: ffffffff91f1afb7 R11: 0000000000000001 R12: 1ffff92000922f0c
    R13: 0000000005a2039b R14: ffff88802618f4d8 R15: 00000000ffffffff
    FS: 00007f0a720ef6c0(0000) GS:ffff8880b9900000(0000) knlGS:0000000000000000
    CS: 0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00007f43a819d988 CR3: 0000000076c64000 CR4: 00000000003506f0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
    <TASK>
    netdev_tracker_free include/linux/netdevice.h:4127 [inline]
    netdev_put include/linux/netdevice.h:4144 [inline]
    netdev_put include/linux/netdevice.h:4140 [inline]
    rose_kill_by_device net/rose/af_rose.c:195 [inline]
    rose_device_event+0x25d/0x330 net/rose/af_rose.c:218
    notifier_call_chain+0xb6/0x3b0 kernel/notifier.c:93
    call_netdevice_notifiers_info+0xbe/0x130 net/core/dev.c:1967
    call_netdevice_notifiers_extack net/core/dev.c:2005 [inline]
    call_netdevice_notifiers net/core/dev.c:2019 [inline]
    __dev_notify_flags+0x1f5/0x2e0 net/core/dev.c:8646
    dev_change_flags+0x122/0x170 net/core/dev.c:8682
    dev_ifsioc+0x9ad/0x1090 net/core/dev_ioctl.c:529
    dev_ioctl+0x224/0x1090 net/core/dev_ioctl.c:786
    sock_do_ioctl+0x198/0x270 net/socket.c:1234
    sock_ioctl+0x22e/0x6b0 net/socket.c:1339
    vfs_ioctl fs/ioctl.c:51 [inline]
    __do_sys_ioctl fs/ioctl.c:871 [inline]
    __se_sys_ioctl fs/ioctl.c:857 [inline]
    __x64_sys_ioctl+0x18f/0x210 fs/ioctl.c:857
    do_syscall_x64 arch/x86/entry/common.c:52 [inline]
    do_syscall_64+0x40/0x110 arch/x86/entry/common.c:83
    entry_SYSCALL_64_after_hwframe+0x63/0x6b
    RIP: 0033:0x7f0a7147cba9
    Code: 28 00 00 00 75 05 48 83 c4 28 c3 e8 e1 20 00 00 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 b0 ff ff ff f7 d8 64 89 01 48
    RSP: 002b:00007f0a720ef0c8 EFLAGS: 00000246 ORIG_RAX: 0000000000000010
    RAX: ffffffffffffffda RBX: 00007f0a7159bf80 RCX: 00007f0a7147cba9
    RDX: 0000000020000040 RSI: 0000000000008914 RDI: 0000000000000004
    RBP: 00007f0a714c847a R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 0000000000000000
    R13: 000000000000000b R14: 00007f0a7159bf80 R15: 00007ffc8bb3a5f8
    </TASK>
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Bernard Pidoux <f6bvp@free.fr>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 51e28c37d960d4de078c35060935866d10482976
Author: Zhipeng Lu <alexious@zju.edu.cn>
Date:   Thu Dec 14 21:04:04 2023 +0800

    ethernet: atheros: fix a memleak in atl1e_setup_ring_resources
    
    [ Upstream commit 309fdb1c33fe726d92d0030481346f24e1b01f07 ]
    
    In the error handling of 'offset > adapter->ring_size', the
    tx_ring->tx_buffer allocated by kzalloc should be freed,
    instead of 'goto failed' instantly.
    
    Fixes: a6a5325239c2 ("atl1e: Atheros L1E Gigabit Ethernet driver")
    Signed-off-by: Zhipeng Lu <alexious@zju.edu.cn>
    Reviewed-by: Suman Ghosh <sumang@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6707baabe432116b9ca2e1f0cf96092fe2fac40a
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Dec 14 11:30:38 2023 +0000

    net: sched: ife: fix potential use-after-free
    
    [ Upstream commit 19391a2ca98baa7b80279306cdf7dd43f81fa595 ]
    
    ife_decode() calls pskb_may_pull() two times, we need to reload
    ifehdr after the second one, or risk use-after-free as reported
    by syzbot:
    
    BUG: KASAN: slab-use-after-free in __ife_tlv_meta_valid net/ife/ife.c:108 [inline]
    BUG: KASAN: slab-use-after-free in ife_tlv_meta_decode+0x1d1/0x210 net/ife/ife.c:131
    Read of size 2 at addr ffff88802d7300a4 by task syz-executor.5/22323
    
    CPU: 0 PID: 22323 Comm: syz-executor.5 Not tainted 6.7.0-rc3-syzkaller-00804-g074ac38d5b95 #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 11/10/2023
    Call Trace:
    <TASK>
    __dump_stack lib/dump_stack.c:88 [inline]
    dump_stack_lvl+0xd9/0x1b0 lib/dump_stack.c:106
    print_address_description mm/kasan/report.c:364 [inline]
    print_report+0xc4/0x620 mm/kasan/report.c:475
    kasan_report+0xda/0x110 mm/kasan/report.c:588
    __ife_tlv_meta_valid net/ife/ife.c:108 [inline]
    ife_tlv_meta_decode+0x1d1/0x210 net/ife/ife.c:131
    tcf_ife_decode net/sched/act_ife.c:739 [inline]
    tcf_ife_act+0x4e3/0x1cd0 net/sched/act_ife.c:879
    tc_act include/net/tc_wrapper.h:221 [inline]
    tcf_action_exec+0x1ac/0x620 net/sched/act_api.c:1079
    tcf_exts_exec include/net/pkt_cls.h:344 [inline]
    mall_classify+0x201/0x310 net/sched/cls_matchall.c:42
    tc_classify include/net/tc_wrapper.h:227 [inline]
    __tcf_classify net/sched/cls_api.c:1703 [inline]
    tcf_classify+0x82f/0x1260 net/sched/cls_api.c:1800
    hfsc_classify net/sched/sch_hfsc.c:1147 [inline]
    hfsc_enqueue+0x315/0x1060 net/sched/sch_hfsc.c:1546
    dev_qdisc_enqueue+0x3f/0x230 net/core/dev.c:3739
    __dev_xmit_skb net/core/dev.c:3828 [inline]
    __dev_queue_xmit+0x1de1/0x3d30 net/core/dev.c:4311
    dev_queue_xmit include/linux/netdevice.h:3165 [inline]
    packet_xmit+0x237/0x350 net/packet/af_packet.c:276
    packet_snd net/packet/af_packet.c:3081 [inline]
    packet_sendmsg+0x24aa/0x5200 net/packet/af_packet.c:3113
    sock_sendmsg_nosec net/socket.c:730 [inline]
    __sock_sendmsg+0xd5/0x180 net/socket.c:745
    __sys_sendto+0x255/0x340 net/socket.c:2190
    __do_sys_sendto net/socket.c:2202 [inline]
    __se_sys_sendto net/socket.c:2198 [inline]
    __x64_sys_sendto+0xe0/0x1b0 net/socket.c:2198
    do_syscall_x64 arch/x86/entry/common.c:51 [inline]
    do_syscall_64+0x40/0x110 arch/x86/entry/common.c:82
    entry_SYSCALL_64_after_hwframe+0x63/0x6b
    RIP: 0033:0x7fe9acc7cae9
    Code: 28 00 00 00 75 05 48 83 c4 28 c3 e8 e1 20 00 00 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 b0 ff ff ff f7 d8 64 89 01 48
    RSP: 002b:00007fe9ada450c8 EFLAGS: 00000246 ORIG_RAX: 000000000000002c
    RAX: ffffffffffffffda RBX: 00007fe9acd9bf80 RCX: 00007fe9acc7cae9
    RDX: 000000000000fce0 RSI: 00000000200002c0 RDI: 0000000000000003
    RBP: 00007fe9accc847a R08: 0000000020000140 R09: 0000000000000014
    R10: 0000000000000004 R11: 0000000000000246 R12: 0000000000000000
    R13: 000000000000000b R14: 00007fe9acd9bf80 R15: 00007ffd5427ae78
    </TASK>
    
    Allocated by task 22323:
    kasan_save_stack+0x33/0x50 mm/kasan/common.c:45
    kasan_set_track+0x25/0x30 mm/kasan/common.c:52
    ____kasan_kmalloc mm/kasan/common.c:374 [inline]
    __kasan_kmalloc+0xa2/0xb0 mm/kasan/common.c:383
    kasan_kmalloc include/linux/kasan.h:198 [inline]
    __do_kmalloc_node mm/slab_common.c:1007 [inline]
    __kmalloc_node_track_caller+0x5a/0x90 mm/slab_common.c:1027
    kmalloc_reserve+0xef/0x260 net/core/skbuff.c:582
    __alloc_skb+0x12b/0x330 net/core/skbuff.c:651
    alloc_skb include/linux/skbuff.h:1298 [inline]
    alloc_skb_with_frags+0xe4/0x710 net/core/skbuff.c:6331
    sock_alloc_send_pskb+0x7e4/0x970 net/core/sock.c:2780
    packet_alloc_skb net/packet/af_packet.c:2930 [inline]
    packet_snd net/packet/af_packet.c:3024 [inline]
    packet_sendmsg+0x1e2a/0x5200 net/packet/af_packet.c:3113
    sock_sendmsg_nosec net/socket.c:730 [inline]
    __sock_sendmsg+0xd5/0x180 net/socket.c:745
    __sys_sendto+0x255/0x340 net/socket.c:2190
    __do_sys_sendto net/socket.c:2202 [inline]
    __se_sys_sendto net/socket.c:2198 [inline]
    __x64_sys_sendto+0xe0/0x1b0 net/socket.c:2198
    do_syscall_x64 arch/x86/entry/common.c:51 [inline]
    do_syscall_64+0x40/0x110 arch/x86/entry/common.c:82
    entry_SYSCALL_64_after_hwframe+0x63/0x6b
    
    Freed by task 22323:
    kasan_save_stack+0x33/0x50 mm/kasan/common.c:45
    kasan_set_track+0x25/0x30 mm/kasan/common.c:52
    kasan_save_free_info+0x2b/0x40 mm/kasan/generic.c:522
    ____kasan_slab_free mm/kasan/common.c:236 [inline]
    ____kasan_slab_free+0x15b/0x1b0 mm/kasan/common.c:200
    kasan_slab_free include/linux/kasan.h:164 [inline]
    slab_free_hook mm/slub.c:1800 [inline]
    slab_free_freelist_hook+0x114/0x1e0 mm/slub.c:1826
    slab_free mm/slub.c:3809 [inline]
    __kmem_cache_free+0xc0/0x180 mm/slub.c:3822
    skb_kfree_head net/core/skbuff.c:950 [inline]
    skb_free_head+0x110/0x1b0 net/core/skbuff.c:962
    pskb_expand_head+0x3c5/0x1170 net/core/skbuff.c:2130
    __pskb_pull_tail+0xe1/0x1830 net/core/skbuff.c:2655
    pskb_may_pull_reason include/linux/skbuff.h:2685 [inline]
    pskb_may_pull include/linux/skbuff.h:2693 [inline]
    ife_decode+0x394/0x4f0 net/ife/ife.c:82
    tcf_ife_decode net/sched/act_ife.c:727 [inline]
    tcf_ife_act+0x43b/0x1cd0 net/sched/act_ife.c:879
    tc_act include/net/tc_wrapper.h:221 [inline]
    tcf_action_exec+0x1ac/0x620 net/sched/act_api.c:1079
    tcf_exts_exec include/net/pkt_cls.h:344 [inline]
    mall_classify+0x201/0x310 net/sched/cls_matchall.c:42
    tc_classify include/net/tc_wrapper.h:227 [inline]
    __tcf_classify net/sched/cls_api.c:1703 [inline]
    tcf_classify+0x82f/0x1260 net/sched/cls_api.c:1800
    hfsc_classify net/sched/sch_hfsc.c:1147 [inline]
    hfsc_enqueue+0x315/0x1060 net/sched/sch_hfsc.c:1546
    dev_qdisc_enqueue+0x3f/0x230 net/core/dev.c:3739
    __dev_xmit_skb net/core/dev.c:3828 [inline]
    __dev_queue_xmit+0x1de1/0x3d30 net/core/dev.c:4311
    dev_queue_xmit include/linux/netdevice.h:3165 [inline]
    packet_xmit+0x237/0x350 net/packet/af_packet.c:276
    packet_snd net/packet/af_packet.c:3081 [inline]
    packet_sendmsg+0x24aa/0x5200 net/packet/af_packet.c:3113
    sock_sendmsg_nosec net/socket.c:730 [inline]
    __sock_sendmsg+0xd5/0x180 net/socket.c:745
    __sys_sendto+0x255/0x340 net/socket.c:2190
    __do_sys_sendto net/socket.c:2202 [inline]
    __se_sys_sendto net/socket.c:2198 [inline]
    __x64_sys_sendto+0xe0/0x1b0 net/socket.c:2198
    do_syscall_x64 arch/x86/entry/common.c:51 [inline]
    do_syscall_64+0x40/0x110 arch/x86/entry/common.c:82
    entry_SYSCALL_64_after_hwframe+0x63/0x6b
    
    The buggy address belongs to the object at ffff88802d730000
    which belongs to the cache kmalloc-8k of size 8192
    The buggy address is located 164 bytes inside of
    freed 8192-byte region [ffff88802d730000, ffff88802d732000)
    
    The buggy address belongs to the physical page:
    page:ffffea0000b5cc00 refcount:1 mapcount:0 mapping:0000000000000000 index:0x0 pfn:0x2d730
    head:ffffea0000b5cc00 order:3 entire_mapcount:0 nr_pages_mapped:0 pincount:0
    flags: 0xfff00000000840(slab|head|node=0|zone=1|lastcpupid=0x7ff)
    page_type: 0xffffffff()
    raw: 00fff00000000840 ffff888013042280 dead000000000122 0000000000000000
    raw: 0000000000000000 0000000080020002 00000001ffffffff 0000000000000000
    page dumped because: kasan: bad access detected
    page_owner tracks the page as allocated
    page last allocated via order 3, migratetype Unmovable, gfp_mask 0x1d20c0(__GFP_IO|__GFP_FS|__GFP_NOWARN|__GFP_NORETRY|__GFP_COMP|__GFP_NOMEMALLOC|__GFP_HARDWALL), pid 22323, tgid 22320 (syz-executor.5), ts 950317230369, free_ts 950233467461
    set_page_owner include/linux/page_owner.h:31 [inline]
    post_alloc_hook+0x2d0/0x350 mm/page_alloc.c:1544
    prep_new_page mm/page_alloc.c:1551 [inline]
    get_page_from_freelist+0xa28/0x3730 mm/page_alloc.c:3319
    __alloc_pages+0x22e/0x2420 mm/page_alloc.c:4575
    alloc_pages_mpol+0x258/0x5f0 mm/mempolicy.c:2133
    alloc_slab_page mm/slub.c:1870 [inline]
    allocate_slab mm/slub.c:2017 [inline]
    new_slab+0x283/0x3c0 mm/slub.c:2070
    ___slab_alloc+0x979/0x1500 mm/slub.c:3223
    __slab_alloc.constprop.0+0x56/0xa0 mm/slub.c:3322
    __slab_alloc_node mm/slub.c:3375 [inline]
    slab_alloc_node mm/slub.c:3468 [inline]
    __kmem_cache_alloc_node+0x131/0x310 mm/slub.c:3517
    __do_kmalloc_node mm/slab_common.c:1006 [inline]
    __kmalloc_node_track_caller+0x4a/0x90 mm/slab_common.c:1027
    kmalloc_reserve+0xef/0x260 net/core/skbuff.c:582
    __alloc_skb+0x12b/0x330 net/core/skbuff.c:651
    alloc_skb include/linux/skbuff.h:1298 [inline]
    alloc_skb_with_frags+0xe4/0x710 net/core/skbuff.c:6331
    sock_alloc_send_pskb+0x7e4/0x970 net/core/sock.c:2780
    packet_alloc_skb net/packet/af_packet.c:2930 [inline]
    packet_snd net/packet/af_packet.c:3024 [inline]
    packet_sendmsg+0x1e2a/0x5200 net/packet/af_packet.c:3113
    sock_sendmsg_nosec net/socket.c:730 [inline]
    __sock_sendmsg+0xd5/0x180 net/socket.c:745
    __sys_sendto+0x255/0x340 net/socket.c:2190
    page last free stack trace:
    reset_page_owner include/linux/page_owner.h:24 [inline]
    free_pages_prepare mm/page_alloc.c:1144 [inline]
    free_unref_page_prepare+0x53c/0xb80 mm/page_alloc.c:2354
    free_unref_page+0x33/0x3b0 mm/page_alloc.c:2494
    __unfreeze_partials+0x226/0x240 mm/slub.c:2655
    qlink_free mm/kasan/quarantine.c:168 [inline]
    qlist_free_all+0x6a/0x170 mm/kasan/quarantine.c:187
    kasan_quarantine_reduce+0x18e/0x1d0 mm/kasan/quarantine.c:294
    __kasan_slab_alloc+0x65/0x90 mm/kasan/common.c:305
    kasan_slab_alloc include/linux/kasan.h:188 [inline]
    slab_post_alloc_hook mm/slab.h:763 [inline]
    slab_alloc_node mm/slub.c:3478 [inline]
    slab_alloc mm/slub.c:3486 [inline]
    __kmem_cache_alloc_lru mm/slub.c:3493 [inline]
    kmem_cache_alloc_lru+0x219/0x6f0 mm/slub.c:3509
    alloc_inode_sb include/linux/fs.h:2937 [inline]
    ext4_alloc_inode+0x28/0x650 fs/ext4/super.c:1408
    alloc_inode+0x5d/0x220 fs/inode.c:261
    new_inode_pseudo fs/inode.c:1006 [inline]
    new_inode+0x22/0x260 fs/inode.c:1032
    __ext4_new_inode+0x333/0x5200 fs/ext4/ialloc.c:958
    ext4_symlink+0x5d7/0xa20 fs/ext4/namei.c:3398
    vfs_symlink fs/namei.c:4464 [inline]
    vfs_symlink+0x3e5/0x620 fs/namei.c:4448
    do_symlinkat+0x25f/0x310 fs/namei.c:4490
    __do_sys_symlinkat fs/namei.c:4506 [inline]
    __se_sys_symlinkat fs/namei.c:4503 [inline]
    __x64_sys_symlinkat+0x97/0xc0 fs/namei.c:4503
    do_syscall_x64 arch/x86/entry/common.c:51 [inline]
    do_syscall_64+0x40/0x110 arch/x86/entry/common.c:82
    
    Fixes: d57493d6d1be ("net: sched: ife: check on metadata length")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Jamal Hadi Salim <jhs@mojatatu.com>
    Cc: Alexander Aring <aahringo@redhat.com>
    Acked-by: Jamal Hadi Salim <jhs@mojatatu.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 31edab12229ce70a4816f0a57342b1fcff2b2fa5
Author: Shigeru Yoshida <syoshida@redhat.com>
Date:   Thu Dec 14 14:09:22 2023 +0900

    net: Return error from sk_stream_wait_connect() if sk_wait_event() fails
    
    [ Upstream commit cac23b7d7627915d967ce25436d7aae26e88ed06 ]
    
    The following NULL pointer dereference issue occurred:
    
    BUG: kernel NULL pointer dereference, address: 0000000000000000
    <...>
    RIP: 0010:ccid_hc_tx_send_packet net/dccp/ccid.h:166 [inline]
    RIP: 0010:dccp_write_xmit+0x49/0x140 net/dccp/output.c:356
    <...>
    Call Trace:
     <TASK>
     dccp_sendmsg+0x642/0x7e0 net/dccp/proto.c:801
     inet_sendmsg+0x63/0x90 net/ipv4/af_inet.c:846
     sock_sendmsg_nosec net/socket.c:730 [inline]
     __sock_sendmsg+0x83/0xe0 net/socket.c:745
     ____sys_sendmsg+0x443/0x510 net/socket.c:2558
     ___sys_sendmsg+0xe5/0x150 net/socket.c:2612
     __sys_sendmsg+0xa6/0x120 net/socket.c:2641
     __do_sys_sendmsg net/socket.c:2650 [inline]
     __se_sys_sendmsg net/socket.c:2648 [inline]
     __x64_sys_sendmsg+0x45/0x50 net/socket.c:2648
     do_syscall_x64 arch/x86/entry/common.c:51 [inline]
     do_syscall_64+0x43/0x110 arch/x86/entry/common.c:82
     entry_SYSCALL_64_after_hwframe+0x63/0x6b
    
    sk_wait_event() returns an error (-EPIPE) if disconnect() is called on the
    socket waiting for the event. However, sk_stream_wait_connect() returns
    success, i.e. zero, even if sk_wait_event() returns -EPIPE, so a function
    that waits for a connection with sk_stream_wait_connect() may misbehave.
    
    In the case of the above DCCP issue, dccp_sendmsg() is waiting for the
    connection. If disconnect() is called in concurrently, the above issue
    occurs.
    
    This patch fixes the issue by returning error from sk_stream_wait_connect()
    if sk_wait_event() fails.
    
    Fixes: 419ce133ab92 ("tcp: allow again tcp_disconnect() when threads are waiting")
    Signed-off-by: Shigeru Yoshida <syoshida@redhat.com>
    Reviewed-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Reported-by: syzbot+c71bc336c5061153b502@syzkaller.appspotmail.com
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Reported-by: syzkaller <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9d00421e1430f179269cb19b67c2310f9c98411f
Author: Suman Ghosh <sumang@marvell.com>
Date:   Wed Dec 13 23:40:44 2023 +0530

    octeontx2-pf: Fix graceful exit during PFC configuration failure
    
    [ Upstream commit 8c97ab5448f2096daba11edf8d18a44e1eb6f31d ]
    
    During PFC configuration failure the code was not handling a graceful
    exit. This patch fixes the same and add proper code for a graceful exit.
    
    Fixes: 99c969a83d82 ("octeontx2-pf: Add egress PFC support")
    Signed-off-by: Suman Ghosh <sumang@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b0cee294022fe261b043b03f625c8156fc1a6d6e
Author: Vladimir Oltean <vladimir.oltean@nxp.com>
Date:   Thu Dec 14 02:09:01 2023 +0200

    net: mscc: ocelot: fix eMAC TX RMON stats for bucket 256-511 and above
    
    [ Upstream commit 52eda4641d041667fa059f4855c5f88dcebd8afe ]
    
    There is a typo in the driver due to which we report incorrect TX RMON
    counters for the 256-511 octet bucket and all the other buckets larger
    than that.
    
    Bug found with the selftest at
    https://patchwork.kernel.org/project/netdevbpf/patch/20231211223346.2497157-9-tobias@waldekranz.com/
    
    Fixes: e32036e1ae7b ("net: mscc: ocelot: add support for all sorts of standardized counters present in DSA")
    Signed-off-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Reviewed-by: Florian Fainelli <florian.fainelli@broadcom.com>
    Link: https://lore.kernel.org/r/20231214000902.545625-1-vladimir.oltean@nxp.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 72b8de75b394af684f3ca762874d8e147d2ca64c
Author: Rahul Rameshbabu <rrameshbabu@nvidia.com>
Date:   Tue Nov 21 15:00:22 2023 -0800

    net/mlx5e: Correct snprintf truncation handling for fw_version buffer used by representors
    
    [ Upstream commit b13559b76157de9d74f04d3ca0e49d69de3b5675 ]
    
    snprintf returns the length of the formatted string, excluding the trailing
    null, without accounting for truncation. This means that is the return
    value is greater than or equal to the size parameter, the fw_version string
    was truncated.
    
    Link: https://docs.kernel.org/core-api/kernel-api.html#c.snprintf
    Fixes: 1b2bd0c0264f ("net/mlx5e: Check return value of snprintf writing to fw_version buffer for representors")
    Signed-off-by: Rahul Rameshbabu <rrameshbabu@nvidia.com>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 18b4a5e0c3f565571ac86d9a17de75ccf458e419
Author: Rahul Rameshbabu <rrameshbabu@nvidia.com>
Date:   Tue Nov 21 15:00:21 2023 -0800

    net/mlx5e: Correct snprintf truncation handling for fw_version buffer
    
    [ Upstream commit ad436b9c1270c40554e274f067f1b78fcc06a004 ]
    
    snprintf returns the length of the formatted string, excluding the trailing
    null, without accounting for truncation. This means that is the return
    value is greater than or equal to the size parameter, the fw_version string
    was truncated.
    
    Reported-by: David Laight <David.Laight@ACULAB.COM>
    Closes: https://lore.kernel.org/netdev/81cae734ee1b4cde9b380a9a31006c1a@AcuMS.aculab.com/
    Link: https://docs.kernel.org/core-api/kernel-api.html#c.snprintf
    Fixes: 41e63c2baa11 ("net/mlx5e: Check return value of snprintf writing to fw_version buffer")
    Signed-off-by: Rahul Rameshbabu <rrameshbabu@nvidia.com>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 94c8485b449ed92034a8efda4fd62ca09dc3b095
Author: Moshe Shemesh <moshe@nvidia.com>
Date:   Thu Nov 30 11:30:34 2023 +0200

    net/mlx5: Fix fw tracer first block check
    
    [ Upstream commit 4261edf11cb7c9224af713a102e5616329306932 ]
    
    While handling new traces, to verify it is not the first block being
    written, last_timestamp is checked. But instead of checking it is non
    zero it is verified to be zero. Fix to verify last_timestamp is not
    zero.
    
    Fixes: c71ad41ccb0c ("net/mlx5: FW tracer, events handling")
    Signed-off-by: Moshe Shemesh <moshe@nvidia.com>
    Reviewed-by: Feras Daoud <ferasda@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1750f55d855a6ac3d59cedd059916301c1effb3b
Author: Dinghao Liu <dinghao.liu@zju.edu.cn>
Date:   Tue Nov 28 17:40:53 2023 +0800

    net/mlx5e: fix a potential double-free in fs_udp_create_groups
    
    [ Upstream commit e75efc6466ae289e599fb12a5a86545dff245c65 ]
    
    When kcalloc() for ft->g succeeds but kvzalloc() for in fails,
    fs_udp_create_groups() will free ft->g. However, its caller
    fs_udp_create_table() will free ft->g again through calling
    mlx5e_destroy_flow_table(), which will lead to a double-free.
    Fix this by setting ft->g to NULL in fs_udp_create_groups().
    
    Fixes: 1c80bd684388 ("net/mlx5e: Introduce Flow Steering UDP API")
    Signed-off-by: Dinghao Liu <dinghao.liu@zju.edu.cn>
    Reviewed-by: Tariq Toukan <tariqt@nvidia.com>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 01877daaeff0b5f42f3b2ee815c5f2e8ba13b4e6
Author: Shifeng Li <lishifeng@sangfor.com.cn>
Date:   Sat Dec 2 00:01:26 2023 -0800

    net/mlx5e: Fix a race in command alloc flow
    
    [ Upstream commit 8f5100da56b3980276234e812ce98d8f075194cd ]
    
    Fix a cmd->ent use after free due to a race on command entry.
    Such race occurs when one of the commands releases its last refcount and
    frees its index and entry while another process running command flush
    flow takes refcount to this command entry. The process which handles
    commands flush may see this command as needed to be flushed if the other
    process allocated a ent->idx but didn't set ent to cmd->ent_arr in
    cmd_work_handler(). Fix it by moving the assignment of cmd->ent_arr into
    the spin lock.
    
    [70013.081955] BUG: KASAN: use-after-free in mlx5_cmd_trigger_completions+0x1e2/0x4c0 [mlx5_core]
    [70013.081967] Write of size 4 at addr ffff88880b1510b4 by task kworker/26:1/1433361
    [70013.081968]
    [70013.082028] Workqueue: events aer_isr
    [70013.082053] Call Trace:
    [70013.082067]  dump_stack+0x8b/0xbb
    [70013.082086]  print_address_description+0x6a/0x270
    [70013.082102]  kasan_report+0x179/0x2c0
    [70013.082173]  mlx5_cmd_trigger_completions+0x1e2/0x4c0 [mlx5_core]
    [70013.082267]  mlx5_cmd_flush+0x80/0x180 [mlx5_core]
    [70013.082304]  mlx5_enter_error_state+0x106/0x1d0 [mlx5_core]
    [70013.082338]  mlx5_try_fast_unload+0x2ea/0x4d0 [mlx5_core]
    [70013.082377]  remove_one+0x200/0x2b0 [mlx5_core]
    [70013.082409]  pci_device_remove+0xf3/0x280
    [70013.082439]  device_release_driver_internal+0x1c3/0x470
    [70013.082453]  pci_stop_bus_device+0x109/0x160
    [70013.082468]  pci_stop_and_remove_bus_device+0xe/0x20
    [70013.082485]  pcie_do_fatal_recovery+0x167/0x550
    [70013.082493]  aer_isr+0x7d2/0x960
    [70013.082543]  process_one_work+0x65f/0x12d0
    [70013.082556]  worker_thread+0x87/0xb50
    [70013.082571]  kthread+0x2e9/0x3a0
    [70013.082592]  ret_from_fork+0x1f/0x40
    
    The logical relationship of this error is as follows:
    
                 aer_recover_work              |          ent->work
    -------------------------------------------+------------------------------
    aer_recover_work_func                      |
    |- pcie_do_recovery                        |
      |- report_error_detected                 |
        |- mlx5_pci_err_detected               |cmd_work_handler
          |- mlx5_enter_error_state            |  |- cmd_alloc_index
            |- enter_error_state               |    |- lock cmd->alloc_lock
              |- mlx5_cmd_flush                |    |- clear_bit
                |- mlx5_cmd_trigger_completions|    |- unlock cmd->alloc_lock
                  |- lock cmd->alloc_lock      |
                  |- vector = ~dev->cmd.vars.bitmask
                  |- for_each_set_bit          |
                    |- cmd_ent_get(cmd->ent_arr[i]) (UAF)
                  |- unlock cmd->alloc_lock    |  |- cmd->ent_arr[ent->idx]=ent
    
    The cmd->ent_arr[ent->idx] assignment and the bit clearing are not
    protected by the cmd->alloc_lock in cmd_work_handler().
    
    Fixes: 50b2412b7e78 ("net/mlx5: Avoid possible free of command entry while timeout comp handler")
    Reviewed-by: Moshe Shemesh <moshe@nvidia.com>
    Signed-off-by: Shifeng Li <lishifeng@sangfor.com.cn>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f3739647a7373d29a76f5d6f07aa27e5c4496591
Author: Shay Drory <shayd@nvidia.com>
Date:   Wed Jan 18 16:52:17 2023 +0200

    net/mlx5: Re-organize mlx5_cmd struct
    
    [ Upstream commit 58db72869a9f8e01910844ca145efc2ea91bbbf9 ]
    
    Downstream patch will split mlx5_cmd_init() to probe and reload
    routines. As a preparation, organize mlx5_cmd struct so that any
    field that will be used in the reload routine are grouped at new
    nested struct.
    
    Signed-off-by: Shay Drory <shayd@nvidia.com>
    Reviewed-by: Moshe Shemesh <moshe@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Stable-dep-of: 8f5100da56b3 ("net/mlx5e: Fix a race in command alloc flow")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 148ec770c63e5a338a5c7d2b27aaa1eb2bcb1c91
Author: Tariq Toukan <tariqt@nvidia.com>
Date:   Tue Aug 2 14:47:30 2022 +0300

    net/mlx5: Prevent high-rate FW commands from populating all slots
    
    [ Upstream commit 63fbae0a74c3e1df7c20c81e04353ced050d9887 ]
    
    Certain connection-based device-offload protocols (like TLS) use
    per-connection HW objects to track the state, maintain the context, and
    perform the offload properly. Some of these objects are created,
    modified, and destroyed via FW commands. Under high connection rate,
    this type of FW commands might continuously populate all slots of the FW
    command interface and throttle it, while starving other critical control
    FW commands.
    
    Limit these throttle commands to using only up to a portion (half) of
    the FW command interface slots. FW commands maximal rate is not hit, and
    the same high rate is still reached when applying this limitation.
    
    Signed-off-by: Tariq Toukan <tariqt@nvidia.com>
    Reviewed-by: Moshe Shemesh <moshe@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Stable-dep-of: 8f5100da56b3 ("net/mlx5e: Fix a race in command alloc flow")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bd6e091629103f1ceaedbd9d41f68e1c5b2731b9
Author: Tariq Toukan <tariqt@nvidia.com>
Date:   Thu Jan 5 09:45:24 2023 +0200

    net/mlx5: Introduce and use opcode getter in command interface
    
    [ Upstream commit 7cb5eb937231663d11f7817e366f6f86a142d6d3 ]
    
    Introduce an opcode getter in the FW command interface, and use it.
    Initialize the entry's opcode field early in cmd_alloc_ent() and use it
    when possible.
    
    Signed-off-by: Tariq Toukan <tariqt@nvidia.com>
    Reviewed-by: Moshe Shemesh <moshe@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Stable-dep-of: 8f5100da56b3 ("net/mlx5e: Fix a race in command alloc flow")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0f5de95fa266163a44c32bb7e5ad562725d04d3b
Author: Shifeng Li <lishifeng@sangfor.com.cn>
Date:   Thu Nov 30 01:46:56 2023 -0800

    net/mlx5e: Fix slab-out-of-bounds in mlx5_query_nic_vport_mac_list()
    
    [ Upstream commit ddb38ddff9c71026bad481b791a94d446ee37603 ]
    
    Out_sz that the size of out buffer is calculated using query_nic_vport
    _context_in structure when driver query the MAC list. However query_nic
    _vport_context_in structure is smaller than query_nic_vport_context_out.
    When allowed_list_size is greater than 96, calling ether_addr_copy() will
    trigger an slab-out-of-bounds.
    
    [ 1170.055866] BUG: KASAN: slab-out-of-bounds in mlx5_query_nic_vport_mac_list+0x481/0x4d0 [mlx5_core]
    [ 1170.055869] Read of size 4 at addr ffff88bdbc57d912 by task kworker/u128:1/461
    [ 1170.055870]
    [ 1170.055932] Workqueue: mlx5_esw_wq esw_vport_change_handler [mlx5_core]
    [ 1170.055936] Call Trace:
    [ 1170.055949]  dump_stack+0x8b/0xbb
    [ 1170.055958]  print_address_description+0x6a/0x270
    [ 1170.055961]  kasan_report+0x179/0x2c0
    [ 1170.056061]  mlx5_query_nic_vport_mac_list+0x481/0x4d0 [mlx5_core]
    [ 1170.056162]  esw_update_vport_addr_list+0x2c5/0xcd0 [mlx5_core]
    [ 1170.056257]  esw_vport_change_handle_locked+0xd08/0x1a20 [mlx5_core]
    [ 1170.056377]  esw_vport_change_handler+0x6b/0x90 [mlx5_core]
    [ 1170.056381]  process_one_work+0x65f/0x12d0
    [ 1170.056383]  worker_thread+0x87/0xb50
    [ 1170.056390]  kthread+0x2e9/0x3a0
    [ 1170.056394]  ret_from_fork+0x1f/0x40
    
    Fixes: e16aea2744ab ("net/mlx5: Introduce access functions to modify/query vport mac lists")
    Cc: Ding Hui <dinghui@sangfor.com.cn>
    Signed-off-by: Shifeng Li <lishifeng@sangfor.com.cn>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 31037cfceff81a855e0713c8ca99496544c3b544
Author: Vlad Buslov <vladbu@nvidia.com>
Date:   Tue Nov 21 13:52:28 2023 +0100

    Revert "net/mlx5e: fix double free of encap_header"
    
    [ Upstream commit 5d089684dc434a31e08d32f0530066d0025c52e4 ]
    
    This reverts commit 6f9b1a0731662648949a1c0587f6acb3b7f8acf1.
    
    This patch is causing a null ptr issue, the proper fix is in the next
    patch.
    
    Fixes: 6f9b1a073166 ("net/mlx5e: fix double free of encap_header")
    Signed-off-by: Vlad Buslov <vladbu@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8a84413505a68f54577e2dca38e6559742accafb
Author: Vlad Buslov <vladbu@nvidia.com>
Date:   Tue Nov 21 13:51:52 2023 +0100

    Revert "net/mlx5e: fix double free of encap_header in update funcs"
    
    [ Upstream commit 66ca8d4deca09bce3fc7bcf8ea7997fa1a51c33c ]
    
    This reverts commit 3a4aa3cb83563df942be49d145ee3b7ddf17d6bb.
    
    This patch is causing a null ptr issue, the proper fix is in the next
    patch.
    
    Fixes: 3a4aa3cb8356 ("net/mlx5e: fix double free of encap_header in update funcs")
    Signed-off-by: Vlad Buslov <vladbu@nvidia.com>
    Signed-off-by: Saeed Mahameed <saeedm@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2f635af7d6b4947de76edc8f65892f5e2b8d3fd7
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Mon Dec 11 09:05:31 2023 +0200

    wifi: mac80211: mesh_plink: fix matches_local logic
    
    [ Upstream commit 8c386b166e2517cf3a123018e77941ec22625d0f ]
    
    During refactoring the "else" here got lost, add it back.
    
    Fixes: c99a89edb106 ("mac80211: factor out plink event gathering")
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Miri Korenblit <miriam.rachel.korenblit@intel.com>
    Link: https://msgid.link/20231211085121.795480fa0e0b.I017d501196a5bbdcd9afd33338d342d6fe1edd79@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7a07af00aa887023bc448ecd201aaf60cf8aeac6
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Mon Dec 11 09:05:32 2023 +0200

    wifi: mac80211: mesh: check element parsing succeeded
    
    [ Upstream commit 1fc4a3eec50d726f4663ad3c0bb0158354d6647a ]
    
    ieee802_11_parse_elems() can return NULL, so we must
    check for the return value.
    
    Fixes: 5d24828d05f3 ("mac80211: always allocate struct ieee802_11_elems")
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Miri Korenblit <miriam.rachel.korenblit@intel.com>
    Link: https://msgid.link/20231211085121.93dea364f3d3.Ie87781c6c48979fb25a744b90af4a33dc2d83a28@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 40ba7f9ab82aeb395633261d74d84ade0d19f8ec
Author: Edward Adam Davis <eadavis@qq.com>
Date:   Wed Nov 29 20:17:47 2023 +0800

    wifi: mac80211: check if the existing link config remains unchanged
    
    [ Upstream commit c1393c132b906fbdf91f6d1c9eb2ef7a00cce64e ]
    
    [Syz report]
    WARNING: CPU: 1 PID: 5067 at net/mac80211/rate.c:48 rate_control_rate_init+0x540/0x690 net/mac80211/rate.c:48
    Modules linked in:
    CPU: 1 PID: 5067 Comm: syz-executor413 Not tainted 6.7.0-rc3-syzkaller-00014-gdf60cee26a2e #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 11/10/2023
    RIP: 0010:rate_control_rate_init+0x540/0x690 net/mac80211/rate.c:48
    Code: 48 c7 c2 00 46 0c 8c be 08 03 00 00 48 c7 c7 c0 45 0c 8c c6 05 70 79 0b 05 01 e8 1b a0 6f f7 e9 e0 fd ff ff e8 61 b3 8f f7 90 <0f> 0b 90 e9 36 ff ff ff e8 53 b3 8f f7 e8 5e 0b 78 f7 31 ff 89 c3
    RSP: 0018:ffffc90003c57248 EFLAGS: 00010293
    RAX: 0000000000000000 RBX: ffff888016bc4000 RCX: ffffffff89f7d519
    RDX: ffff888076d43b80 RSI: ffffffff89f7d6df RDI: 0000000000000005
    RBP: ffff88801daaae20 R08: 0000000000000005 R09: 0000000000000000
    R10: 0000000000000001 R11: 0000000000000002 R12: 0000000000000001
    R13: 0000000000000000 R14: ffff888020030e20 R15: ffff888078f08000
    FS:  0000555556b94380(0000) GS:ffff8880b9900000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00000000005fdeb8 CR3: 0000000076d22000 CR4: 00000000003506f0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     <TASK>
     sta_apply_auth_flags.constprop.0+0x4b7/0x510 net/mac80211/cfg.c:1674
     sta_apply_parameters+0xaf1/0x16c0 net/mac80211/cfg.c:2002
     ieee80211_add_station+0x3fa/0x6c0 net/mac80211/cfg.c:2068
     rdev_add_station net/wireless/rdev-ops.h:201 [inline]
     nl80211_new_station+0x13ba/0x1a70 net/wireless/nl80211.c:7603
     genl_family_rcv_msg_doit+0x1fc/0x2e0 net/netlink/genetlink.c:972
     genl_family_rcv_msg net/netlink/genetlink.c:1052 [inline]
     genl_rcv_msg+0x561/0x800 net/netlink/genetlink.c:1067
     netlink_rcv_skb+0x16b/0x440 net/netlink/af_netlink.c:2545
     genl_rcv+0x28/0x40 net/netlink/genetlink.c:1076
     netlink_unicast_kernel net/netlink/af_netlink.c:1342 [inline]
     netlink_unicast+0x53b/0x810 net/netlink/af_netlink.c:1368
     netlink_sendmsg+0x93c/0xe40 net/netlink/af_netlink.c:1910
     sock_sendmsg_nosec net/socket.c:730 [inline]
     __sock_sendmsg+0xd5/0x180 net/socket.c:745
     ____sys_sendmsg+0x6ac/0x940 net/socket.c:2584
     ___sys_sendmsg+0x135/0x1d0 net/socket.c:2638
     __sys_sendmsg+0x117/0x1e0 net/socket.c:2667
     do_syscall_x64 arch/x86/entry/common.c:51 [inline]
     do_syscall_64+0x40/0x110 arch/x86/entry/common.c:82
     entry_SYSCALL_64_after_hwframe+0x63/0x6b
    
    [Analysis]
    It is inappropriate to make a link configuration change judgment on an
    non-existent and non new link.
    
    [Fix]
    Quickly exit when there is a existent link and the link configuration has not
    changed.
    
    Fixes: b303835dabe0 ("wifi: mac80211: accept STA changes without link changes")
    Reported-and-tested-by: syzbot+62d7eef57b09bfebcd84@syzkaller.appspotmail.com
    Signed-off-by: Edward Adam Davis <eadavis@qq.com>
    Link: https://msgid.link/tencent_DE67FF86DB92ED465489A36ECD2EDDCC8C06@qq.com
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e90da1c7c6e7d074bb3f5ccf6e7c37e63a1158f3
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Fri Dec 8 18:32:02 2023 +0200

    wifi: iwlwifi: pcie: add another missing bh-disable for rxq->lock
    
    [ Upstream commit a4754182dc936b97ec7e9f6b08cdf7ed97ef9069 ]
    
    Evidently I had only looked at all the ones in rx.c, and missed this.
    Add bh-disable to this use of the rxq->lock as well.
    
    Fixes: 25edc8f259c7 ("iwlwifi: pcie: properly implement NAPI")
    Reported-by: Brian Norris <briannorris@chromium.org>
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Miri Korenblit <miriam.rachel.korenblit@intel.com>
    Link: https://msgid.link/20231208183100.e79ad3dae649.I8f19713c4383707f8be7fc20ff5cc1ecf12429bb@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 912652366f9eeaa22021f24e7c1223820448e789
Author: Heiko Carstens <hca@linux.ibm.com>
Date:   Fri Dec 8 15:03:15 2023 +0100

    s390/vx: fix save/restore of fpu kernel context
    
    [ Upstream commit e6b2dab41888332bf83f592131e7ea07756770a4 ]
    
    The KERNEL_FPR mask only contains a flag for the first eight vector
    registers. However floating point registers overlay parts of the first
    sixteen vector registers.
    
    This could lead to vector register corruption if a kernel fpu context uses
    any of the vector registers 8 to 15 and is interrupted or calls a
    KERNEL_FPR context. If that context uses also vector registers 8 to 15,
    their contents will be corrupted on return.
    
    Luckily this is currently not a real bug, since the kernel has only one
    KERNEL_FPR user with s390_adjust_jiffies() and it is only using floating
    point registers 0 to 2.
    
    Fix this by using the correct bits for KERNEL_FPR.
    
    Fixes: 7f79695cc1b6 ("s390/fpu: improve kernel_fpu_[begin|end]")
    Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
    Reviewed-by: Hendrik Brueckner <brueckner@linux.ibm.com>
    Signed-off-by: Alexander Gordeev <agordeev@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0a6e700c3d7b162437cbf56b1cff527f1efe2a0f
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Wed Nov 29 17:55:33 2023 +0100

    reset: Fix crash when freeing non-existent optional resets
    
    [ Upstream commit 4a6756f56bcf8e64c87144a626ce53aea4899c0e ]
    
    When obtaining one or more optional resets, non-existent resets are
    stored as NULL pointers, and all related error and cleanup paths need to
    take this into account.
    
    Currently only reset_control_put() and reset_control_bulk_put()
    get this right.  All of __reset_control_bulk_get(),
    of_reset_control_array_get(), and reset_control_array_put() lack the
    proper checking, causing NULL pointer dereferences on failure or
    release.
    
    Fix this by moving the existing check from reset_control_bulk_put() to
    __reset_control_put_internal(), so it applies to all callers.
    The double check in reset_control_put() doesn't hurt.
    
    Fixes: 17c82e206d2a3cd8 ("reset: Add APIs to manage array of resets")
    Fixes: 48d71395896d54ee ("reset: Add reset_control_bulk API")
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Link: https://lore.kernel.org/r/2440edae7ca8534628cdbaf559ded288f2998178.1701276806.git.geert+renesas@glider.be
    Signed-off-by: Philipp Zabel <p.zabel@pengutronix.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 930a61fd795d3435293623886569257fdc09268b
Author: Kunwu Chan <chentao@kylinos.cn>
Date:   Thu Nov 23 22:52:37 2023 +0800

    ARM: OMAP2+: Fix null pointer dereference and memory leak in omap_soc_device_init
    
    [ Upstream commit c72b9c33ef9695ad7ce7a6eb39a9df8a01b70796 ]
    
    kasprintf() returns a pointer to dynamically allocated memory which can
    be NULL upon failure. When 'soc_dev_attr->family' is NULL,it'll trigger
    the null pointer dereference issue, such as in 'soc_info_show'.
    
    And when 'soc_device_register' fails, it's necessary to release
    'soc_dev_attr->family' to avoid memory leaks.
    
    Fixes: 6770b2114325 ("ARM: OMAP2+: Export SoC information to userspace")
    Signed-off-by: Kunwu Chan <chentao@kylinos.cn>
    Message-ID: <20231123145237.609442-1-chentao@kylinos.cn>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 228a00a77d506b062bc6e75d4c52a556bf6e351e
Author: Andrew Davis <afd@ti.com>
Date:   Mon Nov 13 12:16:04 2023 -0600

    ARM: dts: dra7: Fix DRA7 L3 NoC node register size
    
    [ Upstream commit 1e5caee2ba8f1426e8098afb4ca38dc40a0ca71b ]
    
    This node can access any part of the L3 configuration registers space,
    including CLK1 and CLK2 which are 0x800000 offset. Restore this area
    size to include these areas.
    
    Fixes: 7f2659ce657e ("ARM: dts: Move dra7 l3 noc to a separate node")
    Signed-off-by: Andrew Davis <afd@ti.com>
    Message-ID: <20231113181604.546444-1-afd@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 913463f8e6cd8b0567c44d7eef350b9592a369dd
Author: Hamza Mahfooz <hamza.mahfooz@amd.com>
Date:   Tue Dec 5 14:55:04 2023 -0500

    drm/amd/display: fix hw rotated modes when PSR-SU is enabled
    
    [ Upstream commit f528ee145bd0076cd0ed7e7b2d435893e6329e98 ]
    
    We currently don't support dirty rectangles on hardware rotated modes.
    So, if a user is using hardware rotated modes with PSR-SU enabled,
    use PSR-SU FFU for all rotated planes (including cursor planes).
    
    Cc: stable@vger.kernel.org
    Fixes: 30ebe41582d1 ("drm/amd/display: add FB_DAMAGE_CLIPS support")
    Reported-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Closes: https://gitlab.freedesktop.org/drm/amd/-/issues/2952
    Tested-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Tested-by: Bin Li <binli@gnome.org>
    Reviewed-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Hamza Mahfooz <hamza.mahfooz@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a4f48f77bbe7bbb0ad5b4d16449d917eea2ea8c4
Author: Mario Limonciello <mario.limonciello@amd.com>
Date:   Sat Dec 2 21:24:30 2023 -0600

    HID: i2c-hid: Add IDEA5002 to i2c_hid_acpi_blacklist[]
    
    [ Upstream commit a9f68ffe1170ca4bc17ab29067d806a354a026e0 ]
    
    Users have reported problems with recent Lenovo laptops that contain
    an IDEA5002 I2C HID device. Reports include fans turning on and
    running even at idle and spurious wakeups from suspend.
    
    Presumably in the Windows ecosystem there is an application that
    uses the HID device. Maybe that puts it into a lower power state so
    it doesn't cause spurious events.
    
    This device doesn't serve any functional purpose in Linux as nothing
    interacts with it so blacklist it from being probed. This will
    prevent the GPIO driver from setting up the GPIO and the spurious
    interrupts and wake events will not occur.
    
    Cc: stable@vger.kernel.org # 6.1
    Reported-and-tested-by: Marcus Aram <marcus+oss@oxar.nl>
    Reported-and-tested-by: Mark Herbert <mark.herbert42@gmail.com>
    Closes: https://gitlab.freedesktop.org/drm/amd/-/issues/2812
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 413bef367ba66c62547ebc159ddecc04f34c849a
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Mon Jan 16 17:46:21 2023 +0200

    HID: i2c-hid: acpi: Unify ACPI ID tables format
    
    [ Upstream commit 4122abfed2193e752485282370abf5c419f05cad ]
    
    Unify ACPI ID tables format by:
    - surrounding HID by spaces
    - dropping unnecessary driver_data assignment to 0
    - dropping comma at the terminator entry
    
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Stable-dep-of: a9f68ffe1170 ("HID: i2c-hid: Add IDEA5002 to i2c_hid_acpi_blacklist[]")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 57a6b0a464eb322bd62a78469d251f1d428c5ebb
Author: Jiri Olsa <jolsa@kernel.org>
Date:   Wed Dec 6 09:30:40 2023 +0100

    bpf: Fix prog_array_map_poke_run map poke update
    
    commit 4b7de801606e504e69689df71475d27e35336fb3 upstream.
    
    Lee pointed out issue found by syscaller [0] hitting BUG in prog array
    map poke update in prog_array_map_poke_run function due to error value
    returned from bpf_arch_text_poke function.
    
    There's race window where bpf_arch_text_poke can fail due to missing
    bpf program kallsym symbols, which is accounted for with check for
    -EINVAL in that BUG_ON call.
    
    The problem is that in such case we won't update the tail call jump
    and cause imbalance for the next tail call update check which will
    fail with -EBUSY in bpf_arch_text_poke.
    
    I'm hitting following race during the program load:
    
      CPU 0                             CPU 1
    
      bpf_prog_load
        bpf_check
          do_misc_fixups
            prog_array_map_poke_track
    
                                        map_update_elem
                                          bpf_fd_array_map_update_elem
                                            prog_array_map_poke_run
    
                                              bpf_arch_text_poke returns -EINVAL
    
        bpf_prog_kallsyms_add
    
    After bpf_arch_text_poke (CPU 1) fails to update the tail call jump, the next
    poke update fails on expected jump instruction check in bpf_arch_text_poke
    with -EBUSY and triggers the BUG_ON in prog_array_map_poke_run.
    
    Similar race exists on the program unload.
    
    Fixing this by moving the update to bpf_arch_poke_desc_update function which
    makes sure we call __bpf_arch_text_poke that skips the bpf address check.
    
    Each architecture has slightly different approach wrt looking up bpf address
    in bpf_arch_text_poke, so instead of splitting the function or adding new
    'checkip' argument in previous version, it seems best to move the whole
    map_poke_run update as arch specific code.
    
      [0] https://syzkaller.appspot.com/bug?extid=97a4fe20470e9bc30810
    
    Fixes: ebf7d1f508a7 ("bpf, x64: rework pro/epilogue and tailcall handling in JIT")
    Reported-by: syzbot+97a4fe20470e9bc30810@syzkaller.appspotmail.com
    Signed-off-by: Jiri Olsa <jolsa@kernel.org>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Acked-by: Yonghong Song <yonghong.song@linux.dev>
    Cc: Lee Jones <lee@kernel.org>
    Cc: Maciej Fijalkowski <maciej.fijalkowski@intel.com>
    Link: https://lore.kernel.org/bpf/20231206083041.1306660-2-jolsa@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4768f82272a7fd76ab72d4c65c8cbd6494e37937
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Oct 16 22:08:38 2023 +0200

    kasan: disable kasan_non_canonical_hook() for HW tags
    
    commit 17c17567fe510857b18fe01b7a88027600e76ac6 upstream.
    
    On arm64, building with CONFIG_KASAN_HW_TAGS now causes a compile-time
    error:
    
    mm/kasan/report.c: In function 'kasan_non_canonical_hook':
    mm/kasan/report.c:637:20: error: 'KASAN_SHADOW_OFFSET' undeclared (first use in this function)
      637 |         if (addr < KASAN_SHADOW_OFFSET)
          |                    ^~~~~~~~~~~~~~~~~~~
    mm/kasan/report.c:637:20: note: each undeclared identifier is reported only once for each function it appears in
    mm/kasan/report.c:640:77: error: expected expression before ';' token
      640 |         orig_addr = (addr - KASAN_SHADOW_OFFSET) << KASAN_SHADOW_SCALE_SHIFT;
    
    This was caused by removing the dependency on CONFIG_KASAN_INLINE that
    used to prevent this from happening. Use the more specific dependency
    on KASAN_SW_TAGS || KASAN_GENERIC to only ignore the function for hwasan
    mode.
    
    Link: https://lkml.kernel.org/r/20231016200925.984439-1-arnd@kernel.org
    Fixes: 12ec6a919b0f ("kasan: print the original fault addr when access invalid shadow")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Cc: Alexander Potapenko <glider@google.com>
    Cc: Andrey Konovalov <andreyknvl@gmail.com>
    Cc: Andrey Ryabinin <ryabinin.a.a@gmail.com>
    Cc: Dmitry Vyukov <dvyukov@google.com>
    Cc: Haibo Li <haibo.li@mediatek.com>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: Vincenzo Frascino <vincenzo.frascino@arm.com>
    Cc: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
    Cc: Matthias Brugger <matthias.bgg@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Amit Pundir <amit.pundir@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 80b73c056d2076d12f9e50c753bb440fc79f30c9
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Aug 16 18:10:55 2023 +0200

    Linux 4.14.323
    
    Link: https://lore.kernel.org/r/20230813211702.980427106@linuxfoundation.org
    Tested-by: Thierry Reding <treding@nvidia.com>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Harshit Mogalapalli <harshit.m.mogalapalli@oracle.com>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e343375e00b297286ee97aa585ab453583157c3a
Author: Masahiro Yamada <masahiroy@kernel.org>
Date:   Sat Jul 29 16:42:23 2023 +0900

    alpha: remove __init annotation from exported page_is_ram()
    
    commit 6ccbd7fd474674654019a20177c943359469103a upstream.
    
    EXPORT_SYMBOL and __init is a bad combination because the .init.text
    section is freed up after the initialization.
    
    Commit c5a130325f13 ("ACPI/APEI: Add parameter check before error
    injection") exported page_is_ram(), hence the __init annotation should
    be removed.
    
    This fixes the modpost warning in ARCH=alpha builds:
    
      WARNING: modpost: vmlinux: page_is_ram: EXPORT_SYMBOL used for init symbol. Remove __init or EXPORT_SYMBOL.
    
    Fixes: c5a130325f13 ("ACPI/APEI: Add parameter check before error injection")
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Reviewed-by: Randy Dunlap <rdunlap@infradead.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 63956ad27a6882f01fea7c69e17823090f4c7b3f
Author: Zhu Wang <wangzhu9@huawei.com>
Date:   Thu Aug 3 10:02:30 2023 +0800

    scsi: core: Fix possible memory leak if device_add() fails
    
    commit 04b5b5cb0136ce970333a9c6cec7e46adba1ea3a upstream.
    
    If device_add() returns error, the name allocated by dev_set_name() needs
    be freed. As the comment of device_add() says, put_device() should be used
    to decrease the reference count in the error path. So fix this by calling
    put_device(), then the name can be freed in kobject_cleanp().
    
    Fixes: ee959b00c335 ("SCSI: convert struct class_device to struct device")
    Signed-off-by: Zhu Wang <wangzhu9@huawei.com>
    Link: https://lore.kernel.org/r/20230803020230.226903-1-wangzhu9@huawei.com
    Reviewed-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 789275f7c0544374d40bc8d9c81f96751a41df45
Author: Zhu Wang <wangzhu9@huawei.com>
Date:   Tue Aug 1 19:14:21 2023 +0800

    scsi: snic: Fix possible memory leak if device_add() fails
    
    commit 41320b18a0e0dfb236dba4edb9be12dba1878156 upstream.
    
    If device_add() returns error, the name allocated by dev_set_name() needs
    be freed. As the comment of device_add() says, put_device() should be used
    to give up the reference in the error path. So fix this by calling
    put_device(), then the name can be freed in kobject_cleanp().
    
    Fixes: c8806b6c9e82 ("snic: driver for Cisco SCSI HBA")
    Signed-off-by: Zhu Wang <wangzhu9@huawei.com>
    Acked-by: Narsimhulu Musini <nmusini@cisco.com>
    Link: https://lore.kernel.org/r/20230801111421.63651-1-wangzhu9@huawei.com
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d76618133815999ff5bcf1ac166803f91c39df57
Author: Alexandra Diupina <adiupina@astralinux.ru>
Date:   Fri Jul 28 15:35:21 2023 +0300

    scsi: 53c700: Check that command slot is not NULL
    
    commit 8366d1f1249a0d0bba41d0bd1298d63e5d34c7f7 upstream.
    
    Add a check for the command slot value to avoid dereferencing a NULL
    pointer.
    
    Found by Linux Verification Center (linuxtesting.org) with SVACE.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Co-developed-by: Vladimir Telezhnikov <vtelezhnikov@astralinux.ru>
    Signed-off-by: Vladimir Telezhnikov <vtelezhnikov@astralinux.ru>
    Signed-off-by: Alexandra Diupina <adiupina@astralinux.ru>
    Link: https://lore.kernel.org/r/20230728123521.18293-1-adiupina@astralinux.ru
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cd87f4df9865a53807001ed12c0f0420b14ececd
Author: Michael Kelley <mikelley@microsoft.com>
Date:   Fri Jul 28 21:59:24 2023 -0700

    scsi: storvsc: Fix handling of virtual Fibre Channel timeouts
    
    commit 175544ad48cbf56affeef2a679c6a4d4fb1e2881 upstream.
    
    Hyper-V provides the ability to connect Fibre Channel LUNs to the host
    system and present them in a guest VM as a SCSI device. I/O to the vFC
    device is handled by the storvsc driver. The storvsc driver includes a
    partial integration with the FC transport implemented in the generic
    portion of the Linux SCSI subsystem so that FC attributes can be displayed
    in /sys.  However, the partial integration means that some aspects of vFC
    don't work properly. Unfortunately, a full and correct integration isn't
    practical because of limitations in what Hyper-V provides to the guest.
    
    In particular, in the context of Hyper-V storvsc, the FC transport timeout
    function fc_eh_timed_out() causes a kernel panic because it can't find the
    rport and dereferences a NULL pointer. The original patch that added the
    call from storvsc_eh_timed_out() to fc_eh_timed_out() is faulty in this
    regard.
    
    In many cases a timeout is due to a transient condition, so the situation
    can be improved by just continuing to wait like with other I/O requests
    issued by storvsc, and avoiding the guaranteed panic. For a permanent
    failure, continuing to wait may result in a hung thread instead of a panic,
    which again may be better.
    
    So fix the panic by removing the storvsc call to fc_eh_timed_out().  This
    allows storvsc to keep waiting for a response.  The change has been tested
    by users who experienced a panic in fc_eh_timed_out() due to transient
    timeouts, and it solves their problem.
    
    In the future we may want to deprecate the vFC functionality in storvsc
    since it can't be fully fixed. But it has current users for whom it is
    working well enough, so it should probably stay for a while longer.
    
    Fixes: 3930d7309807 ("scsi: storvsc: use default I/O timeout handler for FC devices")
    Cc: stable@vger.kernel.org
    Signed-off-by: Michael Kelley <mikelley@microsoft.com>
    Link: https://lore.kernel.org/r/1690606764-79669-1-git-send-email-mikelley@microsoft.com
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8d187c424e15104f1bd7ba5c4b6b15984d5b477f
Author: Tony Battersby <tonyb@cybernetics.com>
Date:   Mon Jul 24 14:25:40 2023 -0400

    scsi: core: Fix legacy /proc parsing buffer overflow
    
    commit 9426d3cef5000824e5f24f80ed5f42fb935f2488 upstream.
    
    (lightly modified commit message mostly by Linus Torvalds)
    
    The parsing code for /proc/scsi/scsi is disgusting and broken.  We should
    have just used 'sscanf()' or something simple like that, but the logic may
    actually predate our kernel sscanf library routine for all I know.  It
    certainly predates both git and BK histories.
    
    And we can't change it to be something sane like that now, because the
    string matching at the start is done case-insensitively, and the separator
    parsing between numbers isn't done at all, so *any* separator will work,
    including a possible terminating NUL character.
    
    This interface is root-only, and entirely for legacy use, so there is
    absolutely no point in trying to tighten up the parsing.  Because any
    separator has traditionally worked, it's entirely possible that people have
    used random characters rather than the suggested space.
    
    So don't bother to try to pretty it up, and let's just make a minimal patch
    that can be back-ported and we can forget about this whole sorry thing for
    another two decades.
    
    Just make it at least not read past the end of the supplied data.
    
    Link: https://lore.kernel.org/linux-scsi/b570f5fe-cb7c-863a-6ed9-f6774c219b88@cybernetics.com/
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Martin K Petersen <martin.petersen@oracle.com>
    Cc: James Bottomley <jejb@linux.ibm.com>
    Cc: Willy Tarreau <w@1wt.eu>
    Cc: stable@kernel.org
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Tony Battersby <tonyb@cybernetics.com>
    Signed-off-by: Martin K Petersen <martin.petersen@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3f4d342620d1970d61b51418424053250e5bf659
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Sun Aug 13 00:09:41 2023 +0200

    netfilter: nf_tables: report use refcount overflow
    
    commit 1689f25924ada8fe14a4a82c38925d04994c7142 upstream.
    
    Overflow use refcount checks are not complete.
    
    Add helper function to deal with object reference counter tracking.
    Report -EMFILE in case UINT_MAX is reached.
    
    nft_use_dec() splats in case that reference counter underflows,
    which should not ever happen.
    
    Add nft_use_inc_restore() and nft_use_dec_restore() which are used
    to restore reference counter from error and abort paths.
    
    Use u32 in nft_flowtable and nft_object since helper functions cannot
    work on bitfields.
    
    Remove the few early incomplete checks now that the helper functions
    are in place and used to check for refcount overflow.
    
    Fixes: 96518518cc41 ("netfilter: add nftables")
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a904e3d7a165b681a02ed670b0b3558713c06afc
Author: Christoph Hellwig <hch@lst.de>
Date:   Mon Jul 24 06:26:53 2023 -0700

    btrfs: don't stop integrity writeback too early
    
    commit effa24f689ce0948f68c754991a445a8d697d3a8 upstream.
    
    extent_write_cache_pages stops writing pages as soon as nr_to_write hits
    zero.  That is the right thing for opportunistic writeback, but incorrect
    for data integrity writeback, which needs to ensure that no dirty pages
    are left in the range.  Thus only stop the writeback for WB_SYNC_NONE
    if nr_to_write hits 0.
    
    This is a port of write_cache_pages changes in commit 05fe478dd04e
    ("mm: write_cache_pages integrity fix").
    
    Note that I've only trigger the problem with other changes to the btrfs
    writeback code, but this condition seems worthwhile fixing anyway.
    
    CC: stable@vger.kernel.org # 4.14+
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: David Sterba <dsterba@suse.com>
    [ updated comment ]
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5e72f33ddfdb69cb21c1b59d31bbd3498d31b14a
Author: Douglas Miller <doug.miller@cornelisnetworks.com>
Date:   Wed Aug 2 13:32:41 2023 -0400

    IB/hfi1: Fix possible panic during hotplug remove
    
    commit 4fdfaef71fced490835145631a795497646f4555 upstream.
    
    During hotplug remove it is possible that the update counters work
    might be pending, and may run after memory has been freed.
    Cancel the update counters work before freeing memory.
    
    Fixes: 7724105686e7 ("IB/hfi1: add driver files")
    Signed-off-by: Douglas Miller <doug.miller@cornelisnetworks.com>
    Signed-off-by: Dennis Dalessandro <dennis.dalessandro@cornelisnetworks.com>
    Link: https://lore.kernel.org/r/169099756100.3927190.15284930454106475280.stgit@awfm-02.cornelisnetworks.com
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cb1ded0c577aaa502b15cbf4f6e479401000741e
Author: Andrew Kanner <andrew.kanner@gmail.com>
Date:   Thu Aug 3 20:59:48 2023 +0200

    drivers: net: prevent tun_build_skb() to exceed the packet size limit
    
    commit 59eeb232940515590de513b997539ef495faca9a upstream.
    
    Using the syzkaller repro with reduced packet size it was discovered
    that XDP_PACKET_HEADROOM is not checked in tun_can_build_skb(),
    although pad may be incremented in tun_build_skb(). This may end up
    with exceeding the PAGE_SIZE limit in tun_build_skb().
    
    Jason Wang <jasowang@redhat.com> proposed to count XDP_PACKET_HEADROOM
    always (e.g. without rcu_access_pointer(tun->xdp_prog)) in
    tun_can_build_skb() since there's a window during which XDP program
    might be attached between tun_can_build_skb() and tun_build_skb().
    
    Fixes: 7df13219d757 ("tun: reserve extra headroom only when XDP is set")
    Link: https://syzkaller.appspot.com/bug?extid=f817490f5bd20541b90a
    Signed-off-by: Andrew Kanner <andrew.kanner@gmail.com>
    Link: https://lore.kernel.org/r/20230803185947.2379988-1-andrew.kanner@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 162fa1e3cfb62aa780d7c40c8cccb6c2f8bef7c1
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Aug 3 16:30:21 2023 +0000

    dccp: fix data-race around dp->dccps_mss_cache
    
    commit a47e598fbd8617967e49d85c49c22f9fc642704c upstream.
    
    dccp_sendmsg() reads dp->dccps_mss_cache before locking the socket.
    Same thing in do_dccp_getsockopt().
    
    Add READ_ONCE()/WRITE_ONCE() annotations,
    and change dccp_sendmsg() to check again dccps_mss_cache
    after socket is locked.
    
    Fixes: 7c657876b63c ("[DCCP]: Initial implementation")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/20230803163021.2958262-1-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5e54faf9295971ea6132b917e9c7faa3384c8ed8
Author: Ziyang Xuan <william.xuanziyang@huawei.com>
Date:   Wed Aug 2 19:43:20 2023 +0800

    bonding: Fix incorrect deletion of ETH_P_8021AD protocol vid from slaves
    
    commit 01f4fd27087078c90a0e22860d1dfa2cd0510791 upstream.
    
    BUG_ON(!vlan_info) is triggered in unregister_vlan_dev() with
    following testcase:
    
      # ip netns add ns1
      # ip netns exec ns1 ip link add bond0 type bond mode 0
      # ip netns exec ns1 ip link add bond_slave_1 type veth peer veth2
      # ip netns exec ns1 ip link set bond_slave_1 master bond0
      # ip netns exec ns1 ip link add link bond_slave_1 name vlan10 type vlan id 10 protocol 802.1ad
      # ip netns exec ns1 ip link add link bond0 name bond0_vlan10 type vlan id 10 protocol 802.1ad
      # ip netns exec ns1 ip link set bond_slave_1 nomaster
      # ip netns del ns1
    
    The logical analysis of the problem is as follows:
    
    1. create ETH_P_8021AD protocol vlan10 for bond_slave_1:
    register_vlan_dev()
      vlan_vid_add()
        vlan_info_alloc()
        __vlan_vid_add() // add [ETH_P_8021AD, 10] vid to bond_slave_1
    
    2. create ETH_P_8021AD protocol bond0_vlan10 for bond0:
    register_vlan_dev()
      vlan_vid_add()
        __vlan_vid_add()
          vlan_add_rx_filter_info()
              if (!vlan_hw_filter_capable(dev, proto)) // condition established because bond0 without NETIF_F_HW_VLAN_STAG_FILTER
                  return 0;
    
              if (netif_device_present(dev))
                  return dev->netdev_ops->ndo_vlan_rx_add_vid(dev, proto, vid); // will be never called
                  // The slaves of bond0 will not refer to the [ETH_P_8021AD, 10] vid.
    
    3. detach bond_slave_1 from bond0:
    __bond_release_one()
      vlan_vids_del_by_dev()
        list_for_each_entry(vid_info, &vlan_info->vid_list, list)
            vlan_vid_del(dev, vid_info->proto, vid_info->vid);
            // bond_slave_1 [ETH_P_8021AD, 10] vid will be deleted.
            // bond_slave_1->vlan_info will be assigned NULL.
    
    4. delete vlan10 during delete ns1:
    default_device_exit_batch()
      dev->rtnl_link_ops->dellink() // unregister_vlan_dev() for vlan10
        vlan_info = rtnl_dereference(real_dev->vlan_info); // real_dev of vlan10 is bond_slave_1
            BUG_ON(!vlan_info); // bond_slave_1->vlan_info is NULL now, bug is triggered!!!
    
    Add S-VLAN tag related features support to bond driver. So the bond driver
    will always propagate the VLAN info to its slaves.
    
    Fixes: 8ad227ff89a7 ("net: vlan: add 802.1ad support")
    Suggested-by: Ido Schimmel <idosch@idosch.org>
    Signed-off-by: Ziyang Xuan <william.xuanziyang@huawei.com>
    Reviewed-by: Ido Schimmel <idosch@nvidia.com>
    Link: https://lore.kernel.org/r/20230802114320.4156068-1-william.xuanziyang@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8fad4df94b79f45a65b5771f9b06dbbf4c9af044
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Aug 3 14:56:00 2023 +0000

    net/packet: annotate data-races around tp->status
    
    commit 8a9896177784063d01068293caea3f74f6830ff6 upstream.
    
    Another syzbot report [1] is about tp->status lockless reads
    from __packet_get_status()
    
    [1]
    BUG: KCSAN: data-race in __packet_rcv_has_room / __packet_set_status
    
    write to 0xffff888117d7c080 of 8 bytes by interrupt on cpu 0:
    __packet_set_status+0x78/0xa0 net/packet/af_packet.c:407
    tpacket_rcv+0x18bb/0x1a60 net/packet/af_packet.c:2483
    deliver_skb net/core/dev.c:2173 [inline]
    __netif_receive_skb_core+0x408/0x1e80 net/core/dev.c:5337
    __netif_receive_skb_one_core net/core/dev.c:5491 [inline]
    __netif_receive_skb+0x57/0x1b0 net/core/dev.c:5607
    process_backlog+0x21f/0x380 net/core/dev.c:5935
    __napi_poll+0x60/0x3b0 net/core/dev.c:6498
    napi_poll net/core/dev.c:6565 [inline]
    net_rx_action+0x32b/0x750 net/core/dev.c:6698
    __do_softirq+0xc1/0x265 kernel/softirq.c:571
    invoke_softirq kernel/softirq.c:445 [inline]
    __irq_exit_rcu+0x57/0xa0 kernel/softirq.c:650
    sysvec_apic_timer_interrupt+0x6d/0x80 arch/x86/kernel/apic/apic.c:1106
    asm_sysvec_apic_timer_interrupt+0x1a/0x20 arch/x86/include/asm/idtentry.h:645
    smpboot_thread_fn+0x33c/0x4a0 kernel/smpboot.c:112
    kthread+0x1d7/0x210 kernel/kthread.c:379
    ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:308
    
    read to 0xffff888117d7c080 of 8 bytes by interrupt on cpu 1:
    __packet_get_status net/packet/af_packet.c:436 [inline]
    packet_lookup_frame net/packet/af_packet.c:524 [inline]
    __tpacket_has_room net/packet/af_packet.c:1255 [inline]
    __packet_rcv_has_room+0x3f9/0x450 net/packet/af_packet.c:1298
    tpacket_rcv+0x275/0x1a60 net/packet/af_packet.c:2285
    deliver_skb net/core/dev.c:2173 [inline]
    dev_queue_xmit_nit+0x38a/0x5e0 net/core/dev.c:2243
    xmit_one net/core/dev.c:3574 [inline]
    dev_hard_start_xmit+0xcf/0x3f0 net/core/dev.c:3594
    __dev_queue_xmit+0xefb/0x1d10 net/core/dev.c:4244
    dev_queue_xmit include/linux/netdevice.h:3088 [inline]
    can_send+0x4eb/0x5d0 net/can/af_can.c:276
    bcm_can_tx+0x314/0x410 net/can/bcm.c:302
    bcm_tx_timeout_handler+0xdb/0x260
    __run_hrtimer kernel/time/hrtimer.c:1685 [inline]
    __hrtimer_run_queues+0x217/0x700 kernel/time/hrtimer.c:1749
    hrtimer_run_softirq+0xd6/0x120 kernel/time/hrtimer.c:1766
    __do_softirq+0xc1/0x265 kernel/softirq.c:571
    run_ksoftirqd+0x17/0x20 kernel/softirq.c:939
    smpboot_thread_fn+0x30a/0x4a0 kernel/smpboot.c:164
    kthread+0x1d7/0x210 kernel/kthread.c:379
    ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:308
    
    value changed: 0x0000000000000000 -> 0x0000000020000081
    
    Reported by Kernel Concurrency Sanitizer on:
    CPU: 1 PID: 19 Comm: ksoftirqd/1 Not tainted 6.4.0-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 05/27/2023
    
    Fixes: 69e3c75f4d54 ("net: TX_RING and packet mmap")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reviewed-by: Willem de Bruijn <willemb@google.com>
    Link: https://lore.kernel.org/r/20230803145600.2937518-1-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 43006691fef9e28d7ef1fe8ae4f80af3c8ee7832
Author: Karol Herbst <kherbst@redhat.com>
Date:   Sat Aug 5 12:18:13 2023 +0200

    drm/nouveau/disp: Revert a NULL check inside nouveau_connector_get_modes
    
    commit d5712cd22b9cf109fded1b7f178f4c1888c8b84b upstream.
    
    The original commit adding that check tried to protect the kenrel against
    a potential invalid NULL pointer access.
    
    However we call nouveau_connector_detect_depth once without a native_mode
    set on purpose for non LVDS connectors and this broke DP support in a few
    cases.
    
    Cc: Olaf Skibbe <news@kravcenko.com>
    Cc: Lyude Paul <lyude@redhat.com>
    Closes: https://gitlab.freedesktop.org/drm/nouveau/-/issues/238
    Closes: https://gitlab.freedesktop.org/drm/nouveau/-/issues/245
    Fixes: 20a2ce87fbaf8 ("drm/nouveau/dp: check for NULL nv_connector->native_mode")
    Signed-off-by: Karol Herbst <kherbst@redhat.com>
    Reviewed-by: Lyude Paul <lyude@redhat.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20230805101813.2603989-1-kherbst@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4cfe88238b6563c27ac2ccbbad5e070081708867
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Aug 9 15:05:00 2023 +0200

    x86: Move gds_ucode_mitigated() declaration to header
    
    commit eb3515dc99c7c85f4170b50838136b2a193f8012 upstream.
    
    The declaration got placed in the .c file of the caller, but that
    causes a warning for the definition:
    
    arch/x86/kernel/cpu/bugs.c:682:6: error: no previous prototype for 'gds_ucode_mitigated' [-Werror=missing-prototypes]
    
    Move it to a header where both sides can observe it instead.
    
    Fixes: 81ac7e5d74174 ("KVM: Add GDS_NO support to KVM")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
    Tested-by: Daniel Sneddon <daniel.sneddon@linux.intel.com>
    Cc: stable@kernel.org
    Link: https://lore.kernel.org/all/20230809130530.1913368-2-arnd%40kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 19453be2b0811a9c4617fd8dba866eb8c017cc32
Author: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
Date:   Thu Aug 3 18:16:09 2023 +0300

    x86/mm: Fix VDSO and VVAR placement on 5-level paging machines
    
    commit 1b8b1aa90c9c0e825b181b98b8d9e249dc395470 upstream.
    
    Yingcong has noticed that on the 5-level paging machine, VDSO and VVAR
    VMAs are placed above the 47-bit border:
    
    8000001a9000-8000001ad000 r--p 00000000 00:00 0                          [vvar]
    8000001ad000-8000001af000 r-xp 00000000 00:00 0                          [vdso]
    
    This might confuse users who are not aware of 5-level paging and expect
    all userspace addresses to be under the 47-bit border.
    
    So far problem has only been triggered with ASLR disabled, although it
    may also occur with ASLR enabled if the layout is randomized in a just
    right way.
    
    The problem happens due to custom placement for the VMAs in the VDSO
    code: vdso_addr() tries to place them above the stack and checks the
    result against TASK_SIZE_MAX, which is wrong. TASK_SIZE_MAX is set to
    the 56-bit border on 5-level paging machines. Use DEFAULT_MAP_WINDOW
    instead.
    
    Fixes: b569bab78d8d ("x86/mm: Prepare to expose larger address space to userspace")
    Reported-by: Yingcong Wu <yingcong.wu@intel.com>
    Signed-off-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/all/20230803151609.22141-1-kirill.shutemov%40linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a217bcfd2196caf9062ff1cca425a8a4edaef4cb
Author: Elson Roy Serrao <quic_eserrao@quicinc.com>
Date:   Tue Aug 1 12:26:58 2023 -0700

    usb: dwc3: Properly handle processing of pending events
    
    commit 3ddaa6a274578e23745b7466346fc2650df8f959 upstream.
    
    If dwc3 is runtime suspended we defer processing the event buffer
    until resume, by setting the pending_events flag. Set this flag before
    triggering resume to avoid race with the runtime resume callback.
    
    While handling the pending events, in addition to checking the event
    buffer we also need to process it. Handle this by explicitly calling
    dwc3_thread_interrupt(). Also balance the runtime pm get() operation
    that triggered this processing.
    
    Cc: stable@vger.kernel.org
    Fixes: fc8bb91bc83e ("usb: dwc3: implement runtime PM")
    Signed-off-by: Elson Roy Serrao <quic_eserrao@quicinc.com>
    Acked-by: Thinh Nguyen <Thinh.Nguyen@synopsys.com>
    Reviewed-by: Roger Quadros <rogerq@kernel.org>
    Link: https://lore.kernel.org/r/20230801192658.19275-1-quic_eserrao@quicinc.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 153c3e85873cc3e2f387169783c3a227bad9a95a
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Wed Aug 2 13:49:02 2023 -0400

    usb-storage: alauda: Fix uninit-value in alauda_check_media()
    
    commit a6ff6e7a9dd69364547751db0f626a10a6d628d2 upstream.
    
    Syzbot got KMSAN to complain about access to an uninitialized value in
    the alauda subdriver of usb-storage:
    
    BUG: KMSAN: uninit-value in alauda_transport+0x462/0x57f0
    drivers/usb/storage/alauda.c:1137
    CPU: 0 PID: 12279 Comm: usb-storage Not tainted 5.3.0-rc7+ #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS
    Google 01/01/2011
    Call Trace:
      __dump_stack lib/dump_stack.c:77 [inline]
      dump_stack+0x191/0x1f0 lib/dump_stack.c:113
      kmsan_report+0x13a/0x2b0 mm/kmsan/kmsan_report.c:108
      __msan_warning+0x73/0xe0 mm/kmsan/kmsan_instr.c:250
      alauda_check_media+0x344/0x3310 drivers/usb/storage/alauda.c:460
    
    The problem is that alauda_check_media() doesn't verify that its USB
    transfer succeeded before trying to use the received data.  What
    should happen if the transfer fails isn't entirely clear, but a
    reasonably conservative approach is to pretend that no media is
    present.
    
    A similar problem exists in a usb_stor_dbg() call in
    alauda_get_media_status().  In this case, when an error occurs the
    call is redundant, because usb_stor_ctrl_transfer() already will print
    a debugging message.
    
    Finally, unrelated to the uninitialized memory access, is the fact
    that alauda_check_media() performs DMA to a buffer on the stack.
    Fortunately usb-storage provides a general purpose DMA-able buffer for
    uses like this.  We'll use it instead.
    
    Reported-and-tested-by: syzbot+e7d46eb426883fb97efd@syzkaller.appspotmail.com
    Closes: https://lore.kernel.org/all/0000000000007d25ff059457342d@google.com/T/
    Suggested-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Fixes: e80b0fade09e ("[PATCH] USB Storage: add alauda support")
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/693d5d5e-f09b-42d0-8ed9-1f96cd30bcce@rowland.harvard.edu
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 58ce0ac5c3ad9bf010ebf35fd7b26f23e9bdbd4e
Author: Yiyuan Guo <yguoaz@gmail.com>
Date:   Fri Jun 30 22:37:19 2023 +0800

    iio: cros_ec: Fix the allocation size for cros_ec_command
    
    commit 8a4629055ef55177b5b63dab1ecce676bd8cccdd upstream.
    
    The struct cros_ec_command contains several integer fields and a
    trailing array. An allocation size neglecting the integer fields can
    lead to buffer overrun.
    
    Reviewed-by: Tzung-Bi Shih <tzungbi@kernel.org>
    Signed-off-by: Yiyuan Guo <yguoaz@gmail.com>
    Fixes: 974e6f02e27e ("iio: cros_ec_sensors_core: Add common functions for the ChromeOS EC Sensor Hub.")
    Link: https://lore.kernel.org/r/20230630143719.1513906-1-yguoaz@gmail.com
    Cc: <Stable@vger.kerenl.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b7d9dc3a00b52571bb58c103a87b8d60a4687a3b
Author: Mirsad Goran Todorovac <mirsad.todorovac@alu.unizg.hr>
Date:   Tue Jun 6 09:08:10 2023 +0200

    test_firmware: return ENOMEM instead of ENOSPC on failed memory allocation
    
    commit 7dae593cd226a0bca61201cf85ceb9335cf63682 upstream.
    
    In a couple of situations like
    
            name = kstrndup(buf, count, GFP_KERNEL);
            if (!name)
                    return -ENOSPC;
    
    the error is not actually "No space left on device", but "Out of memory".
    
    It is semantically correct to return -ENOMEM in all failed kstrndup()
    and kzalloc() cases in this driver, as it is not a problem with disk
    space, but with kernel memory allocator failing allocation.
    
    The semantically correct should be:
    
            name = kstrndup(buf, count, GFP_KERNEL);
            if (!name)
                    return -ENOMEM;
    
    Cc: Dan Carpenter <error27@gmail.com>
    Cc: Takashi Iwai <tiwai@suse.de>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: "Luis R. Rodriguez" <mcgrof@ruslug.rutgers.edu>
    Cc: Scott Branden <sbranden@broadcom.com>
    Cc: Hans de Goede <hdegoede@redhat.com>
    Cc: Brian Norris <briannorris@chromium.org>
    Fixes: c92316bf8e948 ("test_firmware: add batched firmware tests")
    Fixes: 0a8adf584759c ("test: add firmware_class loader test")
    Fixes: 548193cba2a7d ("test_firmware: add support for firmware_request_platform")
    Fixes: eb910947c82f9 ("test: firmware_class: add asynchronous request trigger")
    Fixes: 061132d2b9c95 ("test_firmware: add test custom fallback trigger")
    Fixes: 7feebfa487b92 ("test_firmware: add support for request_firmware_into_buf")
    Signed-off-by: Mirsad Goran Todorovac <mirsad.todorovac@alu.unizg.hr>
    Reviewed-by: Dan Carpenter <dan.carpenter@linaro.org>
    Message-ID: <20230606070808.9300-1-mirsad.todorovac@alu.unizg.hr>
    Signed-off-by: Mirsad Todorovac <mirsad.todorovac@alu.unizg.hr>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 11afd67f1b3c28eb216e50a3ca8dbcb69bb71793
Author: Ryusuke Konishi <konishi.ryusuke@gmail.com>
Date:   Sat Jul 29 04:13:18 2023 +0900

    nilfs2: fix use-after-free of nilfs_root in dirtying inodes via iput
    
    commit f8654743a0e6909dc634cbfad6db6816f10f3399 upstream.
    
    During unmount process of nilfs2, nothing holds nilfs_root structure after
    nilfs2 detaches its writer in nilfs_detach_log_writer().  Previously,
    nilfs_evict_inode() could cause use-after-free read for nilfs_root if
    inodes are left in "garbage_list" and released by nilfs_dispose_list at
    the end of nilfs_detach_log_writer(), and this bug was fixed by commit
    9b5a04ac3ad9 ("nilfs2: fix use-after-free bug of nilfs_root in
    nilfs_evict_inode()").
    
    However, it turned out that there is another possibility of UAF in the
    call path where mark_inode_dirty_sync() is called from iput():
    
    nilfs_detach_log_writer()
      nilfs_dispose_list()
        iput()
          mark_inode_dirty_sync()
            __mark_inode_dirty()
              nilfs_dirty_inode()
                __nilfs_mark_inode_dirty()
                  nilfs_load_inode_block() --> causes UAF of nilfs_root struct
    
    This can happen after commit 0ae45f63d4ef ("vfs: add support for a
    lazytime mount option"), which changed iput() to call
    mark_inode_dirty_sync() on its final reference if i_state has I_DIRTY_TIME
    flag and i_nlink is non-zero.
    
    This issue appears after commit 28a65b49eb53 ("nilfs2: do not write dirty
    data after degenerating to read-only") when using the syzbot reproducer,
    but the issue has potentially existed before.
    
    Fix this issue by adding a "purging flag" to the nilfs structure, setting
    that flag while disposing the "garbage_list" and checking it in
    __nilfs_mark_inode_dirty().
    
    Unlike commit 9b5a04ac3ad9 ("nilfs2: fix use-after-free bug of nilfs_root
    in nilfs_evict_inode()"), this patch does not rely on ns_writer to
    determine whether to skip operations, so as not to break recovery on
    mount.  The nilfs_salvage_orphan_logs routine dirties the buffer of
    salvaged data before attaching the log writer, so changing
    __nilfs_mark_inode_dirty() to skip the operation when ns_writer is NULL
    will cause recovery write to fail.  The purpose of using the cleanup-only
    flag is to allow for narrowing of such conditions.
    
    Link: https://lkml.kernel.org/r/20230728191318.33047-1-konishi.ryusuke@gmail.com
    Signed-off-by: Ryusuke Konishi <konishi.ryusuke@gmail.com>
    Reported-by: syzbot+74db8b3087f293d3a13a@syzkaller.appspotmail.com
    Closes: https://lkml.kernel.org/r/000000000000b4e906060113fd63@google.com
    Fixes: 0ae45f63d4ef ("vfs: add support for a lazytime mount option")
    Tested-by: Ryusuke Konishi <konishi.ryusuke@gmail.com>
    Cc: <stable@vger.kernel.org> # 4.0+
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 093d62a6c9bd837d29630d38f849e7f727fbf1de
Author: Colin Ian King <colin.i.king@gmail.com>
Date:   Thu Jul 27 17:09:30 2023 +0100

    radix tree test suite: fix incorrect allocation size for pthreads
    
    commit cac7ea57a06016e4914848b707477fb07ee4ae1c upstream.
    
    Currently the pthread allocation for each array item is based on the size
    of a pthread_t pointer and should be the size of the pthread_t structure,
    so the allocation is under-allocating the correct size.  Fix this by using
    the size of each element in the pthreads array.
    
    Static analysis cppcheck reported:
    tools/testing/radix-tree/regression1.c:180:2: warning: Size of pointer
    'threads' used instead of size of its data. [pointerSize]
    
    Link: https://lkml.kernel.org/r/20230727160930.632674-1-colin.i.king@gmail.com
    Fixes: 1366c37ed84b ("radix tree test harness")
    Signed-off-by: Colin Ian King <colin.i.king@gmail.com>
    Cc: Konstantin Khlebnikov <koct9i@gmail.com>
    Cc: Matthew Wilcox (Oracle) <willy@infradead.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5df411bb8c21fee4d533309e4093fd06efacdd4d
Author: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
Date:   Fri May 26 13:54:34 2023 +0300

    dmaengine: pl330: Return DMA_PAUSED when transaction is paused
    
    commit 8cda3ececf07d374774f6a13e5a94bc2dc04c26c upstream.
    
    pl330_pause() does not set anything to indicate paused condition which
    causes pl330_tx_status() to return DMA_IN_PROGRESS. This breaks 8250
    DMA flush after the fix in commit 57e9af7831dc ("serial: 8250_dma: Fix
    DMA Rx rearm race"). The function comment for pl330_pause() claims
    pause is supported but resume is not which is enough for 8250 DMA flush
    to work as long as DMA status reports DMA_PAUSED when appropriate.
    
    Add PAUSED state for descriptor and mark BUSY descriptors with PAUSED
    in pl330_pause(). Return DMA_PAUSED from pl330_tx_status() when the
    descriptor is PAUSED.
    
    Reported-by: Richard Tresidder <rtresidd@electromag.com.au>
    Tested-by: Richard Tresidder <rtresidd@electromag.com.au>
    Fixes: 88987d2c7534 ("dmaengine: pl330: add DMA_PAUSE feature")
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/linux-serial/f8a86ecd-64b1-573f-c2fa-59f541083f1a@electromag.com.au/
    Signed-off-by: Ilpo Järvinen <ilpo.jarvinen@linux.intel.com>
    Link: https://lore.kernel.org/r/20230526105434.14959-1-ilpo.jarvinen@linux.intel.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 368684d3b29342a3448a4f4e657f27c5cbda391b
Author: Maciej Żenczykowski <maze@google.com>
Date:   Mon Aug 7 03:25:32 2023 -0700

    ipv6: adjust ndisc_is_useropt() to also return true for PIO
    
    commit 048c796beb6eb4fa3a5a647ee1c81f5c6f0f6a2a upstream.
    
    The upcoming (and nearly finalized):
      https://datatracker.ietf.org/doc/draft-collink-6man-pio-pflag/
    will update the IPv6 RA to include a new flag in the PIO field,
    which will serve as a hint to perform DHCPv6-PD.
    
    As we don't want DHCPv6 related logic inside the kernel, this piece of
    information needs to be exposed to userspace.  The simplest option is to
    simply expose the entire PIO through the already existing mechanism.
    
    Even without this new flag, the already existing PIO R (router address)
    flag (from RFC6275) cannot AFAICT be handled entirely in kernel,
    and provides useful information that should be exposed to userspace
    (the router's global address, for use by Mobile IPv6).
    
    Also cc'ing stable@ for inclusion in LTS, as while technically this is
    not quite a bugfix, and instead more of a feature, it is absolutely
    trivial and the alternative is manually cherrypicking into all Android
    Common Kernel trees - and I know Greg will ask for it to be sent in via
    LTS instead...
    
    Cc: Jen Linkova <furry@google.com>
    Cc: Lorenzo Colitti <lorenzo@google.com>
    Cc: David Ahern <dsahern@gmail.com>
    Cc: YOSHIFUJI Hideaki / 吉藤英明 <yoshfuji@linux-ipv6.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Maciej Żenczykowski <maze@google.com>
    Link: https://lore.kernel.org/r/20230807102533.1147559-1-maze@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f778961ffd4cc152b2fc8ce3b73c09d6201d8cff
Author: Sergei Antonov <saproj@gmail.com>
Date:   Tue Jun 27 15:05:49 2023 +0300

    mmc: moxart: read scr register without changing byte order
    
    commit d44263222134b5635932974c6177a5cba65a07e8 upstream.
    
    Conversion from big-endian to native is done in a common function
    mmc_app_send_scr(). Converting in moxart_transfer_pio() is extra.
    Double conversion on a LE system returns an incorrect SCR value,
    leads to errors:
    
    mmc0: unrecognised SCR structure version 8
    
    Fixes: 1b66e94e6b99 ("mmc: moxart: Add MOXA ART SD/MMC driver")
    Signed-off-by: Sergei Antonov <saproj@gmail.com>
    Cc: Jonas Jensen <jonas.jensen@gmail.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20230627120549.2400325-1-saproj@gmail.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 81e030509c4d249b2e1029a4d1f773087fdd1faf
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Fri Aug 11 16:46:33 2023 +0200

    sparc: fix up arch_cpu_finalize_init() build breakage.
    
    In commit 39f0e159b8e8 ("sparc/cpu: Switch to arch_cpu_finalize_init()") the
    check for ARCH_HAS_CPU_FINALIZE_INIT was backported incorrectly to the SPARC
    config option, not SPARC32.  This causes build problems for the sparc64 arch:
    
            sparc64-linux-ld: init/main.o: in function `start_kernel':
            main.c:(.init.text+0x77c): undefined reference to `arch_cpu_finalize_init'
    
    Fix this up by putting the option in the correct place.
    
    Reported-by: Guenter Roeck <linux@roeck-us.net>
    Link: https://lore.kernel.org/r/252c7673-53ee-4c4b-e5ef-5bb2c0416154@roeck-us.net
    Fixes: 39f0e159b8e8 ("sparc/cpu: Switch to arch_cpu_finalize_init()")
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

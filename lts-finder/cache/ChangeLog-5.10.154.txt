commit f5b40c0eb9ea3d8233b9a2e9af6784c81204d454
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Nov 10 18:14:30 2022 +0100

    Linux 5.10.154
    
    Link: https://lore.kernel.org/r/20221108133340.718216105@linuxfoundation.org
    Tested-by: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: Salvatore Bonaccorso <carnil@debian.org>
    Tested-by: Hulk Robot <hulkrobot@huawei.com>
    Link: https://lore.kernel.org/r/20221109082223.141145957@linuxfoundation.org
    Tested-by: Rudi Heitbaum <rudi@heitbaum.com>
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: Pavel Machek (CIP) <pavel@denx.de>
    Tested-by: Allen Pais <apais@linux.microsoft.com>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Sudip Mukherjee <sudip.mukherjee@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bf506e366da4b6aa950852cd4d320538a9f73e8e
Author: Vasily Averin <vasily.averin@linux.dev>
Date:   Sat Sep 11 10:40:08 2021 +0300

    ipc: remove memcg accounting for sops objects in do_semtimedop()
    
    commit 6a4746ba06191e23d30230738e94334b26590a8a upstream.
    
    Linus proposes to revert an accounting for sops objects in
    do_semtimedop() because it's really just a temporary buffer
    for a single semtimedop() system call.
    
    This object can consume up to 2 pages, syscall is sleeping
    one, size and duration can be controlled by user, and this
    allocation can be repeated by many thread at the same time.
    
    However Shakeel Butt pointed that there are much more popular
    objects with the same life time and similar memory
    consumption, the accounting of which was decided to be
    rejected for performance reasons.
    
    Considering at least 2 pages for task_struct and 2 pages for
    the kernel stack, a back of the envelope calculation gives a
    footprint amplification of <1.5 so this temporal buffer can be
    safely ignored.
    
    The factor would IMO be interesting if it was >> 2 (from the
    PoV of excessive (ab)use, fine-grained accounting seems to be
    currently unfeasible due to performance impact).
    
    Link: https://lore.kernel.org/lkml/90e254df-0dfe-f080-011e-b7c53ee7fd20@virtuozzo.com/
    Fixes: 18319498fdd4 ("memcg: enable accounting of ipc resources")
    Signed-off-by: Vasily Averin <vvs@virtuozzo.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Reviewed-by: Michal Koutný <mkoutny@suse.com>
    Acked-by: Shakeel Butt <shakeelb@google.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c6678c8f4f3f8383fe2dff3455de3d504382638f
Author: Dokyung Song <dokyung.song@gmail.com>
Date:   Fri Oct 21 15:13:59 2022 +0900

    wifi: brcmfmac: Fix potential buffer overflow in brcmf_fweh_event_worker()
    
    commit 6788ba8aed4e28e90f72d68a9d794e34eac17295 upstream.
    
    This patch fixes an intra-object buffer overflow in brcmfmac that occurs
    when the device provides a 'bsscfgidx' equal to or greater than the
    buffer size. The patch adds a check that leads to a safe failure if that
    is the case.
    
    This fixes CVE-2022-3628.
    
    UBSAN: array-index-out-of-bounds in drivers/net/wireless/broadcom/brcm80211/brcmfmac/fweh.c
    index 52 is out of range for type 'brcmf_if *[16]'
    CPU: 0 PID: 1898 Comm: kworker/0:2 Tainted: G           O      5.14.0+ #132
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.12.1-0-ga5cab58e9a3f-prebuilt.qemu.org 04/01/2014
    Workqueue: events brcmf_fweh_event_worker
    Call Trace:
     dump_stack_lvl+0x57/0x7d
     ubsan_epilogue+0x5/0x40
     __ubsan_handle_out_of_bounds+0x69/0x80
     ? memcpy+0x39/0x60
     brcmf_fweh_event_worker+0xae1/0xc00
     ? brcmf_fweh_call_event_handler.isra.0+0x100/0x100
     ? rcu_read_lock_sched_held+0xa1/0xd0
     ? rcu_read_lock_bh_held+0xb0/0xb0
     ? lockdep_hardirqs_on_prepare+0x273/0x3e0
     process_one_work+0x873/0x13e0
     ? lock_release+0x640/0x640
     ? pwq_dec_nr_in_flight+0x320/0x320
     ? rwlock_bug.part.0+0x90/0x90
     worker_thread+0x8b/0xd10
     ? __kthread_parkme+0xd9/0x1d0
     ? process_one_work+0x13e0/0x13e0
     kthread+0x379/0x450
     ? _raw_spin_unlock_irq+0x24/0x30
     ? set_kthread_struct+0x100/0x100
     ret_from_fork+0x1f/0x30
    ================================================================================
    general protection fault, probably for non-canonical address 0xe5601c0020023fff: 0000 [#1] SMP KASAN
    KASAN: maybe wild-memory-access in range [0x2b0100010011fff8-0x2b0100010011ffff]
    CPU: 0 PID: 1898 Comm: kworker/0:2 Tainted: G           O      5.14.0+ #132
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.12.1-0-ga5cab58e9a3f-prebuilt.qemu.org 04/01/2014
    Workqueue: events brcmf_fweh_event_worker
    RIP: 0010:brcmf_fweh_call_event_handler.isra.0+0x42/0x100
    Code: 89 f5 53 48 89 fb 48 83 ec 08 e8 79 0b 38 fe 48 85 ed 74 7e e8 6f 0b 38 fe 48 89 ea 48 b8 00 00 00 00 00 fc ff df 48 c1 ea 03 <80> 3c 02 00 0f 85 8b 00 00 00 4c 8b 7d 00 44 89 e0 48 ba 00 00 00
    RSP: 0018:ffffc9000259fbd8 EFLAGS: 00010207
    RAX: dffffc0000000000 RBX: ffff888115d8cd50 RCX: 0000000000000000
    RDX: 0560200020023fff RSI: ffffffff8304bc91 RDI: ffff888115d8cd50
    RBP: 2b0100010011ffff R08: ffff888112340050 R09: ffffed1023549809
    R10: ffff88811aa4c047 R11: ffffed1023549808 R12: 0000000000000045
    R13: ffffc9000259fca0 R14: ffff888112340050 R15: ffff888112340000
    FS:  0000000000000000(0000) GS:ffff88811aa00000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 000000004053ccc0 CR3: 0000000112740000 CR4: 0000000000750ef0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    PKRU: 55555554
    Call Trace:
     brcmf_fweh_event_worker+0x117/0xc00
     ? brcmf_fweh_call_event_handler.isra.0+0x100/0x100
     ? rcu_read_lock_sched_held+0xa1/0xd0
     ? rcu_read_lock_bh_held+0xb0/0xb0
     ? lockdep_hardirqs_on_prepare+0x273/0x3e0
     process_one_work+0x873/0x13e0
     ? lock_release+0x640/0x640
     ? pwq_dec_nr_in_flight+0x320/0x320
     ? rwlock_bug.part.0+0x90/0x90
     worker_thread+0x8b/0xd10
     ? __kthread_parkme+0xd9/0x1d0
     ? process_one_work+0x13e0/0x13e0
     kthread+0x379/0x450
     ? _raw_spin_unlock_irq+0x24/0x30
     ? set_kthread_struct+0x100/0x100
     ret_from_fork+0x1f/0x30
    Modules linked in: 88XXau(O) 88x2bu(O)
    ---[ end trace 41d302138f3ff55a ]---
    RIP: 0010:brcmf_fweh_call_event_handler.isra.0+0x42/0x100
    Code: 89 f5 53 48 89 fb 48 83 ec 08 e8 79 0b 38 fe 48 85 ed 74 7e e8 6f 0b 38 fe 48 89 ea 48 b8 00 00 00 00 00 fc ff df 48 c1 ea 03 <80> 3c 02 00 0f 85 8b 00 00 00 4c 8b 7d 00 44 89 e0 48 ba 00 00 00
    RSP: 0018:ffffc9000259fbd8 EFLAGS: 00010207
    RAX: dffffc0000000000 RBX: ffff888115d8cd50 RCX: 0000000000000000
    RDX: 0560200020023fff RSI: ffffffff8304bc91 RDI: ffff888115d8cd50
    RBP: 2b0100010011ffff R08: ffff888112340050 R09: ffffed1023549809
    R10: ffff88811aa4c047 R11: ffffed1023549808 R12: 0000000000000045
    R13: ffffc9000259fca0 R14: ffff888112340050 R15: ffff888112340000
    FS:  0000000000000000(0000) GS:ffff88811aa00000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 000000004053ccc0 CR3: 0000000112740000 CR4: 0000000000750ef0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    PKRU: 55555554
    Kernel panic - not syncing: Fatal exception
    
    Reported-by: Dokyung Song <dokyungs@yonsei.ac.kr>
    Reported-by: Jisoo Jang <jisoo.jang@yonsei.ac.kr>
    Reported-by: Minsuk Kang <linuxlovemin@yonsei.ac.kr>
    Reviewed-by: Arend van Spriel <aspriel@gmail.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Dokyung Song <dokyung.song@gmail.com>
    Signed-off-by: Kalle Valo <kvalo@kernel.org>
    Link: https://lore.kernel.org/r/20221021061359.GA550858@laguna
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a6c57adec567f3833225cb7b76b84ca73e5932d8
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Wed Oct 26 13:11:28 2022 +0300

    drm/i915/sdvo: Setup DDC fully before output init
    
    commit e79762512120f11c51317570519a1553c70805d8 upstream.
    
    Call intel_sdvo_select_ddc_bus() before initializing any
    of the outputs. And before that is functional (assuming no VBT)
    we have to set up the controlled_outputs thing. Otherwise DDC
    won't be functional during the output init but LVDS really
    needs it for the fixed mode setup.
    
    Note that the whole multi output support still looks very
    bogus, and more work will be needed to make it correct.
    But for now this should at least fix the LVDS EDID fixed mode
    setup.
    
    Cc: stable@vger.kernel.org
    Closes: https://gitlab.freedesktop.org/drm/intel/-/issues/7301
    Fixes: aa2b88074a56 ("drm/i915/sdvo: Fix multi function encoder stuff")
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20221026101134.20865-3-ville.syrjala@linux.intel.com
    Reviewed-by: Jani Nikula <jani.nikula@intel.com>
    (cherry picked from commit 64b7b557dc8a96d9cfed6aedbf81de2df80c025d)
    Signed-off-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b86830cc95af9bc0ba27041f163ce61a03bcded2
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Wed Oct 26 13:11:27 2022 +0300

    drm/i915/sdvo: Filter out invalid outputs more sensibly
    
    commit 3e206b6aa6df7eed4297577e0cf8403169b800a2 upstream.
    
    We try to filter out the corresponding xxx1 output
    if the xxx0 output is not present. But the way that is
    being done is pretty awkward. Make it less so.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20221026101134.20865-2-ville.syrjala@linux.intel.com
    Reviewed-by: Jani Nikula <jani.nikula@intel.com>
    (cherry picked from commit cc1e66394daaa7e9f005e2487a84e34a39f9308b)
    Signed-off-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9f3b8678080a5bf0135b13f9c489faa509cbb1c7
Author: Brian Norris <briannorris@chromium.org>
Date:   Wed Oct 19 17:03:49 2022 -0700

    drm/rockchip: dsi: Force synchronous probe
    
    commit 81e592f86f7afdb76d655e7fbd7803d7b8f985d8 upstream.
    
    We can't safely probe a dual-DSI display asynchronously
    (driver_async_probe='*' or driver_async_probe='dw-mipi-dsi-rockchip'
    cmdline), because dw_mipi_dsi_rockchip_find_second() pokes one DSI
    device's drvdata from the other device without any locking.
    
    Request synchronous probe, at least until this driver learns some
    appropriate locking for dual-DSI initialization.
    
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Brian Norris <briannorris@chromium.org>
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Link: https://patchwork.freedesktop.org/patch/msgid/20221019170255.2.I6b985b0ca372b7e35c6d9ea970b24bcb262d4fc1@changeid
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 23f1fc7ce55fbfb195db8abd5e07eef13700cd0e
Author: Matthew Wilcox (Oracle) <willy@infradead.org>
Date:   Wed Oct 12 20:34:19 2022 +0100

    ext4,f2fs: fix readahead of verity data
    
    commit 4fa0e3ff217f775cb58d2d6d51820ec519243fb9 upstream.
    
    The recent change of page_cache_ra_unbounded() arguments was buggy in the
    two callers, causing us to readahead the wrong pages.  Move the definition
    of ractl down to after the index is set correctly.  This affected
    performance on configurations that use fs-verity.
    
    Link: https://lkml.kernel.org/r/20221012193419.1453558-1-willy@infradead.org
    Fixes: 73bb49da50cd ("mm/readahead: make page_cache_ra_unbounded take a readahead_control")
    Signed-off-by: Matthew Wilcox (Oracle) <willy@infradead.org>
    Reported-by: Jintao Yin <nicememory@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e5cef906cb409a7b56641561a715d431b034d1c2
Author: Maxim Levitsky <mlevitsk@redhat.com>
Date:   Tue Oct 25 15:47:31 2022 +0300

    KVM: x86: emulator: update the emulation mode after CR0 write
    
    commit ad8f9e69942c7db90758d9d774157e53bce94840 upstream.
    
    Update the emulation mode when handling writes to CR0, because
    toggling CR0.PE switches between Real and Protected Mode, and toggling
    CR0.PG when EFER.LME=1 switches between Long and Protected Mode.
    
    This is likely a benign bug because there is no writeback of state,
    other than the RIP increment, and when toggling CR0.PE, the CPU has
    to execute code from a very low memory address.
    
    Signed-off-by: Maxim Levitsky <mlevitsk@redhat.com>
    Message-Id: <20221025124741.228045-14-mlevitsk@redhat.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ce9261accccd2a0edffa9b65cd9d23400f71bdfa
Author: Maxim Levitsky <mlevitsk@redhat.com>
Date:   Tue Oct 25 15:47:29 2022 +0300

    KVM: x86: emulator: introduce emulator_recalc_and_set_mode
    
    commit d087e0f79fa0dd336a9a6b2f79ec23120f5eff73 upstream.
    
    Some instructions update the cpu execution mode, which needs to update the
    emulation mode.
    
    Extract this code, and make assign_eip_far use it.
    
    assign_eip_far now reads CS, instead of getting it via a parameter,
    which is ok, because callers always assign CS to the same value
    before calling this function.
    
    No functional change is intended.
    
    Signed-off-by: Maxim Levitsky <mlevitsk@redhat.com>
    Message-Id: <20221025124741.228045-12-mlevitsk@redhat.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c8a2fd7a715d9882eed5ddb4105bce2f6a8163c2
Author: Maxim Levitsky <mlevitsk@redhat.com>
Date:   Tue Oct 25 15:47:28 2022 +0300

    KVM: x86: emulator: em_sysexit should update ctxt->mode
    
    commit 5015bb89b58225f97df6ac44383e7e8c8662c8c9 upstream.
    
    SYSEXIT is one of the instructions that can change the
    processor mode, thus ctxt->mode should be updated after it.
    
    Note that this is likely a benign bug, because the only problematic
    mode change is from 32 bit to 64 bit which can lead to truncation of RIP,
    and it is not possible to do with sysexit,
    since sysexit running in 32 bit mode will be limited to 32 bit version.
    
    Signed-off-by: Maxim Levitsky <mlevitsk@redhat.com>
    Message-Id: <20221025124741.228045-11-mlevitsk@redhat.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e0c7410378cd1adbfd35a65faca5df8936631b1a
Author: Jim Mattson <jmattson@google.com>
Date:   Fri Sep 30 00:51:58 2022 +0200

    KVM: x86: Mask off reserved bits in CPUID.80000001H
    
    commit 0469e56a14bf8cfb80507e51b7aeec0332cdbc13 upstream.
    
    KVM_GET_SUPPORTED_CPUID should only enumerate features that KVM
    actually supports. CPUID.80000001:EBX[27:16] are reserved bits and
    should be masked off.
    
    Fixes: 0771671749b5 ("KVM: Enhance guest cpuid management")
    Signed-off-by: Jim Mattson <jmattson@google.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9302ebc1c21d93ef7004cd228c8b493dc64f7194
Author: Jim Mattson <jmattson@google.com>
Date:   Thu Sep 29 15:52:00 2022 -0700

    KVM: x86: Mask off reserved bits in CPUID.80000008H
    
    commit 7030d8530e533844e2f4b0e7476498afcd324634 upstream.
    
    KVM_GET_SUPPORTED_CPUID should only enumerate features that KVM
    actually supports. The following ranges of CPUID.80000008H are reserved
    and should be masked off:
        ECX[31:18]
        ECX[11:8]
    
    In addition, the PerfTscSize field at ECX[17:16] should also be zero
    because KVM does not set the PERFTSC bit at CPUID.80000001H.ECX[27].
    
    Fixes: 24c82e576b78 ("KVM: Sanitize cpuid")
    Signed-off-by: Jim Mattson <jmattson@google.com>
    Message-Id: <20220929225203.2234702-3-jmattson@google.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cc40c5f3e9211523873c001d34e2f6695d57249b
Author: Jim Mattson <jmattson@google.com>
Date:   Thu Sep 29 15:52:01 2022 -0700

    KVM: x86: Mask off reserved bits in CPUID.8000001AH
    
    commit 079f6889818dd07903fb36c252532ab47ebb6d48 upstream.
    
    KVM_GET_SUPPORTED_CPUID should only enumerate features that KVM
    actually supports. In the case of CPUID.8000001AH, only three bits are
    currently defined. The 125 reserved bits should be masked off.
    
    Fixes: 24c82e576b78 ("KVM: Sanitize cpuid")
    Signed-off-by: Jim Mattson <jmattson@google.com>
    Message-Id: <20220929225203.2234702-4-jmattson@google.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bd64a88f364cbe2e19b5f55be1cffef2b47bd0a5
Author: Jim Mattson <jmattson@google.com>
Date:   Thu Sep 29 15:51:59 2022 -0700

    KVM: x86: Mask off reserved bits in CPUID.80000006H
    
    commit eeb69eab57c6604ac90b3fd8e5ac43f24a5535b1 upstream.
    
    KVM_GET_SUPPORTED_CPUID should only enumerate features that KVM
    actually supports. CPUID.80000006H:EDX[17:16] are reserved bits and
    should be masked off.
    
    Fixes: 43d05de2bee7 ("KVM: pass through CPUID(0x80000006)")
    Signed-off-by: Jim Mattson <jmattson@google.com>
    Message-Id: <20220929225203.2234702-2-jmattson@google.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 156451a67b93986fb07c274ef6995ff40766c5ad
Author: Luís Henriques <lhenriques@suse.de>
Date:   Wed Oct 12 14:13:30 2022 +0100

    ext4: fix BUG_ON() when directory entry has invalid rec_len
    
    commit 17a0bc9bd697f75cfdf9b378d5eb2d7409c91340 upstream.
    
    The rec_len field in the directory entry has to be a multiple of 4.  A
    corrupted filesystem image can be used to hit a BUG() in
    ext4_rec_len_to_disk(), called from make_indexed_dir().
    
     ------------[ cut here ]------------
     kernel BUG at fs/ext4/ext4.h:2413!
     ...
     RIP: 0010:make_indexed_dir+0x53f/0x5f0
     ...
     Call Trace:
      <TASK>
      ? add_dirent_to_buf+0x1b2/0x200
      ext4_add_entry+0x36e/0x480
      ext4_add_nondir+0x2b/0xc0
      ext4_create+0x163/0x200
      path_openat+0x635/0xe90
      do_filp_open+0xb4/0x160
      ? __create_object.isra.0+0x1de/0x3b0
      ? _raw_spin_unlock+0x12/0x30
      do_sys_openat2+0x91/0x150
      __x64_sys_open+0x6c/0xa0
      do_syscall_64+0x3c/0x80
      entry_SYSCALL_64_after_hwframe+0x46/0xb0
    
    The fix simply adds a call to ext4_check_dir_entry() to validate the
    directory entry, returning -EFSCORRUPTED if the entry is invalid.
    
    CC: stable@kernel.org
    Link: https://bugzilla.kernel.org/show_bug.cgi?id=216540
    Signed-off-by: Luís Henriques <lhenriques@suse.de>
    Link: https://lore.kernel.org/r/20221012131330.32456-1-lhenriques@suse.de
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5370b965b7a945bb8f48b9ee23d83a76a947902e
Author: Ye Bin <yebin10@huawei.com>
Date:   Tue Oct 18 10:27:01 2022 +0800

    ext4: fix warning in 'ext4_da_release_space'
    
    commit 1b8f787ef547230a3249bcf897221ef0cc78481b upstream.
    
    Syzkaller report issue as follows:
    EXT4-fs (loop0): Free/Dirty block details
    EXT4-fs (loop0): free_blocks=0
    EXT4-fs (loop0): dirty_blocks=0
    EXT4-fs (loop0): Block reservation details
    EXT4-fs (loop0): i_reserved_data_blocks=0
    EXT4-fs warning (device loop0): ext4_da_release_space:1527: ext4_da_release_space: ino 18, to_free 1 with only 0 reserved data blocks
    ------------[ cut here ]------------
    WARNING: CPU: 0 PID: 92 at fs/ext4/inode.c:1528 ext4_da_release_space+0x25e/0x370 fs/ext4/inode.c:1524
    Modules linked in:
    CPU: 0 PID: 92 Comm: kworker/u4:4 Not tainted 6.0.0-syzkaller-09423-g493ffd6605b2 #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 09/22/2022
    Workqueue: writeback wb_workfn (flush-7:0)
    RIP: 0010:ext4_da_release_space+0x25e/0x370 fs/ext4/inode.c:1528
    RSP: 0018:ffffc900015f6c90 EFLAGS: 00010296
    RAX: 42215896cd52ea00 RBX: 0000000000000000 RCX: 42215896cd52ea00
    RDX: 0000000000000000 RSI: 0000000080000001 RDI: 0000000000000000
    RBP: 1ffff1100e907d96 R08: ffffffff816aa79d R09: fffff520002bece5
    R10: fffff520002bece5 R11: 1ffff920002bece4 R12: ffff888021fd2000
    R13: ffff88807483ecb0 R14: 0000000000000001 R15: ffff88807483e740
    FS:  0000000000000000(0000) GS:ffff8880b9a00000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00005555569ba628 CR3: 000000000c88e000 CR4: 00000000003506f0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     <TASK>
     ext4_es_remove_extent+0x1ab/0x260 fs/ext4/extents_status.c:1461
     mpage_release_unused_pages+0x24d/0xef0 fs/ext4/inode.c:1589
     ext4_writepages+0x12eb/0x3be0 fs/ext4/inode.c:2852
     do_writepages+0x3c3/0x680 mm/page-writeback.c:2469
     __writeback_single_inode+0xd1/0x670 fs/fs-writeback.c:1587
     writeback_sb_inodes+0xb3b/0x18f0 fs/fs-writeback.c:1870
     wb_writeback+0x41f/0x7b0 fs/fs-writeback.c:2044
     wb_do_writeback fs/fs-writeback.c:2187 [inline]
     wb_workfn+0x3cb/0xef0 fs/fs-writeback.c:2227
     process_one_work+0x877/0xdb0 kernel/workqueue.c:2289
     worker_thread+0xb14/0x1330 kernel/workqueue.c:2436
     kthread+0x266/0x300 kernel/kthread.c:376
     ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:306
     </TASK>
    
    Above issue may happens as follows:
    ext4_da_write_begin
      ext4_create_inline_data
        ext4_clear_inode_flag(inode, EXT4_INODE_EXTENTS);
        ext4_set_inode_flag(inode, EXT4_INODE_INLINE_DATA);
    __ext4_ioctl
      ext4_ext_migrate -> will lead to eh->eh_entries not zero, and set extent flag
    ext4_da_write_begin
      ext4_da_convert_inline_data_to_extent
        ext4_da_write_inline_data_begin
          ext4_da_map_blocks
            ext4_insert_delayed_block
              if (!ext4_es_scan_clu(inode, &ext4_es_is_delonly, lblk))
                if (!ext4_es_scan_clu(inode, &ext4_es_is_mapped, lblk))
                  ext4_clu_mapped(inode, EXT4_B2C(sbi, lblk)); -> will return 1
                   allocated = true;
              ext4_es_insert_delayed_block(inode, lblk, allocated);
    ext4_writepages
      mpage_map_and_submit_extent(handle, &mpd, &give_up_on_write); -> return -ENOSPC
      mpage_release_unused_pages(&mpd, give_up_on_write); -> give_up_on_write == 1
        ext4_es_remove_extent
          ext4_da_release_space(inode, reserved);
            if (unlikely(to_free > ei->i_reserved_data_blocks))
              -> to_free == 1  but ei->i_reserved_data_blocks == 0
              -> then trigger warning as above
    
    To solve above issue, forbid inode do migrate which has inline data.
    
    Cc: stable@kernel.org
    Reported-by: syzbot+c740bb18df70ad00952e@syzkaller.appspotmail.com
    Signed-off-by: Ye Bin <yebin10@huawei.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20221018022701.683489-1-yebin10@huawei.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c9598cf629530823fd5d6c3342311895de504707
Author: Helge Deller <deller@gmx.de>
Date:   Fri Oct 28 18:12:49 2022 +0200

    parisc: Avoid printing the hardware path twice
    
    commit 2b6ae0962b421103feb41a80406732944b0665b3 upstream.
    
    Avoid that the hardware path is shown twice in the kernel log, and clean
    up the output of the version numbers to show up in the same order as
    they are listed in the hardware database in the hardware.c file.
    Additionally, optimize the memory footprint of the hardware database
    and mark some code as init code.
    
    Fixes: cab56b51ec0e ("parisc: Fix device names in /proc/iomem")
    Signed-off-by: Helge Deller <deller@gmx.de>
    Cc: <stable@vger.kernel.org> # v4.9+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 98f836e80d210312ec98ffbbce4a0b6c4b6dc34e
Author: Helge Deller <deller@gmx.de>
Date:   Thu Oct 27 09:12:05 2022 +0200

    parisc: Export iosapic_serial_irq() symbol for serial port driver
    
    commit a0c9f1f2e53b8eb2ae43987a30e547ba56b4fa18 upstream.
    
    The parisc serial port driver needs this symbol when it's compiled
    as module.
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Reported-by: kernel test robot <lkp@intel.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 814af9a32b031a09131e9a57bfc9710a5d742ed9
Author: Helge Deller <deller@gmx.de>
Date:   Fri Oct 21 07:44:49 2022 +0200

    parisc: Make 8250_gsc driver dependend on CONFIG_PARISC
    
    commit e8a18e3f00f3ee8d07c17ab1ea3ad4df4a3b6fe0 upstream.
    
    Although the name of the driver 8250_gsc.c suggests that it handles
    only serial ports on the GSC bus, it does handle serial ports listed
    in the parisc machine inventory as well, e.g. the serial ports in a
    C8000 PCI-only workstation.
    
    Change the dependency to CONFIG_PARISC, so that the driver gets included
    in the kernel even if CONFIG_GSC isn't set.
    
    Reported-by: Mikulas Patocka <mpatocka@redhat.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Helge Deller <deller@gmx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 29d106d086d2f39f8635f402004d1c17a6205583
Author: Kan Liang <kan.liang@linux.intel.com>
Date:   Mon Oct 31 08:45:50 2022 -0700

    perf/x86/intel: Add Cooper Lake stepping to isolation_ucodes[]
    
    commit 6f8faf471446844bb9c318e0340221049d5c19f4 upstream.
    
    The intel_pebs_isolation quirk checks both model number and stepping.
    Cooper Lake has a different stepping (11) than the other Skylake Xeon.
    It cannot benefit from the optimization in commit 9b545c04abd4f
    ("perf/x86/kvm: Avoid unnecessary work in guest filtering").
    
    Add the stepping of Cooper Lake into the isolation_ucodes[] table.
    
    Signed-off-by: Kan Liang <kan.liang@linux.intel.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20221031154550.571663-1-kan.liang@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 98f6e7c337036dff5a851f557950f5846d3f7d73
Author: Kan Liang <kan.liang@linux.intel.com>
Date:   Mon Oct 31 08:41:18 2022 -0700

    perf/x86/intel: Fix pebs event constraints for ICL
    
    commit acc5568b90c19ac6375508a93b9676cd18a92a35 upstream.
    
    According to the latest event list, update the MEM_INST_RETIRED events
    which support the DataLA facility.
    
    Fixes: 6017608936c1 ("perf/x86/intel: Add Icelake support")
    Reported-by: Jannis Klinkenberg <jannis.klinkenberg@rwth-aachen.de>
    Signed-off-by: Kan Liang <kan.liang@linux.intel.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20221031154119.571386-1-kan.liang@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3be2d66822a07183d28c78cd8261774e2a3cca3a
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Thu Oct 20 10:39:09 2022 +0200

    efi: random: Use 'ACPI reclaim' memory for random seed
    
    commit 7d866e38c7e9ece8a096d0d098fa9d92b9d4f97e upstream.
    
    EFI runtime services data is guaranteed to be preserved by the OS,
    making it a suitable candidate for the EFI random seed table, which may
    be passed to kexec kernels as well (after refreshing the seed), and so
    we need to ensure that the memory is preserved without support from the
    OS itself.
    
    However, runtime services data is intended for allocations that are
    relevant to the implementations of the runtime services themselves, and
    so they are unmapped from the kernel linear map, and mapped into the EFI
    page tables that are active while runtime service invocations are in
    progress. None of this is needed for the RNG seed.
    
    So let's switch to EFI 'ACPI reclaim' memory: in spite of the name,
    there is nothing exclusively ACPI about it, it is simply a type of
    allocation that carries firmware provided data which may or may not be
    relevant to the OS, and it is left up to the OS to decide whether to
    reclaim it after having consumed its contents.
    
    Given that in Linux, we never reclaim these allocations, it is a good
    choice for the EFI RNG seed, as the allocation is guaranteed to survive
    kexec reboots.
    
    One additional reason for changing this now is to align it with the
    upcoming recommendation for EFI bootloader provided RNG seeds, which
    must not use EFI runtime services code/data allocations.
    
    Cc: <stable@vger.kernel.org> # v4.14+
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Reviewed-by: Ilias Apalodimas <ilias.apalodimas@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 83294f7c7759e1e4c3909edc2e2c1dfbb159e153
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Thu Oct 20 10:39:08 2022 +0200

    efi: random: reduce seed size to 32 bytes
    
    commit 161a438d730dade2ba2b1bf8785f0759aba4ca5f upstream.
    
    We no longer need at least 64 bytes of random seed to permit the early
    crng init to complete. The RNG is now based on Blake2s, so reduce the
    EFI seed size to the Blake2s hash size, which is sufficient for our
    purposes.
    
    While at it, drop the READ_ONCE(), which was supposed to prevent size
    from being evaluated after seed was unmapped. However, this cannot
    actually happen, so READ_ONCE() is unnecessary here.
    
    Cc: <stable@vger.kernel.org> # v4.14+
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Reviewed-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Acked-by: Ilias Apalodimas <ilias.apalodimas@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f8e8cda869fd0a023e22c1fa98906d1a61bd152a
Author: Miklos Szeredi <mszeredi@redhat.com>
Date:   Fri Oct 28 14:25:20 2022 +0200

    fuse: add file_modified() to fallocate
    
    commit 4a6f278d4827b59ba26ceae0ff4529ee826aa258 upstream.
    
    Add missing file_modified() call to fuse_file_fallocate().  Without this
    fallocate on fuse failed to clear privileges.
    
    Fixes: 05ba1f082300 ("fuse: add FALLOCATE operation")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cdf01c807e974048c43c7fd3ca574f6086a57906
Author: Gaosheng Cui <cuigaosheng1@huawei.com>
Date:   Tue Oct 25 21:33:57 2022 +0800

    capabilities: fix potential memleak on error path from vfs_getxattr_alloc()
    
    commit 8cf0a1bc12870d148ae830a4ba88cfdf0e879cee upstream.
    
    In cap_inode_getsecurity(), we will use vfs_getxattr_alloc() to
    complete the memory allocation of tmpbuf, if we have completed
    the memory allocation of tmpbuf, but failed to call handler->get(...),
    there will be a memleak in below logic:
    
      |-- ret = (int)vfs_getxattr_alloc(mnt_userns, ...)
        |           /* ^^^ alloc for tmpbuf */
        |-- value = krealloc(*xattr_value, error + 1, flags)
        |           /* ^^^ alloc memory */
        |-- error = handler->get(handler, ...)
        |           /* error! */
        |-- *xattr_value = value
        |           /* xattr_value is &tmpbuf (memory leak!) */
    
    So we will try to free(tmpbuf) after vfs_getxattr_alloc() fails to fix it.
    
    Cc: stable@vger.kernel.org
    Fixes: 8db6c34f1dbc ("Introduce v3 namespaced file capabilities")
    Signed-off-by: Gaosheng Cui <cuigaosheng1@huawei.com>
    Acked-by: Serge Hallyn <serge@hallyn.com>
    [PM: subject line and backtrace tweaks]
    Signed-off-by: Paul Moore <paul@paul-moore.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ff32d8a099dcac080ede4f0edfece75254d26a19
Author: Zheng Yejian <zhengyejian1@huawei.com>
Date:   Mon Oct 17 10:38:06 2022 +0000

    tracing/histogram: Update document for KEYS_MAX size
    
    commit a635beeacc6d56d2b71c39e6c0103f85b53d108e upstream.
    
    After commit 4f36c2d85ced ("tracing: Increase tracing map KEYS_MAX size"),
    'keys' supports up to three fields.
    
    Signed-off-by: Zheng Yejian <zhengyejian1@huawei.com>
    Cc: stable@vger.kernel.org
    Acked-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Link: https://lore.kernel.org/r/20221017103806.2479139-1-zhengyejian1@huawei.com
    Signed-off-by: Jonathan Corbet <corbet@lwn.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 533bfacbacb86f1e415d09e7a602de871a16a90e
Author: Rasmus Villemoes <linux@rasmusvillemoes.dk>
Date:   Fri Oct 21 08:01:53 2022 +0200

    tools/nolibc/string: Fix memcmp() implementation
    
    commit b3f4f51ea68a495f8a5956064c33dce711a2df91 upstream.
    
    The C standard says that memcmp() must treat the buffers as consisting
    of "unsigned chars". If char happens to be unsigned, the casts are ok,
    but then obviously the c1 variable can never contain a negative
    value. And when char is signed, the casts are wrong, and there's still
    a problem with using an 8-bit quantity to hold the difference, because
    that can range from -255 to +255.
    
    For example, assuming char is signed, comparing two 1-byte buffers,
    one containing 0x00 and another 0x80, the current implementation would
    return -128 for both memcmp(a, b, 1) and memcmp(b, a, 1), whereas one
    of those should of course return something positive.
    
    Signed-off-by: Rasmus Villemoes <linux@rasmusvillemoes.dk>
    Fixes: 66b6f755ad45 ("rcutorture: Import a copy of nolibc")
    Cc: stable@vger.kernel.org # v5.0+
    Signed-off-by: Willy Tarreau <w@1wt.eu>
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f100a02748613c108481b1d3baaa15b60494e4cc
Author: Li Qiang <liq3ea@163.com>
Date:   Fri Nov 4 08:49:31 2022 +0900

    kprobe: reverse kp->flags when arm_kprobe failed
    
    commit 4a6f316d6855a434f56dbbeba05e14c01acde8f8 upstream.
    
    In aggregate kprobe case, when arm_kprobe failed,
    we need set the kp->flags with KPROBE_FLAG_DISABLED again.
    If not, the 'kp' kprobe will been considered as enabled
    but it actually not enabled.
    
    Link: https://lore.kernel.org/all/20220902155820.34755-1-liq3ea@163.com/
    
    Fixes: 12310e343755 ("kprobes: Propagate error from arm_kprobe_ftrace()")
    Cc: stable@vger.kernel.org
    Signed-off-by: Li Qiang <liq3ea@163.com>
    Acked-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bef08acbe560a926b4cee9cc46404cc98ae5703b
Author: Shang XiaoJing <shangxiaojing@huawei.com>
Date:   Wed Nov 2 15:29:54 2022 +0800

    tracing: kprobe: Fix memory leak in test_gen_kprobe/kretprobe_cmd()
    
    commit 66f0919c953ef7b55e5ab94389a013da2ce80a2c upstream.
    
    test_gen_kprobe_cmd() only free buf in fail path, hence buf will leak
    when there is no failure. Move kfree(buf) from fail path to common path
    to prevent the memleak. The same reason and solution in
    test_gen_kretprobe_cmd().
    
    unreferenced object 0xffff888143b14000 (size 2048):
      comm "insmod", pid 52490, jiffies 4301890980 (age 40.553s)
      hex dump (first 32 bytes):
        70 3a 6b 70 72 6f 62 65 73 2f 67 65 6e 5f 6b 70  p:kprobes/gen_kp
        72 6f 62 65 5f 74 65 73 74 20 64 6f 5f 73 79 73  robe_test do_sys
      backtrace:
        [<000000006d7b836b>] kmalloc_trace+0x27/0xa0
        [<0000000009528b5b>] 0xffffffffa059006f
        [<000000008408b580>] do_one_initcall+0x87/0x2a0
        [<00000000c4980a7e>] do_init_module+0xdf/0x320
        [<00000000d775aad0>] load_module+0x3006/0x3390
        [<00000000e9a74b80>] __do_sys_finit_module+0x113/0x1b0
        [<000000003726480d>] do_syscall_64+0x35/0x80
        [<000000003441e93b>] entry_SYSCALL_64_after_hwframe+0x46/0xb0
    
    Link: https://lore.kernel.org/all/20221102072954.26555-1-shangxiaojing@huawei.com/
    
    Fixes: 64836248dda2 ("tracing: Add kprobe event command generation test module")
    Cc: stable@vger.kernel.org
    Signed-off-by: Shang XiaoJing <shangxiaojing@huawei.com>
    Acked-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Signed-off-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2bf33b5ea46dbe547de44cdcbee6b1c0b6c167d4
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Wed Jul 13 10:52:07 2022 -0700

    tcp/udp: Make early_demux back namespacified.
    
    commit 11052589cf5c0bab3b4884d423d5f60c38fcf25d upstream.
    
    Commit e21145a9871a ("ipv4: namespacify ip_early_demux sysctl knob") made
    it possible to enable/disable early_demux on a per-netns basis.  Then, we
    introduced two knobs, tcp_early_demux and udp_early_demux, to switch it for
    TCP/UDP in commit dddb64bcb346 ("net: Add sysctl to toggle early demux for
    tcp and udp").  However, the .proc_handler() was wrong and actually
    disabled us from changing the behaviour in each netns.
    
    We can execute early_demux if net.ipv4.ip_early_demux is on and each proto
    .early_demux() handler is not NULL.  When we toggle (tcp|udp)_early_demux,
    the change itself is saved in each netns variable, but the .early_demux()
    handler is a global variable, so the handler is switched based on the
    init_net's sysctl variable.  Thus, netns (tcp|udp)_early_demux knobs have
    nothing to do with the logic.  Whether we CAN execute proto .early_demux()
    is always decided by init_net's sysctl knob, and whether we DO it or not is
    by each netns ip_early_demux knob.
    
    This patch namespacifies (tcp|udp)_early_demux again.  For now, the users
    of the .early_demux() handler are TCP and UDP only, and they are called
    directly to avoid retpoline.  So, we can remove the .early_demux() handler
    from inet6?_protos and need not dereference them in ip6?_rcv_finish_core().
    If another proto needs .early_demux(), we can restore it at that time.
    
    Fixes: dddb64bcb346 ("net: Add sysctl to toggle early demux for tcp and udp")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Link: https://lore.kernel.org/r/20220713175207.7727-1-kuniyu@amazon.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ea5f2fd4640ecbb9df969bf8bb27733ae2183169
Author: Li Huafei <lihuafei1@huawei.com>
Date:   Thu Nov 3 11:10:10 2022 +0800

    ftrace: Fix use-after-free for dynamic ftrace_ops
    
    commit 0e792b89e6800cd9cb4757a76a96f7ef3e8b6294 upstream.
    
    KASAN reported a use-after-free with ftrace ops [1]. It was found from
    vmcore that perf had registered two ops with the same content
    successively, both dynamic. After unregistering the second ops, a
    use-after-free occurred.
    
    In ftrace_shutdown(), when the second ops is unregistered, the
    FTRACE_UPDATE_CALLS command is not set because there is another enabled
    ops with the same content.  Also, both ops are dynamic and the ftrace
    callback function is ftrace_ops_list_func, so the
    FTRACE_UPDATE_TRACE_FUNC command will not be set. Eventually the value
    of 'command' will be 0 and ftrace_shutdown() will skip the rcu
    synchronization.
    
    However, ftrace may be activated. When the ops is released, another CPU
    may be accessing the ops.  Add the missing synchronization to fix this
    problem.
    
    [1]
    BUG: KASAN: use-after-free in __ftrace_ops_list_func kernel/trace/ftrace.c:7020 [inline]
    BUG: KASAN: use-after-free in ftrace_ops_list_func+0x2b0/0x31c kernel/trace/ftrace.c:7049
    Read of size 8 at addr ffff56551965bbc8 by task syz-executor.2/14468
    
    CPU: 1 PID: 14468 Comm: syz-executor.2 Not tainted 5.10.0 #7
    Hardware name: linux,dummy-virt (DT)
    Call trace:
     dump_backtrace+0x0/0x40c arch/arm64/kernel/stacktrace.c:132
     show_stack+0x30/0x40 arch/arm64/kernel/stacktrace.c:196
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x1b4/0x248 lib/dump_stack.c:118
     print_address_description.constprop.0+0x28/0x48c mm/kasan/report.c:387
     __kasan_report mm/kasan/report.c:547 [inline]
     kasan_report+0x118/0x210 mm/kasan/report.c:564
     check_memory_region_inline mm/kasan/generic.c:187 [inline]
     __asan_load8+0x98/0xc0 mm/kasan/generic.c:253
     __ftrace_ops_list_func kernel/trace/ftrace.c:7020 [inline]
     ftrace_ops_list_func+0x2b0/0x31c kernel/trace/ftrace.c:7049
     ftrace_graph_call+0x0/0x4
     __might_sleep+0x8/0x100 include/linux/perf_event.h:1170
     __might_fault mm/memory.c:5183 [inline]
     __might_fault+0x58/0x70 mm/memory.c:5171
     do_strncpy_from_user lib/strncpy_from_user.c:41 [inline]
     strncpy_from_user+0x1f4/0x4b0 lib/strncpy_from_user.c:139
     getname_flags+0xb0/0x31c fs/namei.c:149
     getname+0x2c/0x40 fs/namei.c:209
     [...]
    
    Allocated by task 14445:
     kasan_save_stack+0x24/0x50 mm/kasan/common.c:48
     kasan_set_track mm/kasan/common.c:56 [inline]
     __kasan_kmalloc mm/kasan/common.c:479 [inline]
     __kasan_kmalloc.constprop.0+0x110/0x13c mm/kasan/common.c:449
     kasan_kmalloc+0xc/0x14 mm/kasan/common.c:493
     kmem_cache_alloc_trace+0x440/0x924 mm/slub.c:2950
     kmalloc include/linux/slab.h:563 [inline]
     kzalloc include/linux/slab.h:675 [inline]
     perf_event_alloc.part.0+0xb4/0x1350 kernel/events/core.c:11230
     perf_event_alloc kernel/events/core.c:11733 [inline]
     __do_sys_perf_event_open kernel/events/core.c:11831 [inline]
     __se_sys_perf_event_open+0x550/0x15f4 kernel/events/core.c:11723
     __arm64_sys_perf_event_open+0x6c/0x80 kernel/events/core.c:11723
     [...]
    
    Freed by task 14445:
     kasan_save_stack+0x24/0x50 mm/kasan/common.c:48
     kasan_set_track+0x24/0x34 mm/kasan/common.c:56
     kasan_set_free_info+0x20/0x40 mm/kasan/generic.c:358
     __kasan_slab_free.part.0+0x11c/0x1b0 mm/kasan/common.c:437
     __kasan_slab_free mm/kasan/common.c:445 [inline]
     kasan_slab_free+0x2c/0x40 mm/kasan/common.c:446
     slab_free_hook mm/slub.c:1569 [inline]
     slab_free_freelist_hook mm/slub.c:1608 [inline]
     slab_free mm/slub.c:3179 [inline]
     kfree+0x12c/0xc10 mm/slub.c:4176
     perf_event_alloc.part.0+0xa0c/0x1350 kernel/events/core.c:11434
     perf_event_alloc kernel/events/core.c:11733 [inline]
     __do_sys_perf_event_open kernel/events/core.c:11831 [inline]
     __se_sys_perf_event_open+0x550/0x15f4 kernel/events/core.c:11723
     [...]
    
    Link: https://lore.kernel.org/linux-trace-kernel/20221103031010.166498-1-lihuafei1@huawei.com
    
    Fixes: edb096e00724f ("ftrace: Fix memleak when unregistering dynamic ops when tracing disabled")
    Cc: stable@vger.kernel.org
    Suggested-by: Steven Rostedt <rostedt@goodmis.org>
    Signed-off-by: Li Huafei <lihuafei1@huawei.com>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 06de93a47cec1920a7c8d99577c30f80b97b5f0c
Author: David Sterba <dsterba@suse.com>
Date:   Tue Oct 18 16:05:52 2022 +0200

    btrfs: fix type of parameter generation in btrfs_get_dentry
    
    commit 2398091f9c2c8e0040f4f9928666787a3e8108a7 upstream.
    
    The type of parameter generation has been u32 since the beginning,
    however all callers pass a u64 generation, so unify the types to prevent
    potential loss.
    
    CC: stable@vger.kernel.org # 4.9+
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e33ce54cef5d429430e3b1ae5c8ee4f4103c4fdc
Author: James Clark <james.clark@arm.com>
Date:   Tue Oct 25 14:10:32 2022 +0100

    coresight: cti: Fix hang in cti_disable_hw()
    
    commit 6746eae4bbaddcc16b40efb33dab79210828b3ce upstream.
    
    cti_enable_hw() and cti_disable_hw() are called from an atomic context
    so shouldn't use runtime PM because it can result in a sleep when
    communicating with firmware.
    
    Since commit 3c6656337852 ("Revert "firmware: arm_scmi: Add clock
    management to the SCMI power domain""), this causes a hang on Juno when
    running the Perf Coresight tests or running this command:
    
      perf record -e cs_etm//u -- ls
    
    This was also missed until the revert commit because pm_runtime_put()
    was called with the wrong device until commit 692c9a499b28 ("coresight:
    cti: Correct the parameter for pm_runtime_put")
    
    With lock and scheduler debugging enabled the following is output:
    
       coresight cti_sys0: cti_enable_hw -- dev:cti_sys0  parent: 20020000.cti
       BUG: sleeping function called from invalid context at drivers/base/power/runtime.c:1151
       in_atomic(): 1, irqs_disabled(): 128, non_block: 0, pid: 330, name: perf-exec
       preempt_count: 2, expected: 0
       RCU nest depth: 0, expected: 0
       INFO: lockdep is turned off.
       irq event stamp: 0
       hardirqs last  enabled at (0): [<0000000000000000>] 0x0
       hardirqs last disabled at (0): [<ffff80000822b394>] copy_process+0xa0c/0x1948
       softirqs last  enabled at (0): [<ffff80000822b394>] copy_process+0xa0c/0x1948
       softirqs last disabled at (0): [<0000000000000000>] 0x0
       CPU: 3 PID: 330 Comm: perf-exec Not tainted 6.0.0-00053-g042116d99298 #7
       Hardware name: ARM LTD ARM Juno Development Platform/ARM Juno Development Platform, BIOS EDK II Sep 13 2022
       Call trace:
        dump_backtrace+0x134/0x140
        show_stack+0x20/0x58
        dump_stack_lvl+0x8c/0xb8
        dump_stack+0x18/0x34
        __might_resched+0x180/0x228
        __might_sleep+0x50/0x88
        __pm_runtime_resume+0xac/0xb0
        cti_enable+0x44/0x120
        coresight_control_assoc_ectdev+0xc0/0x150
        coresight_enable_path+0xb4/0x288
        etm_event_start+0x138/0x170
        etm_event_add+0x48/0x70
        event_sched_in.isra.122+0xb4/0x280
        merge_sched_in+0x1fc/0x3d0
        visit_groups_merge.constprop.137+0x16c/0x4b0
        ctx_sched_in+0x114/0x1f0
        perf_event_sched_in+0x60/0x90
        ctx_resched+0x68/0xb0
        perf_event_exec+0x138/0x508
        begin_new_exec+0x52c/0xd40
        load_elf_binary+0x6b8/0x17d0
        bprm_execve+0x360/0x7f8
        do_execveat_common.isra.47+0x218/0x238
        __arm64_sys_execve+0x48/0x60
        invoke_syscall+0x4c/0x110
        el0_svc_common.constprop.4+0xfc/0x120
        do_el0_svc+0x34/0xc0
        el0_svc+0x40/0x98
        el0t_64_sync_handler+0x98/0xc0
        el0t_64_sync+0x170/0x174
    
    Fix the issue by removing the runtime PM calls completely. They are not
    needed here because it must have already been done when building the
    path for a trace.
    
    Fixes: 835d722ba10a ("coresight: cti: Initial CoreSight CTI Driver")
    Cc: stable <stable@kernel.org>
    Reported-by: Aishwarya TCV <Aishwarya.TCV@arm.com>
    Reported-by: Cristian Marussi <Cristian.Marussi@arm.com>
    Suggested-by: Suzuki K Poulose <suzuki.poulose@arm.com>
    Signed-off-by: James Clark <james.clark@arm.com>
    Reviewed-by: Mike Leach <mike.leach@linaro.org>
    Tested-by: Mike Leach <mike.leach@linaro.org>
    [ Fix build warnings ]
    Signed-off-by: Suzuki K Poulose <suzuki.poulose@arm.com>
    Link: https://lore.kernel.org/r/20221025131032.1149459-1-suzuki.poulose@arm.com
    Signed-off-by: James Clark <james.clark@arm.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 015ac18be7de25d17d6e5f1643cb3b60bfbe859e
Author: Carlos Llamas <cmllamas@google.com>
Date:   Fri Nov 4 17:54:49 2022 +0000

    binder: fix UAF of alloc->vma in race with munmap()
    
    In commit 720c24192404 ("ANDROID: binder: change down_write to
    down_read") binder assumed the mmap read lock is sufficient to protect
    alloc->vma inside binder_update_page_range(). This used to be accurate
    until commit dd2283f2605e ("mm: mmap: zap pages with read mmap_sem in
    munmap"), which now downgrades the mmap_lock after detaching the vma
    from the rbtree in munmap(). Then it proceeds to teardown and free the
    vma with only the read lock held.
    
    This means that accesses to alloc->vma in binder_update_page_range() now
    will race with vm_area_free() in munmap() and can cause a UAF as shown
    in the following KASAN trace:
    
      ==================================================================
      BUG: KASAN: use-after-free in vm_insert_page+0x7c/0x1f0
      Read of size 8 at addr ffff16204ad00600 by task server/558
    
      CPU: 3 PID: 558 Comm: server Not tainted 5.10.150-00001-gdc8dcf942daa #1
      Hardware name: linux,dummy-virt (DT)
      Call trace:
       dump_backtrace+0x0/0x2a0
       show_stack+0x18/0x2c
       dump_stack+0xf8/0x164
       print_address_description.constprop.0+0x9c/0x538
       kasan_report+0x120/0x200
       __asan_load8+0xa0/0xc4
       vm_insert_page+0x7c/0x1f0
       binder_update_page_range+0x278/0x50c
       binder_alloc_new_buf+0x3f0/0xba0
       binder_transaction+0x64c/0x3040
       binder_thread_write+0x924/0x2020
       binder_ioctl+0x1610/0x2e5c
       __arm64_sys_ioctl+0xd4/0x120
       el0_svc_common.constprop.0+0xac/0x270
       do_el0_svc+0x38/0xa0
       el0_svc+0x1c/0x2c
       el0_sync_handler+0xe8/0x114
       el0_sync+0x180/0x1c0
    
      Allocated by task 559:
       kasan_save_stack+0x38/0x6c
       __kasan_kmalloc.constprop.0+0xe4/0xf0
       kasan_slab_alloc+0x18/0x2c
       kmem_cache_alloc+0x1b0/0x2d0
       vm_area_alloc+0x28/0x94
       mmap_region+0x378/0x920
       do_mmap+0x3f0/0x600
       vm_mmap_pgoff+0x150/0x17c
       ksys_mmap_pgoff+0x284/0x2dc
       __arm64_sys_mmap+0x84/0xa4
       el0_svc_common.constprop.0+0xac/0x270
       do_el0_svc+0x38/0xa0
       el0_svc+0x1c/0x2c
       el0_sync_handler+0xe8/0x114
       el0_sync+0x180/0x1c0
    
      Freed by task 560:
       kasan_save_stack+0x38/0x6c
       kasan_set_track+0x28/0x40
       kasan_set_free_info+0x24/0x4c
       __kasan_slab_free+0x100/0x164
       kasan_slab_free+0x14/0x20
       kmem_cache_free+0xc4/0x34c
       vm_area_free+0x1c/0x2c
       remove_vma+0x7c/0x94
       __do_munmap+0x358/0x710
       __vm_munmap+0xbc/0x130
       __arm64_sys_munmap+0x4c/0x64
       el0_svc_common.constprop.0+0xac/0x270
       do_el0_svc+0x38/0xa0
       el0_svc+0x1c/0x2c
       el0_sync_handler+0xe8/0x114
       el0_sync+0x180/0x1c0
    
      [...]
      ==================================================================
    
    To prevent the race above, revert back to taking the mmap write lock
    inside binder_update_page_range(). One might expect an increase of mmap
    lock contention. However, binder already serializes these calls via top
    level alloc->mutex. Also, there was no performance impact shown when
    running the binder benchmark tests.
    
    Note this patch is specific to stable branches 5.4 and 5.10. Since in
    newer kernel releases binder no longer caches a pointer to the vma.
    Instead, it has been refactored to use vma_lookup() which avoids the
    issue described here. This switch was introduced in commit a43cfc87caaf
    ("android: binder: stop saving a pointer to the VMA").
    
    Fixes: dd2283f2605e ("mm: mmap: zap pages with read mmap_sem in munmap")
    Reported-by: Jann Horn <jannh@google.com>
    Cc: <stable@vger.kernel.org> # 5.10.x
    Cc: Minchan Kim <minchan@kernel.org>
    Cc: Yang Shi <yang.shi@linux.alibaba.com>
    Cc: Liam Howlett <liam.howlett@oracle.com>
    Signed-off-by: Carlos Llamas <cmllamas@google.com>
    Acked-by: Todd Kjos <tkjos@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 836686e1a01d7e2fda6a5a18252243ff30a6e196
Author: Vasily Averin <vasily.averin@linux.dev>
Date:   Thu Sep 2 14:55:31 2021 -0700

    memcg: enable accounting of ipc resources
    
    commit 18319498fdd4cdf8c1c2c48cd432863b1f915d6f upstream.
    
    When user creates IPC objects it forces kernel to allocate memory for
    these long-living objects.
    
    It makes sense to account them to restrict the host's memory consumption
    from inside the memcg-limited container.
    
    This patch enables accounting for IPC shared memory segments, messages
    semaphores and semaphore's undo lists.
    
    Link: https://lkml.kernel.org/r/d6507b06-4df6-78f8-6c54-3ae86e3b5339@virtuozzo.com
    Signed-off-by: Vasily Averin <vvs@virtuozzo.com>
    Reviewed-by: Shakeel Butt <shakeelb@google.com>
    Cc: Alexander Viro <viro@zeniv.linux.org.uk>
    Cc: Alexey Dobriyan <adobriyan@gmail.com>
    Cc: Andrei Vagin <avagin@gmail.com>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Borislav Petkov <bp@suse.de>
    Cc: Christian Brauner <christian.brauner@ubuntu.com>
    Cc: Dmitry Safonov <0x7f454c46@gmail.com>
    Cc: "Eric W. Biederman" <ebiederm@xmission.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: "J. Bruce Fields" <bfields@fieldses.org>
    Cc: Jeff Layton <jlayton@kernel.org>
    Cc: Jens Axboe <axboe@kernel.dk>
    Cc: Jiri Slaby <jirislaby@kernel.org>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Cc: Kirill Tkhai <ktkhai@virtuozzo.com>
    Cc: Michal Hocko <mhocko@kernel.org>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: Roman Gushchin <guro@fb.com>
    Cc: Serge Hallyn <serge@hallyn.com>
    Cc: Tejun Heo <tj@kernel.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Vladimir Davydov <vdavydov.dev@gmail.com>
    Cc: Yutian Yang <nglaive@gmail.com>
    Cc: Zefan Li <lizefan.x@bytedance.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Luiz Capitulino <luizcap@amazon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e4e4b24b42e710db058cc2a79a7cf16bf02b4915
Author: Sascha Hauer <s.hauer@pengutronix.de>
Date:   Fri Jul 1 13:03:41 2022 +0200

    mtd: rawnand: gpmi: Set WAIT_FOR_READY timeout based on program/erase times
    
    commit 0fddf9ad06fd9f439f137139861556671673e31c upstream.
    
    06781a5026350 Fixes the calculation of the DEVICE_BUSY_TIMEOUT register
    value from busy_timeout_cycles. busy_timeout_cycles is calculated wrong
    though: It is calculated based on the maximum page read time, but the
    timeout is also used for page write and block erase operations which
    require orders of magnitude bigger timeouts.
    
    Fix this by calculating busy_timeout_cycles from the maximum of
    tBERS_max and tPROG_max.
    
    This is for now the easiest and most obvious way to fix the driver.
    There's room for improvements though: The NAND_OP_WAITRDY_INSTR tells us
    the desired timeout for the current operation, so we could program the
    timeout dynamically for each operation instead of setting a fixed
    timeout. Also we could wire up the interrupt handler to actually detect
    and forward timeouts occurred when waiting for the chip being ready.
    
    As a sidenote I verified that the change in 06781a5026350 is really
    correct. I wired up the interrupt handler in my tree and measured the
    time between starting the operation and the timeout interrupt handler
    coming in. The time increases 41us with each step in the timeout
    register which corresponds to 4096 clock cycles with the 99MHz clock
    that I have.
    
    Fixes: 06781a5026350 ("mtd: rawnand: gpmi: Fix setting busy timeout setting")
    Fixes: b1206122069aa ("mtd: rawniand: gpmi: use core timings instead of an empirical derivation")
    Cc: stable@vger.kernel.org
    Signed-off-by: Sascha Hauer <s.hauer@pengutronix.de>
    Acked-by: Han Xu <han.xu@nxp.com>
    Tested-by: Tomasz Moń <tomasz.mon@camlingroup.com>
    Signed-off-by: Richard Weinberger <richard@nod.at>
    Signed-off-by: Tim Harvey <tharvey@gateworks.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 818c36b988b82f31e4be8ad8415e1be902b8e5f8
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Thu Oct 6 11:53:45 2022 -0700

    tcp/udp: Fix memory leak in ipv6_renew_options().
    
    commit 3c52c6bb831f6335c176a0fc7214e26f43adbd11 upstream.
    
    syzbot reported a memory leak [0] related to IPV6_ADDRFORM.
    
    The scenario is that while one thread is converting an IPv6 socket into
    IPv4 with IPV6_ADDRFORM, another thread calls do_ipv6_setsockopt() and
    allocates memory to inet6_sk(sk)->XXX after conversion.
    
    Then, the converted sk with (tcp|udp)_prot never frees the IPv6 resources,
    which inet6_destroy_sock() should have cleaned up.
    
    setsockopt(IPV6_ADDRFORM)                 setsockopt(IPV6_DSTOPTS)
    +-----------------------+                 +----------------------+
    - do_ipv6_setsockopt(sk, ...)
      - sockopt_lock_sock(sk)                 - do_ipv6_setsockopt(sk, ...)
        - lock_sock(sk)                         ^._ called via tcpv6_prot
      - WRITE_ONCE(sk->sk_prot, &tcp_prot)          before WRITE_ONCE()
      - xchg(&np->opt, NULL)
      - txopt_put(opt)
      - sockopt_release_sock(sk)
        - release_sock(sk)                      - sockopt_lock_sock(sk)
                                                  - lock_sock(sk)
                                                - ipv6_set_opt_hdr(sk, ...)
                                                  - ipv6_update_options(sk, opt)
                                                    - xchg(&inet6_sk(sk)->opt, opt)
                                                      ^._ opt is never freed.
    
                                                - sockopt_release_sock(sk)
                                                  - release_sock(sk)
    
    Since IPV6_DSTOPTS allocates options under lock_sock(), we can avoid this
    memory leak by testing whether sk_family is changed by IPV6_ADDRFORM after
    acquiring the lock.
    
    This issue exists from the initial commit between IPV6_ADDRFORM and
    IPV6_PKTOPTIONS.
    
    [0]:
    BUG: memory leak
    unreferenced object 0xffff888009ab9f80 (size 96):
      comm "syz-executor583", pid 328, jiffies 4294916198 (age 13.034s)
      hex dump (first 32 bytes):
        01 00 00 00 48 00 00 00 08 00 00 00 00 00 00 00  ....H...........
        00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
      backtrace:
        [<000000002ee98ae1>] kmalloc include/linux/slab.h:605 [inline]
        [<000000002ee98ae1>] sock_kmalloc+0xb3/0x100 net/core/sock.c:2566
        [<0000000065d7b698>] ipv6_renew_options+0x21e/0x10b0 net/ipv6/exthdrs.c:1318
        [<00000000a8c756d7>] ipv6_set_opt_hdr net/ipv6/ipv6_sockglue.c:354 [inline]
        [<00000000a8c756d7>] do_ipv6_setsockopt.constprop.0+0x28b7/0x4350 net/ipv6/ipv6_sockglue.c:668
        [<000000002854d204>] ipv6_setsockopt+0xdf/0x190 net/ipv6/ipv6_sockglue.c:1021
        [<00000000e69fdcf8>] tcp_setsockopt+0x13b/0x2620 net/ipv4/tcp.c:3789
        [<0000000090da4b9b>] __sys_setsockopt+0x239/0x620 net/socket.c:2252
        [<00000000b10d192f>] __do_sys_setsockopt net/socket.c:2263 [inline]
        [<00000000b10d192f>] __se_sys_setsockopt net/socket.c:2260 [inline]
        [<00000000b10d192f>] __x64_sys_setsockopt+0xbe/0x160 net/socket.c:2260
        [<000000000a80d7aa>] do_syscall_x64 arch/x86/entry/common.c:50 [inline]
        [<000000000a80d7aa>] do_syscall_64+0x38/0x90 arch/x86/entry/common.c:80
        [<000000004562b5c6>] entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Meena Shanmugam <meenashanmugam@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 29997a6fa60de1de2fa0de471e7652efa6e95868
Author: Eric Biggers <ebiggers@google.com>
Date:   Fri Nov 4 16:38:00 2022 -0700

    fscrypt: fix keyring memory leak on mount failure
    
    commit ccd30a476f8e864732de220bd50e6f372f5ebcab upstream.
    
    Commit d7e7b9af104c ("fscrypt: stop using keyrings subsystem for
    fscrypt_master_key") moved the keyring destruction from __put_super() to
    generic_shutdown_super() so that the filesystem's block device(s) are
    still available.  Unfortunately, this causes a memory leak in the case
    where a mount is attempted with the test_dummy_encryption mount option,
    but the mount fails after the option has already been processed.
    
    To fix this, attempt the keyring destruction in both places.
    
    Reported-by: syzbot+104c2a89561289cec13e@syzkaller.appspotmail.com
    Fixes: d7e7b9af104c ("fscrypt: stop using keyrings subsystem for fscrypt_master_key")
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Reviewed-by: Christian Brauner (Microsoft) <brauner@kernel.org>
    Link: https://lore.kernel.org/r/20221011213838.209879-1-ebiggers@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 391cceee6d435e616f68631e68f5b32d480b1e67
Author: Eric Biggers <ebiggers@google.com>
Date:   Fri Nov 4 16:37:59 2022 -0700

    fscrypt: stop using keyrings subsystem for fscrypt_master_key
    
    commit d7e7b9af104c7b389a0c21eb26532511bce4b510 upstream.
    
    The approach of fs/crypto/ internally managing the fscrypt_master_key
    structs as the payloads of "struct key" objects contained in a
    "struct key" keyring has outlived its usefulness.  The original idea was
    to simplify the code by reusing code from the keyrings subsystem.
    However, several issues have arisen that can't easily be resolved:
    
    - When a master key struct is destroyed, blk_crypto_evict_key() must be
      called on any per-mode keys embedded in it.  (This started being the
      case when inline encryption support was added.)  Yet, the keyrings
      subsystem can arbitrarily delay the destruction of keys, even past the
      time the filesystem was unmounted.  Therefore, currently there is no
      easy way to call blk_crypto_evict_key() when a master key is
      destroyed.  Currently, this is worked around by holding an extra
      reference to the filesystem's request_queue(s).  But it was overlooked
      that the request_queue reference is *not* guaranteed to pin the
      corresponding blk_crypto_profile too; for device-mapper devices that
      support inline crypto, it doesn't.  This can cause a use-after-free.
    
    - When the last inode that was using an incompletely-removed master key
      is evicted, the master key removal is completed by removing the key
      struct from the keyring.  Currently this is done via key_invalidate().
      Yet, key_invalidate() takes the key semaphore.  This can deadlock when
      called from the shrinker, since in fscrypt_ioctl_add_key(), memory is
      allocated with GFP_KERNEL under the same semaphore.
    
    - More generally, the fact that the keyrings subsystem can arbitrarily
      delay the destruction of keys (via garbage collection delay, or via
      random processes getting temporary key references) is undesirable, as
      it means we can't strictly guarantee that all secrets are ever wiped.
    
    - Doing the master key lookups via the keyrings subsystem results in the
      key_permission LSM hook being called.  fscrypt doesn't want this, as
      all access control for encrypted files is designed to happen via the
      files themselves, like any other files.  The workaround which SELinux
      users are using is to change their SELinux policy to grant key search
      access to all domains.  This works, but it is an odd extra step that
      shouldn't really have to be done.
    
    The fix for all these issues is to change the implementation to what I
    should have done originally: don't use the keyrings subsystem to keep
    track of the filesystem's fscrypt_master_key structs.  Instead, just
    store them in a regular kernel data structure, and rework the reference
    counting, locking, and lifetime accordingly.  Retain support for
    RCU-mode key lookups by using a hash table.  Replace fscrypt_sb_free()
    with fscrypt_sb_delete(), which releases the keys synchronously and runs
    a bit earlier during unmount, so that block devices are still available.
    
    A side effect of this patch is that neither the master keys themselves
    nor the filesystem keyrings will be listed in /proc/keys anymore.
    ("Master key users" and the master key users keyrings will still be
    listed.)  However, this was mostly an implementation detail, and it was
    intended just for debugging purposes.  I don't know of anyone using it.
    
    This patch does *not* change how "master key users" (->mk_users) works;
    that still uses the keyrings subsystem.  That is still needed for key
    quotas, and changing that isn't necessary to solve the issues listed
    above.  If we decide to change that too, it would be a separate patch.
    
    I've marked this as fixing the original commit that added the fscrypt
    keyring, but as noted above the most important issue that this patch
    fixes wasn't introduced until the addition of inline encryption support.
    
    Fixes: 22d94f493bfb ("fscrypt: add FS_IOC_ADD_ENCRYPTION_KEY ioctl")
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Link: https://lore.kernel.org/r/20220901193208.138056-2-ebiggers@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 092401142b959de39ba3db8425cffd9b30f7dea9
Author: Eric Biggers <ebiggers@google.com>
Date:   Fri Nov 4 16:37:58 2022 -0700

    fscrypt: simplify master key locking
    
    commit 4a4b8721f1a5e4b01e45b3153c68d5a1014b25de upstream.
    
    The stated reasons for separating fscrypt_master_key::mk_secret_sem from
    the standard semaphore contained in every 'struct key' no longer apply.
    
    First, due to commit a992b20cd4ee ("fscrypt: add
    fscrypt_prepare_new_inode() and fscrypt_set_context()"),
    fscrypt_get_encryption_info() is no longer called from within a
    filesystem transaction.
    
    Second, due to commit d3ec10aa9581 ("KEYS: Don't write out to userspace
    while holding key semaphore"), the semaphore for the "keyring" key type
    no longer ranks above page faults.
    
    That leaves performance as the only possible reason to keep the separate
    mk_secret_sem.  Specifically, having mk_secret_sem reduces the
    contention between setup_file_encryption_key() and
    FS_IOC_{ADD,REMOVE}_ENCRYPTION_KEY.  However, these ioctls aren't
    executed often, so this doesn't seem to be worth the extra complexity.
    
    Therefore, simplify the locking design by just using key->sem instead of
    mk_secret_sem.
    
    Link: https://lore.kernel.org/r/20201117032626.320275-1-ebiggers@kernel.org
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 54c13d3520ef5b57f5a11cac883fce05d9ce6b52
Author: John Veness <john-linux@pelago.org.uk>
Date:   Fri Jun 24 15:07:57 2022 +0100

    ALSA: usb-audio: Add quirks for MacroSilicon MS2100/MS2106 devices
    
    commit 6e2c9105e0b743c92a157389d40f00b81bdd09fe upstream.
    
    Treat the claimed 96kHz 1ch in the descriptors as 48kHz 2ch, so that
    the audio stream doesn't sound mono. Also fix initial stream
    alignment, so that left and right channels are in the correct order.
    
    Signed-off-by: John Veness <john-linux@pelago.org.uk>
    Link: https://lore.kernel.org/r/20220624140757.28758-1-john-linux@pelago.org.uk
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a0e2577cf3cca31e5ad1cbb3f5b68d5d2f5d83ee
Author: Yu Kuai <yukuai3@huawei.com>
Date:   Fri May 13 10:35:06 2022 +0800

    block, bfq: protect 'bfqd->queued' by 'bfqd->lock'
    
    commit 181490d5321806e537dc5386db5ea640b826bf78 upstream.
    
    If bfq_schedule_dispatch() is called from bfq_idle_slice_timer_body(),
    then 'bfqd->queued' is read without holding 'bfqd->lock'. This is
    wrong since it can be wrote concurrently.
    
    Fix the problem by holding 'bfqd->lock' in such case.
    
    Signed-off-by: Yu Kuai <yukuai3@huawei.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Reviewed-by: Chaitanya Kulkarni <kch@nvidia.com>
    Link: https://lore.kernel.org/r/20220513023507.2625717-2-yukuai3@huawei.com
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Cc: Khazhy Kumykov <khazhy@chromium.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 26ca2ac091b49281d73df86111d16e5a76e43bd7
Author: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
Date:   Mon Oct 31 16:10:52 2022 -0700

    Bluetooth: L2CAP: Fix attempting to access uninitialized memory
    
    commit b1a2cd50c0357f243b7435a732b4e62ba3157a2e upstream.
    
    On l2cap_parse_conf_req the variable efs is only initialized if
    remote_efs has been set.
    
    CVE: CVE-2022-42895
    CC: stable@vger.kernel.org
    Reported-by: Tamás Koczka <poprdi@google.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Reviewed-by: Tedd Ho-Jeong An <tedd.an@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6b6f94fb9a74dd2891f11de4e638c6202bc89476
Author: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
Date:   Mon Oct 31 16:10:32 2022 -0700

    Bluetooth: L2CAP: Fix accepting connection request for invalid SPSM
    
    commit 711f8c3fb3db61897080468586b970c87c61d9e4 upstream.
    
    The Bluetooth spec states that the valid range for SPSM is from
    0x0001-0x00ff so it is invalid to accept values outside of this range:
    
      BLUETOOTH CORE SPECIFICATION Version 5.3 | Vol 3, Part A
      page 1059:
      Table 4.15: L2CAP_LE_CREDIT_BASED_CONNECTION_REQ SPSM ranges
    
    CVE: CVE-2022-42896
    CC: stable@vger.kernel.org
    Reported-by: Tamás Koczka <poprdi@google.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Reviewed-by: Tedd Ho-Jeong An <tedd.an@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bfd5e62f9a7ee214661cb6f143a3b40ccc63317f
Author: Chen Zhongjin <chenzhongjin@huawei.com>
Date:   Thu Oct 27 20:13:53 2022 +0800

    i2c: piix4: Fix adapter not be removed in piix4_remove()
    
    [ Upstream commit 569bea74c94d37785682b11bab76f557520477cd ]
    
    In piix4_probe(), the piix4 adapter will be registered in:
    
       piix4_probe()
         piix4_add_adapters_sb800() / piix4_add_adapter()
           i2c_add_adapter()
    
    Based on the probed device type, piix4_add_adapters_sb800() or single
    piix4_add_adapter() will be called.
    For the former case, piix4_adapter_count is set as the number of adapters,
    while for antoher case it is not set and kept default *zero*.
    
    When piix4 is removed, piix4_remove() removes the adapters added in
    piix4_probe(), basing on the piix4_adapter_count value.
    Because the count is zero for the single adapter case, the adapter won't
    be removed and makes the sources allocated for adapter leaked, such as
    the i2c client and device.
    
    These sources can still be accessed by i2c or bus and cause problems.
    An easily reproduced case is that if a new adapter is registered, i2c
    will get the leaked adapter and try to call smbus_algorithm, which was
    already freed:
    
    Triggered by: rmmod i2c_piix4 && modprobe max31730
    
     BUG: unable to handle page fault for address: ffffffffc053d860
     #PF: supervisor read access in kernel mode
     #PF: error_code(0x0000) - not-present page
     Oops: 0000 [#1] PREEMPT SMP KASAN
     CPU: 0 PID: 3752 Comm: modprobe Tainted: G
     Hardware name: QEMU Standard PC (i440FX + PIIX, 1996)
     RIP: 0010:i2c_default_probe (drivers/i2c/i2c-core-base.c:2259) i2c_core
     RSP: 0018:ffff888107477710 EFLAGS: 00000246
     ...
     <TASK>
      i2c_detect (drivers/i2c/i2c-core-base.c:2302) i2c_core
      __process_new_driver (drivers/i2c/i2c-core-base.c:1336) i2c_core
      bus_for_each_dev (drivers/base/bus.c:301)
      i2c_for_each_dev (drivers/i2c/i2c-core-base.c:1823) i2c_core
      i2c_register_driver (drivers/i2c/i2c-core-base.c:1861) i2c_core
      do_one_initcall (init/main.c:1296)
      do_init_module (kernel/module/main.c:2455)
      ...
     </TASK>
     ---[ end trace 0000000000000000 ]---
    
    Fix this problem by correctly set piix4_adapter_count as 1 for the
    single adapter so it can be normally removed.
    
    Fixes: 528d53a1592b ("i2c: piix4: Fix probing of reserved ports on AMD Family 16h Model 30h")
    Signed-off-by: Chen Zhongjin <chenzhongjin@huawei.com>
    Reviewed-by: Jean Delvare <jdelvare@suse.de>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fc3e2fa0a5fb432927fed3f2cdfda22c41340c16
Author: Cristian Marussi <cristian.marussi@arm.com>
Date:   Fri Oct 28 15:08:33 2022 +0100

    arm64: dts: juno: Add thermal critical trip points
    
    [ Upstream commit c4a7b9b587ca1bb4678d48d8be7132492b23a81c ]
    
    When thermnal zones are defined, trip points definitions are mandatory.
    Define a couple of critical trip points for monitoring of existing
    PMIC and SOC thermal zones.
    
    This was lost between txt to yaml conversion and was re-enforced recently
    via the commit 8c596324232d ("dt-bindings: thermal: Fix missing required property")
    
    Cc: Rob Herring <robh+dt@kernel.org>
    Cc: Krzysztof Kozlowski <krzysztof.kozlowski+dt@linaro.org>
    Cc: devicetree@vger.kernel.org
    Signed-off-by: Cristian Marussi <cristian.marussi@arm.com>
    Fixes: f7b636a8d83c ("arm64: dts: juno: add thermal zones for scpi sensors")
    Link: https://lore.kernel.org/r/20221028140833.280091-8-cristian.marussi@arm.com
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b743ecf29ca7323406a20b322cffc3dac1c47468
Author: Cristian Marussi <cristian.marussi@arm.com>
Date:   Fri Oct 28 15:08:29 2022 +0100

    firmware: arm_scmi: Make Rx chan_setup fail on memory errors
    
    [ Upstream commit be9ba1f7f9e0b565b19f4294f5871da9d654bc6d ]
    
    SCMI Rx channels are optional and they can fail to be setup when not
    present but anyway channels setup routines must bail-out on memory errors.
    
    Make channels setup, and related probing, fail when memory errors are
    reported on Rx channels.
    
    Fixes: 5c8a47a5a91d ("firmware: arm_scmi: Make scmi core independent of the transport type")
    Signed-off-by: Cristian Marussi <cristian.marussi@arm.com>
    Link: https://lore.kernel.org/r/20221028140833.280091-4-cristian.marussi@arm.com
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 29e8e9bfc2f2db615f3dab42e0ba1bc73941b0c2
Author: Cristian Marussi <cristian.marussi@arm.com>
Date:   Fri Oct 28 15:08:27 2022 +0100

    firmware: arm_scmi: Suppress the driver's bind attributes
    
    [ Upstream commit fd96fbc8fad35d6b1872c90df8a2f5d721f14d91 ]
    
    Suppress the capability to unbind the core SCMI driver since all the
    SCMI stack protocol drivers depend on it.
    
    Fixes: aa4f886f3893 ("firmware: arm_scmi: add basic driver infrastructure for SCMI")
    Signed-off-by: Cristian Marussi <cristian.marussi@arm.com>
    Link: https://lore.kernel.org/r/20221028140833.280091-2-cristian.marussi@arm.com
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d7b1e2cbe0a467b300409ccd9008515bc18dceea
Author: Tim Harvey <tharvey@gateworks.com>
Date:   Thu Sep 29 12:52:22 2022 -0700

    ARM: dts: imx6qdl-gw59{10,13}: fix user pushbutton GPIO offset
    
    [ Upstream commit bb5ad73941dc3f4e3c2241348f385da6501d50ea ]
    
    The GW5910 and GW5913 have a user pushbutton that is tied to the
    Gateworks System Controller GPIO offset 2. Fix the invalid offset of 0.
    
    Fixes: 64bf0a0af18d ("ARM: dts: imx6qdl-gw: add Gateworks System Controller support")
    Signed-off-by: Tim Harvey <tharvey@gateworks.com>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 160d8904b2b583ac7fb9344bfc68f651c88e9259
Author: Jerry Snitselaar <jsnitsel@redhat.com>
Date:   Sat Oct 22 08:23:52 2022 -0700

    efi/tpm: Pass correct address to memblock_reserve
    
    [ Upstream commit f4cd18c5b2000df0c382f6530eeca9141ea41faf ]
    
    memblock_reserve() expects a physical address, but the address being
    passed for the TPM final events log is what was returned from
    early_memremap(). This results in something like the following:
    
    [    0.000000] memblock_reserve: [0xffffffffff2c0000-0xffffffffff2c00e4] efi_tpm_eventlog_init+0x324/0x370
    
    Pass the address from efi like what is done for the TPM events log.
    
    Fixes: c46f3405692d ("tpm: Reserve the TPM final events table")
    Cc: Matthew Garrett <mjg59@google.com>
    Cc: Jarkko Sakkinen <jarkko@kernel.org>
    Cc: Bartosz Szczepanek <bsz@semihalf.com>
    Cc: Ard Biesheuvel <ardb@kernel.org>
    Signed-off-by: Jerry Snitselaar <jsnitsel@redhat.com>
    Acked-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c40b4d604b3e39262f380deb09504a0022fcbc15
Author: Martin Tůma <martin.tuma@digiteqautomotive.com>
Date:   Tue Oct 18 16:03:37 2022 +0200

    i2c: xiic: Add platform module alias
    
    [ Upstream commit b8caf0a0e04583fb71e21495bef84509182227ea ]
    
    The missing "platform" alias is required for the mgb4 v4l2 driver to load
    the i2c controller driver when probing the HW.
    
    Signed-off-by: Martin Tůma <martin.tuma@digiteqautomotive.com>
    Acked-by: Michal Simek <michal.simek@amd.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5bf8c7798b1c165da70cafd6af3900eb14a39cdd
Author: Danijel Slivka <danijel.slivka@amd.com>
Date:   Tue Oct 4 15:39:44 2022 +0200

    drm/amdgpu: set vm_update_mode=0 as default for Sienna Cichlid in SRIOV case
    
    [ Upstream commit 65f8682b9aaae20c2cdee993e6fe52374ad513c9 ]
    
    For asic with VF MMIO access protection avoid using CPU for VM table updates.
    CPU pagetable updates have issues with HDP flush as VF MMIO access protection
    blocks write to mmBIF_BX_DEV0_EPF0_VF0_HDP_MEM_COHERENCY_FLUSH_CNTL register
    during sriov runtime.
    
    v3: introduce virtualization capability flag AMDGPU_VF_MMIO_ACCESS_PROTECT
    which indicates that VF MMIO write access is not allowed in sriov runtime
    
    Signed-off-by: Danijel Slivka <danijel.slivka@amd.com>
    Reviewed-by: Felix Kuehling <Felix.Kuehling@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 496eb203d046700805bd2b6644898c304ab3b970
Author: Samuel Bailey <samuel.bailey1@gmail.com>
Date:   Wed Oct 5 19:51:23 2022 +0100

    HID: saitek: add madcatz variant of MMO7 mouse device ID
    
    [ Upstream commit 79425b297f56bd481c6e97700a9a4e44c7bcfa35 ]
    
    The MadCatz variant of the MMO7 mouse has the ID 0738:1713 and the same
    quirks as the Saitek variant.
    
    Signed-off-by: Samuel Bailey <samuel.bailey1@gmail.com>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ff06067b7086c0929360fc6101d2a59544ea18a8
Author: Uday Shankar <ushankar@purestorage.com>
Date:   Fri Sep 23 18:02:42 2022 -0600

    scsi: core: Restrict legal sdev_state transitions via sysfs
    
    [ Upstream commit 2331ce6126be8864b39490e705286b66e2344aac ]
    
    Userspace can currently write to sysfs to transition sdev_state to RUNNING
    or OFFLINE from any source state. This causes issues because proper
    transitioning out of some states involves steps besides just changing
    sdev_state, so allowing userspace to change sdev_state regardless of the
    source state can result in inconsistencies; e.g. with ISCSI we can end up
    with sdev_state == SDEV_RUNNING while the device queue is quiesced. Any
    task attempting I/O on the device will then hang, and in more recent
    kernels, iscsid will hang as well.
    
    More detail about this bug is provided in my first attempt:
    
    https://groups.google.com/g/open-iscsi/c/PNKca4HgPDs/m/CXaDkntOAQAJ
    
    Link: https://lore.kernel.org/r/20220924000241.2967323-1-ushankar@purestorage.com
    Signed-off-by: Uday Shankar <ushankar@purestorage.com>
    Suggested-by: Mike Christie <michael.christie@oracle.com>
    Reviewed-by: Hannes Reinecke <hare@suse.de>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9edf20e5a1d805855e78f241cf221d741b50d482
Author: Ashish Kalra <ashish.kalra@amd.com>
Date:   Wed Oct 5 16:32:53 2022 +0000

    ACPI: APEI: Fix integer overflow in ghes_estatus_pool_init()
    
    [ Upstream commit 43d2748394c3feb86c0c771466f5847e274fc043 ]
    
    Change num_ghes from int to unsigned int, preventing an overflow
    and causing subsequent vmalloc() to fail.
    
    The overflow happens in ghes_estatus_pool_init() when calculating
    len during execution of the statement below as both multiplication
    operands here are signed int:
    
    len += (num_ghes * GHES_ESOURCE_PREALLOC_MAX_SIZE);
    
    The following call trace is observed because of this bug:
    
    [    9.317108] swapper/0: vmalloc error: size 18446744071562596352, exceeds total pages, mode:0xcc0(GFP_KERNEL), nodemask=(null),cpuset=/,mems_allowed=0-1
    [    9.317131] Call Trace:
    [    9.317134]  <TASK>
    [    9.317137]  dump_stack_lvl+0x49/0x5f
    [    9.317145]  dump_stack+0x10/0x12
    [    9.317146]  warn_alloc.cold+0x7b/0xdf
    [    9.317150]  ? __device_attach+0x16a/0x1b0
    [    9.317155]  __vmalloc_node_range+0x702/0x740
    [    9.317160]  ? device_add+0x17f/0x920
    [    9.317164]  ? dev_set_name+0x53/0x70
    [    9.317166]  ? platform_device_add+0xf9/0x240
    [    9.317168]  __vmalloc_node+0x49/0x50
    [    9.317170]  ? ghes_estatus_pool_init+0x43/0xa0
    [    9.317176]  vmalloc+0x21/0x30
    [    9.317177]  ghes_estatus_pool_init+0x43/0xa0
    [    9.317179]  acpi_hest_init+0x129/0x19c
    [    9.317185]  acpi_init+0x434/0x4a4
    [    9.317188]  ? acpi_sleep_proc_init+0x2a/0x2a
    [    9.317190]  do_one_initcall+0x48/0x200
    [    9.317195]  kernel_init_freeable+0x221/0x284
    [    9.317200]  ? rest_init+0xe0/0xe0
    [    9.317204]  kernel_init+0x1a/0x130
    [    9.317205]  ret_from_fork+0x22/0x30
    [    9.317208]  </TASK>
    
    Signed-off-by: Ashish Kalra <ashish.kalra@amd.com>
    [ rjw: Subject and changelog edits ]
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit be6e22f54623d8a856a4f167b25be73c2ff1ff80
Author: Hangyu Hua <hbh25y@gmail.com>
Date:   Tue Sep 6 09:46:30 2022 +0200

    media: meson: vdec: fix possible refcount leak in vdec_probe()
    
    [ Upstream commit 7718999356234d9cc6a11b4641bb773928f1390f ]
    
    v4l2_device_unregister need to be called to put the refcount got by
    v4l2_device_register when vdec_probe fails or vdec_remove is called.
    
    Signed-off-by: Hangyu Hua <hbh25y@gmail.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c5fd54a65c35fba67f9426e8ab92b0f0e96b616c
Author: Hans Verkuil <hverkuil-cisco@xs4all.nl>
Date:   Tue Aug 30 07:59:24 2022 +0200

    media: dvb-frontends/drxk: initialize err to 0
    
    [ Upstream commit 20694e96ca089ce6693c2348f8f628ee621e4e74 ]
    
    Fix a compiler warning:
    
    drivers/media/dvb-frontends/drxk_hard.c: In function 'drxk_read_ucblocks':
    drivers/media/dvb-frontends/drxk_hard.c:6673:21: warning: 'err' may be used uninitialized [-Wmaybe-uninitialized]
     6673 |         *ucblocks = (u32) err;
          |                     ^~~~~~~~~
    drivers/media/dvb-frontends/drxk_hard.c:6663:13: note: 'err' was declared here
     6663 |         u16 err;
          |             ^~~
    
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7fdc58d8c213b7adccb6daa9e9cf14e1fadff269
Author: Hans Verkuil <hverkuil-cisco@xs4all.nl>
Date:   Wed Aug 24 09:06:19 2022 +0200

    media: cros-ec-cec: limit msg.len to CEC_MAX_MSG_SIZE
    
    [ Upstream commit 2dc73b48665411a08c4e5f0f823dea8510761603 ]
    
    I expect that the hardware will have limited this to 16, but just in
    case it hasn't, check for this corner case.
    
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1609231f86760c1f6a429de7913dd795b9faa08c
Author: Hans Verkuil <hverkuil-cisco@xs4all.nl>
Date:   Wed Aug 24 09:02:42 2022 +0200

    media: s5p_cec: limit msg.len to CEC_MAX_MSG_SIZE
    
    [ Upstream commit 93f65ce036863893c164ca410938e0968964b26c ]
    
    I expect that the hardware will have limited this to 16, but just in
    case it hasn't, check for this corner case.
    
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c46759e3703b9d0472e34ebf3e8d3fdde207d09c
Author: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
Date:   Tue Aug 23 17:11:36 2022 +0200

    media: rkisp1: Zero v4l2_subdev_format fields in when validating links
    
    [ Upstream commit c53e3a049f35978a150526671587fd46b1ae7ca1 ]
    
    The local sd_fmt variable in rkisp1_capture_link_validate() has
    uninitialized fields, which causes random failures when calling the
    subdev .get_fmt() operation. Fix it by initializing the variable when
    declaring it, which zeros all other fields.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Reviewed-by: Paul Elder <paul.elder@ideasonboard.com>
    Reviewed-by: Dafna Hirschfeld <dafna@fastmail.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3144ce557440b72724dfbe4075881934c900873f
Author: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
Date:   Sat Aug 13 00:44:14 2022 +0200

    media: rkisp1: Initialize color space on resizer sink and source pads
    
    [ Upstream commit 83b9296e399367862845d3b19984444fc756bd61 ]
    
    Initialize the four color space fields on the sink and source video pads
    of the resizer in the .init_cfg() operation. The resizer can't perform
    any color space conversion, so set the sink and source color spaces to
    the same defaults, which match the ISP source video pad default.
    
    Signed-off-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Reviewed-by: Paul Elder <paul.elder@ideasonboard.com>
    Reviewed-by: Dafna Hirschfeld <dafna@fastmail.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6b24d9c2acdac63cb161f677a86a4e380523cf46
Author: Peter Oberparleiter <oberpar@linux.ibm.com>
Date:   Fri Sep 16 15:01:36 2022 +0200

    s390/boot: add secure boot trailer
    
    [ Upstream commit aa127a069ef312aca02b730d5137e1778d0c3ba7 ]
    
    This patch enhances the kernel image adding a trailer as required for
    secure boot by future firmware versions.
    
    Cc: <stable@vger.kernel.org> # 5.2+
    Signed-off-by: Peter Oberparleiter <oberpar@linux.ibm.com>
    Reviewed-by: Sven Schnelle <svens@linux.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit efc6420d65ae90035dd4ad5322b2eef7acc5d516
Author: Mario Limonciello <mario.limonciello@amd.com>
Date:   Mon Oct 24 17:27:19 2022 +0300

    xhci-pci: Set runtime PM as default policy on all xHC 1.2 or later devices
    
    [ Upstream commit a611bf473d1f77b70f7188b5577542cb39b4701b ]
    
    For optimal power consumption of USB4 routers the XHCI PCIe endpoint
    used for tunneling must be in D3.  Historically this is accomplished
    by a long list of PCIe IDs that correspond to these endpoints because
    the xhci_hcd driver will not default to allowing runtime PM for all
    devices.
    
    As both AMD and Intel have released new products with new XHCI controllers
    this list continues to grow. In reviewing the XHCI specification v1.2 on
    page 607 there is already a requirement that the PCI power management
    states D3hot and D3cold must be supported.
    
    In the quirk list, use this to indicate that runtime PM should be allowed
    on XHCI controllers. The following controllers are known to be xHC 1.2 and
    dropped explicitly:
    * AMD Yellow Carp
    * Intel Alder Lake
    * Intel Meteor Lake
    * Intel Raptor Lake
    
    [keep PCI ID for Alder Lake PCH for recently added quirk -Mathias]
    
    Cc: stable@vger.kernel.org
    Suggested-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Link: https://www.intel.com/content/dam/www/public/us/en/documents/technical-specifications/extensible-host-controler-interface-usb-xhci.pdf
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Reviewed-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Link: https://lore.kernel.org/r/20221024142720.4122053-4-mathias.nyman@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 37bb57908dd38d37599bca3e16d13785e81a7900
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Tue Oct 18 11:11:29 2022 +0200

    mtd: parsers: bcm47xxpart: Fix halfblock reads
    
    [ Upstream commit 05e258c6ec669d6d18c494ea03d35962d6f5b545 ]
    
    There is some code in the parser that tries to read 0x8000
    bytes into a block to "read in the middle" of the block. Well
    that only works if the block is also 0x10000 bytes all the time,
    else we get these parse errors as we reach the end of the flash:
    
    spi-nor spi0.0: mx25l1606e (2048 Kbytes)
    mtd_read error while parsing (offset: 0x200000): -22
    mtd_read error while parsing (offset: 0x201000): -22
    (...)
    
    Fix the code to do what I think was intended.
    
    Cc: stable@vger.kernel.org
    Fixes: f0501e81fbaa ("mtd: bcm47xxpart: alternative MAGIC for board_data partition")
    Cc: Rafał Miłecki <zajec5@gmail.com>
    Cc: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/20221018091129.280026-1-linus.walleij@linaro.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 85e458369c0f48d3b27592c0804dedbeb466c4db
Author: Rafał Miłecki <rafal@milecki.pl>
Date:   Thu Mar 17 12:43:16 2022 +0100

    mtd: parsers: bcm47xxpart: print correct offset on read error
    
    [ Upstream commit 4c38eded807043f40f4dc49da6df097f9dcac393 ]
    
    mtd_read() gets called with offset + 0x8000 as argument so use the same
    value in pr_err().
    
    Signed-off-by: Rafał Miłecki <rafal@milecki.pl>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Link: https://lore.kernel.org/linux-mtd/20220317114316.29827-1-zajec5@gmail.com
    Stable-dep-of: 05e258c6ec66 ("mtd: parsers: bcm47xxpart: Fix halfblock reads")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ec54104febdcf4342cac8d718f16202484c6bf2b
Author: Helge Deller <deller@gmx.de>
Date:   Fri Oct 14 20:01:17 2022 +0200

    fbdev: stifb: Fall back to cfb_fillrect() on 32-bit HCRX cards
    
    [ Upstream commit 776d875fd4cbb3884860ea7f63c3958f02b0c80e ]
    
    When the text console is scrolling text upwards it calls the fillrect()
    function to empty the new line. The current implementation doesn't seem
    to work correctly on HCRX cards in 32-bit mode and leave garbage in that
    line instead. Fix it by falling back to standard cfb_fillrect() in that
    case.
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f8c86d7829525e1b0ea4ee232b967661cf7de4cb
Author: Helge Deller <deller@gmx.de>
Date:   Thu Jan 13 16:35:53 2022 +0100

    video/fbdev/stifb: Implement the stifb_fillrect() function
    
    [ Upstream commit 9c379c65241707e44072139d782bc2dfec9b4ab3 ]
    
    The stifb driver (for Artist/HCRX graphics on PA-RISC) was missing
    the fillrect function.
    Tested on a 715/64 PA-RISC machine and in qemu.
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Stable-dep-of: 776d875fd4cb ("fbdev: stifb: Fall back to cfb_fillrect() on 32-bit HCRX cards")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e975d7aecad7df71021947e6797ca719e06598cb
Author: Patrick Thompson <ptf@google.com>
Date:   Thu Oct 13 17:00:17 2022 -0400

    mmc: sdhci-pci-core: Disable ES for ASUS BIOS on Jasper Lake
    
    [ Upstream commit 9dc0033e4658d6f9d9952c3c0c6be3ec25bc2985 ]
    
    Enhanced Strobe (ES) does not work correctly on the ASUS 1100 series of
    devices. Jasper Lake eMMCs (pci_id 8086:4dc4) are supposed to support
    ES. There are also two system families under the series, thus this is
    being scoped to the ASUS BIOS.
    
    The failing ES prevents the installer from writing to disk. Falling back
    to HS400 without ES fixes the issue.
    
    Signed-off-by: Patrick Thompson <ptf@google.com>
    Fixes: 315e3bd7ac19 ("mmc: sdhci-pci: Add support for Intel JSL")
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20221013210017.3751025-1-ptf@google.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit afeae13b8a3c35b450c28c08c5e954a5a6c7df39
Author: Jisheng Zhang <jszhang@kernel.org>
Date:   Thu Mar 11 18:14:32 2021 +0800

    mmc: sdhci-pci: Avoid comma separated statements
    
    [ Upstream commit ba8734dfbe87b9dd68c9d525c0a3a52e8da42167 ]
    
    Use semicolons.
    
    Signed-off-by: Jisheng Zhang <Jisheng.Zhang@synaptics.com>
    Acked-by: Adrian Hunter <adrian.hunter@intel.com>
    Link: https://lore.kernel.org/r/20210311181432.6385cd2b@xhacker.debian
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Stable-dep-of: 9dc0033e4658 ("mmc: sdhci-pci-core: Disable ES for ASUS BIOS on Jasper Lake")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a06721767cfca54f36d82cb265a35ce3f9585705
Author: Sascha Hauer <s.hauer@pengutronix.de>
Date:   Thu Oct 13 11:32:48 2022 +0200

    mmc: sdhci-esdhc-imx: Propagate ESDHC_FLAG_HS400* only on 8bit bus
    
    [ Upstream commit 1ed5c3b22fc78735c539e4767832aea58db6761c ]
    
    The core issues the warning "drop HS400 support since no 8-bit bus" when
    one of the ESDHC_FLAG_HS400* flags is set on a non 8bit capable host. To
    avoid this warning set these flags only on hosts that actually can do
    8bit, i.e. have bus-width = <8> set in the device tree.
    
    Signed-off-by: Sascha Hauer <s.hauer@pengutronix.de>
    Reviewed-by: Haibo Chen <haibo.chen@nxp.com>
    Fixes: 029e2476f9e6 ("mmc: sdhci-esdhc-imx: add HS400_ES support for i.MX8QXP")
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20221013093248.2220802-1-s.hauer@pengutronix.de
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 59400c9b0d0767044212ca042c00440066f0909f
Author: Johan Hovold <johan+linaro@kernel.org>
Date:   Tue Sep 13 10:53:18 2022 +0200

    drm/msm/hdmi: fix IRQ lifetime
    
    [ Upstream commit 152d394842bb564148e68b92486a87db0bf54859 ]
    
    Device-managed resources allocated post component bind must be tied to
    the lifetime of the aggregate DRM device or they will not necessarily be
    released when binding of the aggregate device is deferred.
    
    This is specifically true for the HDMI IRQ, which will otherwise remain
    requested so that the next bind attempt fails when requesting the IRQ a
    second time.
    
    Fix this by tying the device-managed lifetime of the HDMI IRQ to the DRM
    device so that it is released when bind fails.
    
    Fixes: 067fef372c73 ("drm/msm/hdmi: refactor bind/init")
    Cc: stable@vger.kernel.org      # 3.19
    Reviewed-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Tested-by: Kuogee Hsieh <quic_khsieh@quicinc.com>
    Reviewed-by: Kuogee Hsieh <quic_khsieh@quicinc.com>
    Patchwork: https://patchwork.freedesktop.org/patch/502666/
    Link: https://lore.kernel.org/r/20220913085320.8577-9-johan+linaro@kernel.org
    Signed-off-by: Abhinav Kumar <quic_abhinavk@quicinc.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8225bdaec5b043712e613ec6237842227e066695
Author: Daniel Thompson <daniel.thompson@linaro.org>
Date:   Tue Feb 1 17:47:33 2022 +0000

    drm/msm/hdmi: Remove spurious IRQF_ONESHOT flag
    
    [ Upstream commit 088604d37e23e9ec01a501d0e3630bc4f02027a0 ]
    
    Quoting the header comments, IRQF_ONESHOT is "Used by threaded interrupts
    which need to keep the irq line disabled until the threaded handler has
    been run.". When applied to an interrupt that doesn't request a threaded
    irq then IRQF_ONESHOT has a lesser known (undocumented?) side effect,
    which it to disable the forced threading of irqs. For "normal" kernels
    if there is no thread_fn then IRQF_ONESHOT is a nop.
    
    In this case disabling forced threading is not appropriate because the
    driver calls wake_up_all() (via msm_hdmi_i2c_irq) and also directly uses
    the regular spinlock API for locking (in msm_hdmi_hdcp_irq() ). Neither
    of these APIs can be called from no-thread interrupt handlers on
    PREEMPT_RT systems.
    
    Fix this by removing IRQF_ONESHOT.
    
    Signed-off-by: Daniel Thompson <daniel.thompson@linaro.org>
    Reviewed-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
    Link: https://lore.kernel.org/r/20220201174734.196718-3-daniel.thompson@linaro.org
    Signed-off-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
    Stable-dep-of: 152d394842bb ("drm/msm/hdmi: fix IRQ lifetime")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5dbb47ee89762da433cd8458788d7640c85f1a07
Author: Zhengchao Shao <shaozhengchao@huawei.com>
Date:   Wed Nov 2 10:06:10 2022 +0800

    ipv6: fix WARNING in ip6_route_net_exit_late()
    
    [ Upstream commit 768b3c745fe5789f2430bdab02f35a9ad1148d97 ]
    
    During the initialization of ip6_route_net_init_late(), if file
    ipv6_route or rt6_stats fails to be created, the initialization is
    successful by default. Therefore, the ipv6_route or rt6_stats file
    doesn't be found during the remove in ip6_route_net_exit_late(). It
    will cause WRNING.
    
    The following is the stack information:
    name 'rt6_stats'
    WARNING: CPU: 0 PID: 9 at fs/proc/generic.c:712 remove_proc_entry+0x389/0x460
    Modules linked in:
    Workqueue: netns cleanup_net
    RIP: 0010:remove_proc_entry+0x389/0x460
    PKRU: 55555554
    Call Trace:
    <TASK>
    ops_exit_list+0xb0/0x170
    cleanup_net+0x4ea/0xb00
    process_one_work+0x9bf/0x1710
    worker_thread+0x665/0x1080
    kthread+0x2e4/0x3a0
    ret_from_fork+0x1f/0x30
    </TASK>
    
    Fixes: cdb1876192db ("[NETNS][IPV6] route6 - create route6 proc files for the namespace")
    Signed-off-by: Zhengchao Shao <shaozhengchao@huawei.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/20221102020610.351330-1-shaozhengchao@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1c89642e7f2b7ecc9635610653f5c2f0276c0051
Author: Chen Zhongjin <chenzhongjin@huawei.com>
Date:   Tue Nov 1 20:15:52 2022 +0800

    net, neigh: Fix null-ptr-deref in neigh_table_clear()
    
    [ Upstream commit f8017317cb0b279b8ab98b0f3901a2e0ac880dad ]
    
    When IPv6 module gets initialized but hits an error in the middle,
    kenel panic with:
    
    KASAN: null-ptr-deref in range [0x0000000000000598-0x000000000000059f]
    CPU: 1 PID: 361 Comm: insmod
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996)
    RIP: 0010:__neigh_ifdown.isra.0+0x24b/0x370
    RSP: 0018:ffff888012677908 EFLAGS: 00000202
    ...
    Call Trace:
     <TASK>
     neigh_table_clear+0x94/0x2d0
     ndisc_cleanup+0x27/0x40 [ipv6]
     inet6_init+0x21c/0x2cb [ipv6]
     do_one_initcall+0xd3/0x4d0
     do_init_module+0x1ae/0x670
    ...
    Kernel panic - not syncing: Fatal exception
    
    When ipv6 initialization fails, it will try to cleanup and calls:
    
    neigh_table_clear()
      neigh_ifdown(tbl, NULL)
        pneigh_queue_purge(&tbl->proxy_queue, dev_net(dev == NULL))
        # dev_net(NULL) triggers null-ptr-deref.
    
    Fix it by passing NULL to pneigh_queue_purge() in neigh_ifdown() if dev
    is NULL, to make kernel not panic immediately.
    
    Fixes: 66ba215cb513 ("neigh: fix possible DoS due to net iface start/stop loop")
    Signed-off-by: Chen Zhongjin <chenzhongjin@huawei.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Reviewed-by: Denis V. Lunev <den@openvz.org>
    Link: https://lore.kernel.org/r/20221101121552.21890-1-chenzhongjin@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 634f066d02bdb22a26da7deb0c7617ab1a65fc9d
Author: Gaosheng Cui <cuigaosheng1@huawei.com>
Date:   Mon Oct 31 21:26:45 2022 +0800

    net: mdio: fix undefined behavior in bit shift for __mdiobus_register
    
    [ Upstream commit 40e4eb324c59e11fcb927aa46742d28aba6ecb8a ]
    
    Shifting signed 32-bit value by 31 bits is undefined, so changing
    significant bit to unsigned. The UBSAN warning calltrace like below:
    
    UBSAN: shift-out-of-bounds in drivers/net/phy/mdio_bus.c:586:27
    left shift of 1 by 31 places cannot be represented in type 'int'
    Call Trace:
     <TASK>
     dump_stack_lvl+0x7d/0xa5
     dump_stack+0x15/0x1b
     ubsan_epilogue+0xe/0x4e
     __ubsan_handle_shift_out_of_bounds+0x1e7/0x20c
     __mdiobus_register+0x49d/0x4e0
     fixed_mdio_bus_init+0xd8/0x12d
     do_one_initcall+0x76/0x430
     kernel_init_freeable+0x3b3/0x422
     kernel_init+0x24/0x1e0
     ret_from_fork+0x1f/0x30
     </TASK>
    
    Fixes: 4fd5f812c23c ("phylib: allow incremental scanning of an mii bus")
    Signed-off-by: Gaosheng Cui <cuigaosheng1@huawei.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Link: https://lore.kernel.org/r/20221031132645.168421-1-cuigaosheng1@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d9ec6e2fbd4a565b2345d4852f586b7ae3ab41fd
Author: Zhengchao Shao <shaozhengchao@huawei.com>
Date:   Mon Oct 17 15:58:13 2022 +0800

    Bluetooth: L2CAP: fix use-after-free in l2cap_conn_del()
    
    [ Upstream commit 0d0e2d032811280b927650ff3c15fe5020e82533 ]
    
    When l2cap_recv_frame() is invoked to receive data, and the cid is
    L2CAP_CID_A2MP, if the channel does not exist, it will create a channel.
    However, after a channel is created, the hold operation of the channel
    is not performed. In this case, the value of channel reference counting
    is 1. As a result, after hci_error_reset() is triggered, l2cap_conn_del()
    invokes the close hook function of A2MP to release the channel. Then
     l2cap_chan_unlock(chan) will trigger UAF issue.
    
    The process is as follows:
    Receive data:
    l2cap_data_channel()
        a2mp_channel_create()  --->channel ref is 2
        l2cap_chan_put()       --->channel ref is 1
    
    Triger event:
        hci_error_reset()
            hci_dev_do_close()
            ...
            l2cap_disconn_cfm()
                l2cap_conn_del()
                    l2cap_chan_hold()    --->channel ref is 2
                    l2cap_chan_del()     --->channel ref is 1
                    a2mp_chan_close_cb() --->channel ref is 0, release channel
                    l2cap_chan_unlock()  --->UAF of channel
    
    The detailed Call Trace is as follows:
    BUG: KASAN: use-after-free in __mutex_unlock_slowpath+0xa6/0x5e0
    Read of size 8 at addr ffff8880160664b8 by task kworker/u11:1/7593
    Workqueue: hci0 hci_error_reset
    Call Trace:
     <TASK>
     dump_stack_lvl+0xcd/0x134
     print_report.cold+0x2ba/0x719
     kasan_report+0xb1/0x1e0
     kasan_check_range+0x140/0x190
     __mutex_unlock_slowpath+0xa6/0x5e0
     l2cap_conn_del+0x404/0x7b0
     l2cap_disconn_cfm+0x8c/0xc0
     hci_conn_hash_flush+0x11f/0x260
     hci_dev_close_sync+0x5f5/0x11f0
     hci_dev_do_close+0x2d/0x70
     hci_error_reset+0x9e/0x140
     process_one_work+0x98a/0x1620
     worker_thread+0x665/0x1080
     kthread+0x2e4/0x3a0
     ret_from_fork+0x1f/0x30
     </TASK>
    
    Allocated by task 7593:
     kasan_save_stack+0x1e/0x40
     __kasan_kmalloc+0xa9/0xd0
     l2cap_chan_create+0x40/0x930
     amp_mgr_create+0x96/0x990
     a2mp_channel_create+0x7d/0x150
     l2cap_recv_frame+0x51b8/0x9a70
     l2cap_recv_acldata+0xaa3/0xc00
     hci_rx_work+0x702/0x1220
     process_one_work+0x98a/0x1620
     worker_thread+0x665/0x1080
     kthread+0x2e4/0x3a0
     ret_from_fork+0x1f/0x30
    
    Freed by task 7593:
     kasan_save_stack+0x1e/0x40
     kasan_set_track+0x21/0x30
     kasan_set_free_info+0x20/0x30
     ____kasan_slab_free+0x167/0x1c0
     slab_free_freelist_hook+0x89/0x1c0
     kfree+0xe2/0x580
     l2cap_chan_put+0x22a/0x2d0
     l2cap_conn_del+0x3fc/0x7b0
     l2cap_disconn_cfm+0x8c/0xc0
     hci_conn_hash_flush+0x11f/0x260
     hci_dev_close_sync+0x5f5/0x11f0
     hci_dev_do_close+0x2d/0x70
     hci_error_reset+0x9e/0x140
     process_one_work+0x98a/0x1620
     worker_thread+0x665/0x1080
     kthread+0x2e4/0x3a0
     ret_from_fork+0x1f/0x30
    
    Last potentially related work creation:
     kasan_save_stack+0x1e/0x40
     __kasan_record_aux_stack+0xbe/0xd0
     call_rcu+0x99/0x740
     netlink_release+0xe6a/0x1cf0
     __sock_release+0xcd/0x280
     sock_close+0x18/0x20
     __fput+0x27c/0xa90
     task_work_run+0xdd/0x1a0
     exit_to_user_mode_prepare+0x23c/0x250
     syscall_exit_to_user_mode+0x19/0x50
     do_syscall_64+0x42/0x80
     entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    Second to last potentially related work creation:
     kasan_save_stack+0x1e/0x40
     __kasan_record_aux_stack+0xbe/0xd0
     call_rcu+0x99/0x740
     netlink_release+0xe6a/0x1cf0
     __sock_release+0xcd/0x280
     sock_close+0x18/0x20
     __fput+0x27c/0xa90
     task_work_run+0xdd/0x1a0
     exit_to_user_mode_prepare+0x23c/0x250
     syscall_exit_to_user_mode+0x19/0x50
     do_syscall_64+0x42/0x80
     entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    Fixes: d0be8347c623 ("Bluetooth: L2CAP: Fix use-after-free caused by l2cap_chan_put")
    Signed-off-by: Zhengchao Shao <shaozhengchao@huawei.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cb1c012099ef5904cd468bdb8d6fcdfdd9bcb569
Author: Maxim Mikityanskiy <maxtram95@gmail.com>
Date:   Wed Oct 5 00:27:18 2022 +0300

    Bluetooth: L2CAP: Fix use-after-free caused by l2cap_reassemble_sdu
    
    [ Upstream commit 3aff8aaca4e36dc8b17eaa011684881a80238966 ]
    
    Fix the race condition between the following two flows that run in
    parallel:
    
    1. l2cap_reassemble_sdu -> chan->ops->recv (l2cap_sock_recv_cb) ->
       __sock_queue_rcv_skb.
    
    2. bt_sock_recvmsg -> skb_recv_datagram, skb_free_datagram.
    
    An SKB can be queued by the first flow and immediately dequeued and
    freed by the second flow, therefore the callers of l2cap_reassemble_sdu
    can't use the SKB after that function returns. However, some places
    continue accessing struct l2cap_ctrl that resides in the SKB's CB for a
    short time after l2cap_reassemble_sdu returns, leading to a
    use-after-free condition (the stack trace is below, line numbers for
    kernel 5.19.8).
    
    Fix it by keeping a local copy of struct l2cap_ctrl.
    
    BUG: KASAN: use-after-free in l2cap_rx_state_recv (net/bluetooth/l2cap_core.c:6906) bluetooth
    Read of size 1 at addr ffff88812025f2f0 by task kworker/u17:3/43169
    
    Workqueue: hci0 hci_rx_work [bluetooth]
    Call Trace:
     <TASK>
     dump_stack_lvl (lib/dump_stack.c:107 (discriminator 4))
     print_report.cold (mm/kasan/report.c:314 mm/kasan/report.c:429)
     ? l2cap_rx_state_recv (net/bluetooth/l2cap_core.c:6906) bluetooth
     kasan_report (mm/kasan/report.c:162 mm/kasan/report.c:493)
     ? l2cap_rx_state_recv (net/bluetooth/l2cap_core.c:6906) bluetooth
     l2cap_rx_state_recv (net/bluetooth/l2cap_core.c:6906) bluetooth
     l2cap_rx (net/bluetooth/l2cap_core.c:7236 net/bluetooth/l2cap_core.c:7271) bluetooth
     ret_from_fork (arch/x86/entry/entry_64.S:306)
     </TASK>
    
    Allocated by task 43169:
     kasan_save_stack (mm/kasan/common.c:39)
     __kasan_slab_alloc (mm/kasan/common.c:45 mm/kasan/common.c:436 mm/kasan/common.c:469)
     kmem_cache_alloc_node (mm/slab.h:750 mm/slub.c:3243 mm/slub.c:3293)
     __alloc_skb (net/core/skbuff.c:414)
     l2cap_recv_frag (./include/net/bluetooth/bluetooth.h:425 net/bluetooth/l2cap_core.c:8329) bluetooth
     l2cap_recv_acldata (net/bluetooth/l2cap_core.c:8442) bluetooth
     hci_rx_work (net/bluetooth/hci_core.c:3642 net/bluetooth/hci_core.c:3832) bluetooth
     process_one_work (kernel/workqueue.c:2289)
     worker_thread (./include/linux/list.h:292 kernel/workqueue.c:2437)
     kthread (kernel/kthread.c:376)
     ret_from_fork (arch/x86/entry/entry_64.S:306)
    
    Freed by task 27920:
     kasan_save_stack (mm/kasan/common.c:39)
     kasan_set_track (mm/kasan/common.c:45)
     kasan_set_free_info (mm/kasan/generic.c:372)
     ____kasan_slab_free (mm/kasan/common.c:368 mm/kasan/common.c:328)
     slab_free_freelist_hook (mm/slub.c:1780)
     kmem_cache_free (mm/slub.c:3536 mm/slub.c:3553)
     skb_free_datagram (./include/net/sock.h:1578 ./include/net/sock.h:1639 net/core/datagram.c:323)
     bt_sock_recvmsg (net/bluetooth/af_bluetooth.c:295) bluetooth
     l2cap_sock_recvmsg (net/bluetooth/l2cap_sock.c:1212) bluetooth
     sock_read_iter (net/socket.c:1087)
     new_sync_read (./include/linux/fs.h:2052 fs/read_write.c:401)
     vfs_read (fs/read_write.c:482)
     ksys_read (fs/read_write.c:620)
     do_syscall_64 (arch/x86/entry/common.c:50 arch/x86/entry/common.c:80)
     entry_SYSCALL_64_after_hwframe (arch/x86/entry/entry_64.S:120)
    
    Link: https://lore.kernel.org/linux-bluetooth/CAKErNvoqga1WcmoR3-0875esY6TVWFQDandbVZncSiuGPBQXLA@mail.gmail.com/T/#u
    Fixes: d2a7ac5d5d3a ("Bluetooth: Add the ERTM receive state machine")
    Fixes: 4b51dae96731 ("Bluetooth: Add streaming mode receive and incoming packet classifier")
    Signed-off-by: Maxim Mikityanskiy <maxtram95@gmail.com>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0a0dead4ad1a2e2a9bdf133ef45111d7c8daef84
Author: Filipe Manana <fdmanana@suse.com>
Date:   Tue Nov 1 16:15:39 2022 +0000

    btrfs: fix ulist leaks in error paths of qgroup self tests
    
    [ Upstream commit d37de92b38932d40e4a251e876cc388f9aee5f42 ]
    
    In the test_no_shared_qgroup() and test_multiple_refs() qgroup self tests,
    if we fail to add the tree ref, remove the extent item or remove the
    extent ref, we are returning from the test function without freeing the
    "old_roots" ulist that was allocated by the previous calls to
    btrfs_find_all_roots(). Fix that by calling ulist_free() before returning.
    
    Fixes: 442244c96332 ("btrfs: qgroup: Switch self test to extent-oriented qgroup mechanism.")
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 61e06128113711df0534c404fb6bb528eb7d2332
Author: Filipe Manana <fdmanana@suse.com>
Date:   Tue Nov 1 16:15:38 2022 +0000

    btrfs: fix inode list leak during backref walking at find_parent_nodes()
    
    [ Upstream commit 92876eec382a0f19f33d09d2c939e9ca49038ae5 ]
    
    During backref walking, at find_parent_nodes(), if we are dealing with a
    data extent and we get an error while resolving the indirect backrefs, at
    resolve_indirect_refs(), or in the while loop that iterates over the refs
    in the direct refs rbtree, we end up leaking the inode lists attached to
    the direct refs we have in the direct refs rbtree that were not yet added
    to the refs ulist passed as argument to find_parent_nodes(). Since they
    were not yet added to the refs ulist and prelim_release() does not free
    the lists, on error the caller can only free the lists attached to the
    refs that were added to the refs ulist, all the remaining refs get their
    inode lists never freed, therefore leaking their memory.
    
    Fix this by having prelim_release() always free any attached inode list
    to each ref found in the rbtree, and have find_parent_nodes() set the
    ref's inode list to NULL once it transfers ownership of the inode list
    to a ref added to the refs ulist passed to find_parent_nodes().
    
    Fixes: 86d5f9944252 ("btrfs: convert prelimary reference tracking to use rbtrees")
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a52e24c7fcc3c5ce3588a14e3663c00868d36623
Author: Filipe Manana <fdmanana@suse.com>
Date:   Tue Nov 1 16:15:37 2022 +0000

    btrfs: fix inode list leak during backref walking at resolve_indirect_refs()
    
    [ Upstream commit 5614dc3a47e3310fbc77ea3b67eaadd1c6417bf1 ]
    
    During backref walking, at resolve_indirect_refs(), if we get an error
    we jump to the 'out' label and call ulist_free() on the 'parents' ulist,
    which frees all the elements in the ulist - however that does not free
    any inode lists that may be attached to elements, through the 'aux' field
    of a ulist node, so we end up leaking lists if we have any attached to
    the unodes.
    
    Fix this by calling free_leaf_list() instead of ulist_free() when we exit
    from resolve_indirect_refs(). The static function free_leaf_list() is
    moved up for this to be possible and it's slightly simplified by removing
    unnecessary code.
    
    Fixes: 3301958b7c1d ("Btrfs: add inodes before dropping the extent lock in find_all_leafs")
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 81204283ea138a85af380d05c8735751f7dd1242
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Mon Oct 31 20:13:41 2022 +0800

    isdn: mISDN: netjet: fix wrong check of device registration
    
    [ Upstream commit bf00f5426074249058a106a6edbb89e4b25a4d79 ]
    
    The class is set in mISDN_register_device(), but if device_add() returns
    error, it will lead to delete a device without added, fix this by using
    device_is_registered() to check if the device is registered.
    
    Fixes: a900845e5661 ("mISDN: Add support for Traverse Technologies NETJet PCI cards")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e77d213843e67b4373285712699b692f9c743f61
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Mon Oct 31 20:13:40 2022 +0800

    mISDN: fix possible memory leak in mISDN_register_device()
    
    [ Upstream commit e7d1d4d9ac0dfa40be4c2c8abd0731659869b297 ]
    
    Afer commit 1fa5ae857bb1 ("driver core: get rid of struct device's
    bus_id string array"), the name of device is allocated dynamically,
    add put_device() to give up the reference, so that the name can be
    freed in kobject_cleanup() when the refcount is 0.
    
    Set device class before put_device() to avoid null release() function
    WARN message in device_release().
    
    Fixes: 1fa5ae857bb1 ("driver core: get rid of struct device's bus_id string array")
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f06186e5271b980bac03f5c97276ed0146ddc9b0
Author: Zhang Qilong <zhangqilong3@huawei.com>
Date:   Sat Oct 29 00:10:49 2022 +0800

    rose: Fix NULL pointer dereference in rose_send_frame()
    
    [ Upstream commit e97c089d7a49f67027395ddf70bf327eeac2611e ]
    
    The syzkaller reported an issue:
    
    KASAN: null-ptr-deref in range [0x0000000000000380-0x0000000000000387]
    CPU: 0 PID: 4069 Comm: kworker/0:15 Not tainted 6.0.0-syzkaller-02734-g0326074ff465 #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 09/22/2022
    Workqueue: rcu_gp srcu_invoke_callbacks
    RIP: 0010:rose_send_frame+0x1dd/0x2f0 net/rose/rose_link.c:101
    Call Trace:
     <IRQ>
     rose_transmit_clear_request+0x1d5/0x290 net/rose/rose_link.c:255
     rose_rx_call_request+0x4c0/0x1bc0 net/rose/af_rose.c:1009
     rose_loopback_timer+0x19e/0x590 net/rose/rose_loopback.c:111
     call_timer_fn+0x1a0/0x6b0 kernel/time/timer.c:1474
     expire_timers kernel/time/timer.c:1519 [inline]
     __run_timers.part.0+0x674/0xa80 kernel/time/timer.c:1790
     __run_timers kernel/time/timer.c:1768 [inline]
     run_timer_softirq+0xb3/0x1d0 kernel/time/timer.c:1803
     __do_softirq+0x1d0/0x9c8 kernel/softirq.c:571
     [...]
     </IRQ>
    
    It triggers NULL pointer dereference when 'neigh->dev->dev_addr' is
    called in the rose_send_frame(). It's the first occurrence of the
    `neigh` is in rose_loopback_timer() as `rose_loopback_neigh', and
    the 'dev' in 'rose_loopback_neigh' is initialized sa nullptr.
    
    It had been fixed by commit 3b3fd068c56e3fbea30090859216a368398e39bf
    ("rose: Fix Null pointer dereference in rose_send_frame()") ever.
    But it's introduced by commit 3c53cd65dece47dd1f9d3a809f32e59d1d87b2b8
    ("rose: check NULL rose_loopback_neigh->loopback") again.
    
    We fix it by add NULL check in rose_transmit_clear_request(). When
    the 'dev' in 'neigh' is NULL, we don't reply the request and just
    clear it.
    
    syzkaller don't provide repro, and I provide a syz repro like:
    r0 = syz_init_net_socket$bt_sco(0x1f, 0x5, 0x2)
    ioctl$sock_inet_SIOCSIFFLAGS(r0, 0x8914, &(0x7f0000000180)={'rose0\x00', 0x201})
    r1 = syz_init_net_socket$rose(0xb, 0x5, 0x0)
    bind$rose(r1, &(0x7f00000000c0)=@full={0xb, @dev, @null, 0x0, [@null, @null, @netrom, @netrom, @default, @null]}, 0x40)
    connect$rose(r1, &(0x7f0000000240)=@short={0xb, @dev={0xbb, 0xbb, 0xbb, 0x1, 0x0}, @remote={0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x1}, 0x1, @netrom={0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0x0, 0x0}}, 0x1c)
    
    Fixes: 3c53cd65dece ("rose: check NULL rose_loopback_neigh->loopback")
    Signed-off-by: Zhang Qilong <zhangqilong3@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2c8d81bdb2684d53d6cedad7410ba4cf9090e343
Author: Zhengchao Shao <shaozhengchao@huawei.com>
Date:   Mon Oct 31 20:07:05 2022 +0800

    ipvs: fix WARNING in ip_vs_app_net_cleanup()
    
    [ Upstream commit 5663ed63adb9619c98ab7479aa4606fa9b7a548c ]
    
    During the initialization of ip_vs_app_net_init(), if file ip_vs_app
    fails to be created, the initialization is successful by default.
    Therefore, the ip_vs_app file doesn't be found during the remove in
    ip_vs_app_net_cleanup(). It will cause WRNING.
    
    The following is the stack information:
    name 'ip_vs_app'
    WARNING: CPU: 1 PID: 9 at fs/proc/generic.c:712 remove_proc_entry+0x389/0x460
    Modules linked in:
    Workqueue: netns cleanup_net
    RIP: 0010:remove_proc_entry+0x389/0x460
    Call Trace:
    <TASK>
    ops_exit_list+0x125/0x170
    cleanup_net+0x4ea/0xb00
    process_one_work+0x9bf/0x1710
    worker_thread+0x665/0x1080
    kthread+0x2e4/0x3a0
    ret_from_fork+0x1f/0x30
    </TASK>
    
    Fixes: 457c4cbc5a3d ("[NET]: Make /proc/net per network namespace")
    Signed-off-by: Zhengchao Shao <shaozhengchao@huawei.com>
    Acked-by: Julian Anastasov <ja@ssi.bg>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 931f56d59c854263b32075bfac56fdb3b1598d1b
Author: Zhengchao Shao <shaozhengchao@huawei.com>
Date:   Mon Oct 31 20:07:04 2022 +0800

    ipvs: fix WARNING in __ip_vs_cleanup_batch()
    
    [ Upstream commit 3d00c6a0da8ddcf75213e004765e4a42acc71d5d ]
    
    During the initialization of ip_vs_conn_net_init(), if file ip_vs_conn
    or ip_vs_conn_sync fails to be created, the initialization is successful
    by default. Therefore, the ip_vs_conn or ip_vs_conn_sync file doesn't
    be found during the remove.
    
    The following is the stack information:
    name 'ip_vs_conn_sync'
    WARNING: CPU: 3 PID: 9 at fs/proc/generic.c:712
    remove_proc_entry+0x389/0x460
    Modules linked in:
    Workqueue: netns cleanup_net
    RIP: 0010:remove_proc_entry+0x389/0x460
    Call Trace:
    <TASK>
    __ip_vs_cleanup_batch+0x7d/0x120
    ops_exit_list+0x125/0x170
    cleanup_net+0x4ea/0xb00
    process_one_work+0x9bf/0x1710
    worker_thread+0x665/0x1080
    kthread+0x2e4/0x3a0
    ret_from_fork+0x1f/0x30
    </TASK>
    
    Fixes: 61b1ab4583e2 ("IPVS: netns, add basic init per netns.")
    Signed-off-by: Zhengchao Shao <shaozhengchao@huawei.com>
    Acked-by: Julian Anastasov <ja@ssi.bg>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d69328cdb92fcc74ffaf415856fdd226a7aeff7b
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Wed Oct 26 14:32:16 2022 +0200

    ipvs: use explicitly signed chars
    
    [ Upstream commit 5c26159c97b324dc5174a5713eafb8c855cf8106 ]
    
    The `char` type with no explicit sign is sometimes signed and sometimes
    unsigned. This code will break on platforms such as arm, where char is
    unsigned. So mark it here as explicitly signed, so that the
    todrop_counter decrement and subsequent comparison is correct.
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Acked-by: Julian Anastasov <ja@ssi.bg>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b2d7a92aff0fbd93c29d2aa6451fb99f050e2c4e
Author: Pablo Neira Ayuso <pablo@netfilter.org>
Date:   Wed Oct 26 09:54:45 2022 +0200

    netfilter: nf_tables: release flow rule object from commit path
    
    [ Upstream commit 26b5934ff4194e13196bedcba373cd4915071d0e ]
    
    No need to postpone this to the commit release path, since no packets
    are walking over this object, this is accessed from control plane only.
    This helped uncovered UAF triggered by races with the netlink notifier.
    
    Fixes: 9dd732e0bdf5 ("netfilter: nf_tables: memleak flow rule from commit path")
    Reported-by: syzbot+8f747f62763bc6c32916@syzkaller.appspotmail.com
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3583826b443a63681deaa855048d3f2b742af47e
Author: Ziyang Xuan <william.xuanziyang@huawei.com>
Date:   Sat Oct 29 17:41:01 2022 +0800

    net: tun: fix bugs for oversize packet when napi frags enabled
    
    [ Upstream commit 363a5328f4b0517e59572118ccfb7c626d81dca9 ]
    
    Recently, we got two syzkaller problems because of oversize packet
    when napi frags enabled.
    
    One of the problems is because the first seg size of the iov_iter
    from user space is very big, it is 2147479538 which is bigger than
    the threshold value for bail out early in __alloc_pages(). And
    skb->pfmemalloc is true, __kmalloc_reserve() would use pfmemalloc
    reserves without __GFP_NOWARN flag. Thus we got a warning as following:
    
    ========================================================
    WARNING: CPU: 1 PID: 17965 at mm/page_alloc.c:5295 __alloc_pages+0x1308/0x16c4 mm/page_alloc.c:5295
    ...
    Call trace:
     __alloc_pages+0x1308/0x16c4 mm/page_alloc.c:5295
     __alloc_pages_node include/linux/gfp.h:550 [inline]
     alloc_pages_node include/linux/gfp.h:564 [inline]
     kmalloc_large_node+0x94/0x350 mm/slub.c:4038
     __kmalloc_node_track_caller+0x620/0x8e4 mm/slub.c:4545
     __kmalloc_reserve.constprop.0+0x1e4/0x2b0 net/core/skbuff.c:151
     pskb_expand_head+0x130/0x8b0 net/core/skbuff.c:1654
     __skb_grow include/linux/skbuff.h:2779 [inline]
     tun_napi_alloc_frags+0x144/0x610 drivers/net/tun.c:1477
     tun_get_user+0x31c/0x2010 drivers/net/tun.c:1835
     tun_chr_write_iter+0x98/0x100 drivers/net/tun.c:2036
    
    The other problem is because odd IPv6 packets without NEXTHDR_NONE
    extension header and have big packet length, it is 2127925 which is
    bigger than ETH_MAX_MTU(65535). After ipv6_gso_pull_exthdrs() in
    ipv6_gro_receive(), network_header offset and transport_header offset
    are all bigger than U16_MAX. That would trigger skb->network_header
    and skb->transport_header overflow error, because they are all '__u16'
    type. Eventually, it would affect the value for __skb_push(skb, value),
    and make it be a big value. After __skb_push() in ipv6_gro_receive(),
    skb->data would less than skb->head, an out of bounds memory bug occurred.
    That would trigger the problem as following:
    
    ==================================================================
    BUG: KASAN: use-after-free in eth_type_trans+0x100/0x260
    ...
    Call trace:
     dump_backtrace+0xd8/0x130
     show_stack+0x1c/0x50
     dump_stack_lvl+0x64/0x7c
     print_address_description.constprop.0+0xbc/0x2e8
     print_report+0x100/0x1e4
     kasan_report+0x80/0x120
     __asan_load8+0x78/0xa0
     eth_type_trans+0x100/0x260
     napi_gro_frags+0x164/0x550
     tun_get_user+0xda4/0x1270
     tun_chr_write_iter+0x74/0x130
     do_iter_readv_writev+0x130/0x1ec
     do_iter_write+0xbc/0x1e0
     vfs_writev+0x13c/0x26c
    
    To fix the problems, restrict the packet size less than
    (ETH_MAX_MTU - NET_SKB_PAD - NET_IP_ALIGN) which has considered reserved
    skb space in napi_alloc_skb() because transport_header is an offset from
    skb->head. Add len check in tun_napi_alloc_frags() simply.
    
    Fixes: 90e33d459407 ("tun: enable napi_gro_frags() for TUN/TAP driver")
    Signed-off-by: Ziyang Xuan <william.xuanziyang@huawei.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/20221029094101.1653855-1-william.xuanziyang@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5960b9081baca85cc7dcb14aec1de85999ea9d36
Author: Dan Carpenter <error27@gmail.com>
Date:   Fri Oct 28 18:05:00 2022 +0300

    net: sched: Fix use after free in red_enqueue()
    
    [ Upstream commit 8bdc2acd420c6f3dd1f1c78750ec989f02a1e2b9 ]
    
    We can't use "skb" again after passing it to qdisc_enqueue().  This is
    basically identical to commit 2f09707d0c97 ("sch_sfb: Also store skb
    len before calling child enqueue").
    
    Fixes: d7f4f332f082 ("sch_red: update backlog as well")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 24f9c41435a89d73846dbb06b8ba85824bcf9fea
Author: Sergey Shtylyov <s.shtylyov@omp.ru>
Date:   Sat Oct 29 00:07:06 2022 +0300

    ata: pata_legacy: fix pdc20230_set_piomode()
    
    [ Upstream commit 171a93182eccd6e6835d2c86b40787f9f832efaa ]
    
    Clang gives a warning when compiling pata_legacy.c with 'make W=1' about
    the 'rt' local variable in pdc20230_set_piomode() being set but unused.
    Quite obviously, there is an outb() call missing to write back the updated
    variable. Moreover, checking the docs by Petr Soucek revealed that bitwise
    AND should have been done with a negated timing mask and the master/slave
    timing masks were swapped while updating...
    
    Fixes: 669a5db411d8 ("[libata] Add a bunch of PATA drivers.")
    Reported-by: Damien Le Moal <damien.lemoal@opensource.wdc.com>
    Signed-off-by: Sergey Shtylyov <s.shtylyov@omp.ru>
    Signed-off-by: Damien Le Moal <damien.lemoal@opensource.wdc.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c85ee1c3cbc6b3e6e0a10918e49c2266b18089eb
Author: Zhang Changzhong <zhangchangzhong@huawei.com>
Date:   Fri Oct 28 10:09:11 2022 +0800

    net: fec: fix improper use of NETDEV_TX_BUSY
    
    [ Upstream commit 06a4df5863f73af193a4ff7abf7cb04058584f06 ]
    
    The ndo_start_xmit() method must not free skb when returning
    NETDEV_TX_BUSY, since caller is going to requeue freed skb.
    
    Fix it by returning NETDEV_TX_OK in case of dma_map_single() fails.
    
    Fixes: 79f339125ea3 ("net: fec: Add software TSO support")
    Signed-off-by: Zhang Changzhong <zhangchangzhong@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 52438e734c1566f5e2bcd9a065d2d65e306c0555
Author: Shang XiaoJing <shangxiaojing@huawei.com>
Date:   Thu Oct 27 22:03:32 2022 +0800

    nfc: nfcmrvl: Fix potential memory leak in nfcmrvl_i2c_nci_send()
    
    [ Upstream commit 93d904a734a74c54d945a9884b4962977f1176cd ]
    
    nfcmrvl_i2c_nci_send() will be called by nfcmrvl_nci_send(), and skb
    should be freed in nfcmrvl_i2c_nci_send(). However, nfcmrvl_nci_send()
    will only free skb when i2c_master_send() return >=0, which means skb
    will memleak when i2c_master_send() failed. Free skb no matter whether
    i2c_master_send() succeeds.
    
    Fixes: b5b3e23e4cac ("NFC: nfcmrvl: add i2c driver")
    Signed-off-by: Shang XiaoJing <shangxiaojing@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0acfcd2aed4f7eaf086218414c6b7a197c9873f3
Author: Shang XiaoJing <shangxiaojing@huawei.com>
Date:   Thu Oct 27 22:03:31 2022 +0800

    nfc: s3fwrn5: Fix potential memory leak in s3fwrn5_nci_send()
    
    [ Upstream commit 3a146b7e3099dc7cf3114f627d9b79291e2d2203 ]
    
    s3fwrn5_nci_send() will call s3fwrn5_i2c_write() or s3fwrn82_uart_write(),
    and free the skb if write() failed. However, even if the write() run
    succeeds, the skb will not be freed in write(). As the result, the skb
    will memleak. s3fwrn5_nci_send() should also free the skb when write()
    succeeds.
    
    Fixes: c04c674fadeb ("nfc: s3fwrn5: Add driver for Samsung S3FWRN5 NFC Chip")
    Signed-off-by: Shang XiaoJing <shangxiaojing@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9ae2c9a91ff068f4c3e392f47e8e26a1c9f85ebb
Author: Shang XiaoJing <shangxiaojing@huawei.com>
Date:   Thu Oct 27 22:03:30 2022 +0800

    nfc: nxp-nci: Fix potential memory leak in nxp_nci_send()
    
    [ Upstream commit 7bf1ed6aff0f70434bd0cdd45495e83f1dffb551 ]
    
    nxp_nci_send() will call nxp_nci_i2c_write(), and only free skb when
    nxp_nci_i2c_write() failed. However, even if the nxp_nci_i2c_write()
    run succeeds, the skb will not be freed in nxp_nci_i2c_write(). As the
    result, the skb will memleak. nxp_nci_send() should also free the skb
    when nxp_nci_i2c_write() succeeds.
    
    Fixes: dece45855a8b ("NFC: nxp-nci: Add support for NXP NCI chips")
    Signed-off-by: Shang XiaoJing <shangxiaojing@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit eecea068bf116d448c271263d879aa22926cc0d3
Author: wengjianfeng <wengjianfeng@yulong.com>
Date:   Fri Jun 18 17:10:16 2021 +0800

    NFC: nxp-nci: remove unnecessary labels
    
    [ Upstream commit 96a19319921ceb4b2f4c49d1b9bf9de1161e30ca ]
    
    Simplify the code by removing unnecessary labels and returning directly.
    
    Signed-off-by: wengjianfeng <wengjianfeng@yulong.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Stable-dep-of: 7bf1ed6aff0f ("nfc: nxp-nci: Fix potential memory leak in nxp_nci_send()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e8c11ee2d07f7c4dfa2ac0ea8efc4f627e58ea57
Author: Shang XiaoJing <shangxiaojing@huawei.com>
Date:   Thu Oct 27 22:03:29 2022 +0800

    nfc: fdp: Fix potential memory leak in fdp_nci_send()
    
    [ Upstream commit 8e4aae6b8ca76afb1fb64dcb24be44ba814e7f8a ]
    
    fdp_nci_send() will call fdp_nci_i2c_write that will not free skb in
    the function. As a result, when fdp_nci_i2c_write() finished, the skb
    will memleak. fdp_nci_send() should free skb after fdp_nci_i2c_write()
    finished.
    
    Fixes: a06347c04c13 ("NFC: Add Intel Fields Peak NFC solution driver")
    Signed-off-by: Shang XiaoJing <shangxiaojing@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 31b83d6990c8e5fe8600f4553bbe8beb2b249a56
Author: Krzysztof Kozlowski <krzk@kernel.org>
Date:   Mon May 31 09:35:12 2021 +0200

    nfc: fdp: drop ftrace-like debugging messages
    
    [ Upstream commit 9571289ddf71694de0e023afc5e88d90cfd067b5 ]
    
    Now that the kernel has ftrace, any debugging calls that just do "made
    it to this function!" and "leaving this function!" can be removed.
    Better to use standard debugging tools.
    
    This allows also to remove several local variables and entire
    fdp_nci_recv_frame() function (whose purpose was only to log).
    
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
    Link: https://lore.kernel.org/r/20210531073522.6720-1-krzysztof.kozlowski@canonical.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Stable-dep-of: 8e4aae6b8ca7 ("nfc: fdp: Fix potential memory leak in fdp_nci_send()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4e1e4485b2520983b1cc47b3af278e9f4b9734a5
Author: Dan Carpenter <error27@gmail.com>
Date:   Tue Oct 25 18:32:32 2022 +0300

    RDMA/qedr: clean up work queue on failure in qedr_alloc_resources()
    
    [ Upstream commit 7a47e077e503feb73d56e491ce89aa73b67a3972 ]
    
    Add a check for if create_singlethread_workqueue() fails and also destroy
    the work queue on failure paths.
    
    Fixes: e411e0587e0d ("RDMA/qedr: Add iWARP connection management functions")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Link: https://lore.kernel.org/r/Y1gBkDucQhhWj5YM@kili
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d360e875c011a005628525bf290322058927e7dc
Author: Chen Zhongjin <chenzhongjin@huawei.com>
Date:   Tue Oct 25 10:41:46 2022 +0800

    RDMA/core: Fix null-ptr-deref in ib_core_cleanup()
    
    [ Upstream commit 07c0d131cc0fe1f3981a42958fc52d573d303d89 ]
    
    KASAN reported a null-ptr-deref error:
    
      KASAN: null-ptr-deref in range [0x0000000000000118-0x000000000000011f]
      CPU: 1 PID: 379
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996)
      RIP: 0010:destroy_workqueue+0x2f/0x740
      RSP: 0018:ffff888016137df8 EFLAGS: 00000202
      ...
      Call Trace:
       ib_core_cleanup+0xa/0xa1 [ib_core]
       __do_sys_delete_module.constprop.0+0x34f/0x5b0
       do_syscall_64+0x3a/0x90
       entry_SYSCALL_64_after_hwframe+0x63/0xcd
      RIP: 0033:0x7fa1a0d221b7
      ...
    
    It is because the fail of roce_gid_mgmt_init() is ignored:
    
     ib_core_init()
       roce_gid_mgmt_init()
         gid_cache_wq = alloc_ordered_workqueue # fail
     ...
     ib_core_cleanup()
       roce_gid_mgmt_cleanup()
         destroy_workqueue(gid_cache_wq)
         # destroy an unallocated wq
    
    Fix this by catching the fail of roce_gid_mgmt_init() in ib_core_init().
    
    Fixes: 03db3a2d81e6 ("IB/core: Add RoCE GID table management")
    Signed-off-by: Chen Zhongjin <chenzhongjin@huawei.com>
    Link: https://lore.kernel.org/r/20221025024146.109137-1-chenzhongjin@huawei.com
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Jason Gunthorpe <jgg@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 37a098fc9b42bd7fce66764866aa514639667b6e
Author: Chen Zhongjin <chenzhongjin@huawei.com>
Date:   Wed Oct 26 10:03:21 2022 +0800

    net: dsa: Fix possible memory leaks in dsa_loop_init()
    
    [ Upstream commit 633efc8b3dc96f56f5a57f2a49764853a2fa3f50 ]
    
    kmemleak reported memory leaks in dsa_loop_init():
    
    kmemleak: 12 new suspected memory leaks
    
    unreferenced object 0xffff8880138ce000 (size 2048):
      comm "modprobe", pid 390, jiffies 4295040478 (age 238.976s)
      backtrace:
        [<000000006a94f1d5>] kmalloc_trace+0x26/0x60
        [<00000000a9c44622>] phy_device_create+0x5d/0x970
        [<00000000d0ee2afc>] get_phy_device+0xf3/0x2b0
        [<00000000dca0c71f>] __fixed_phy_register.part.0+0x92/0x4e0
        [<000000008a834798>] fixed_phy_register+0x84/0xb0
        [<0000000055223fcb>] dsa_loop_init+0xa9/0x116 [dsa_loop]
        ...
    
    There are two reasons for memleak in dsa_loop_init().
    
    First, fixed_phy_register() create and register phy_device:
    
    fixed_phy_register()
      get_phy_device()
        phy_device_create() # freed by phy_device_free()
      phy_device_register() # freed by phy_device_remove()
    
    But fixed_phy_unregister() only calls phy_device_remove().
    So the memory allocated in phy_device_create() is leaked.
    
    Second, when mdio_driver_register() fail in dsa_loop_init(),
    it just returns and there is no cleanup for phydevs.
    
    Fix the problems by catching the error of mdio_driver_register()
    in dsa_loop_init(), then calling both fixed_phy_unregister() and
    phy_device_free() to release phydevs.
    Also add a function for phydevs cleanup to avoid duplacate.
    
    Fixes: 98cd1552ea27 ("net: dsa: Mock-up driver")
    Signed-off-by: Chen Zhongjin <chenzhongjin@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 45aea4fbf61e205649c29200726b9f45c1718a67
Author: Zhang Xiaoxu <zhangxiaoxu5@huawei.com>
Date:   Thu Oct 20 11:20:54 2022 +0800

    nfs4: Fix kmemleak when allocate slot failed
    
    [ Upstream commit 7e8436728e22181c3f12a5dbabd35ed3a8b8c593 ]
    
    If one of the slot allocate failed, should cleanup all the other
    allocated slots, otherwise, the allocated slots will leak:
    
      unreferenced object 0xffff8881115aa100 (size 64):
        comm ""mount.nfs"", pid 679, jiffies 4294744957 (age 115.037s)
        hex dump (first 32 bytes):
          00 cc 19 73 81 88 ff ff 00 a0 5a 11 81 88 ff ff  ...s......Z.....
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
        backtrace:
          [<000000007a4c434a>] nfs4_find_or_create_slot+0x8e/0x130
          [<000000005472a39c>] nfs4_realloc_slot_table+0x23f/0x270
          [<00000000cd8ca0eb>] nfs40_init_client+0x4a/0x90
          [<00000000128486db>] nfs4_init_client+0xce/0x270
          [<000000008d2cacad>] nfs4_set_client+0x1a2/0x2b0
          [<000000000e593b52>] nfs4_create_server+0x300/0x5f0
          [<00000000e4425dd2>] nfs4_try_get_tree+0x65/0x110
          [<00000000d3a6176f>] vfs_get_tree+0x41/0xf0
          [<0000000016b5ad4c>] path_mount+0x9b3/0xdd0
          [<00000000494cae71>] __x64_sys_mount+0x190/0x1d0
          [<000000005d56bdec>] do_syscall_64+0x35/0x80
          [<00000000687c9ae4>] entry_SYSCALL_64_after_hwframe+0x46/0xb0
    
    Fixes: abf79bb341bf ("NFS: Add a slot table to struct nfs_client for NFSv4.0 transport blocking")
    Signed-off-by: Zhang Xiaoxu <zhangxiaoxu5@huawei.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f0f1c74fa670d37c042514c15c83b84c1c9fc672
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Sun Oct 16 14:44:33 2022 -0400

    NFSv4.1: We must always send RECLAIM_COMPLETE after a reboot
    
    [ Upstream commit e59679f2b7e522ecad99974e5636291ffd47c184 ]
    
    Currently, we are only guaranteed to send RECLAIM_COMPLETE if we have
    open state to recover. Fix the client to always send RECLAIM_COMPLETE
    after setting up the lease.
    
    Fixes: fce5c838e133 ("nfs41: RECLAIM_COMPLETE functionality")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 10c554d7227580f905ec675c32bcfa2132ed087f
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Sun Oct 16 14:44:32 2022 -0400

    NFSv4.1: Handle RECLAIM_COMPLETE trunking errors
    
    [ Upstream commit 5d917cba3201e5c25059df96c29252fd99c4f6a7 ]
    
    If RECLAIM_COMPLETE sets the NFS4CLNT_BIND_CONN_TO_SESSION flag, then we
    need to loop back in order to handle it.
    
    Fixes: 0048fdd06614 ("NFSv4.1: RECLAIM_COMPLETE must handle NFS4ERR_CONN_NOT_BOUND_TO_SESSION")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4813dd737dc4fa85e72761c95fc228cafad88c30
Author: Trond Myklebust <trond.myklebust@hammerspace.com>
Date:   Sun Oct 16 14:44:31 2022 -0400

    NFSv4: Fix a potential state reclaim deadlock
    
    [ Upstream commit 1ba04394e028ea8b45d92685cc0d6ab582cf7647 ]
    
    If the server reboots while we are engaged in a delegation return, and
    there is a pNFS layout with return-on-close set, then the current code
    can end up deadlocking in pnfs_roc() when nfs_inode_set_delegation()
    tries to return the old delegation.
    Now that delegreturn actually uses its own copy of the stateid, it
    should be safe to just always update the delegation stateid in place.
    
    Fixes: 078000d02d57 ("pNFS: We want return-on-close to complete when evicting the inode")
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7c4260f8f188df32414a5ecad63e8b934c2aa3f0
Author: Dean Luick <dean.luick@cornelisnetworks.com>
Date:   Tue Oct 18 10:27:50 2022 -0400

    IB/hfi1: Correctly move list in sc_disable()
    
    [ Upstream commit 1afac08b39d85437187bb2a92d89a741b1078f55 ]
    
    Commit 13bac861952a ("IB/hfi1: Fix abba locking issue with sc_disable()")
    incorrectly tries to move a list from one list head to another.  The
    result is a kernel crash.
    
    The crash is triggered when a link goes down and there are waiters for a
    send to complete.  The following signature is seen:
    
      BUG: kernel NULL pointer dereference, address: 0000000000000030
      [...]
      Call Trace:
       sc_disable+0x1ba/0x240 [hfi1]
       pio_freeze+0x3d/0x60 [hfi1]
       handle_freeze+0x27/0x1b0 [hfi1]
       process_one_work+0x1b0/0x380
       ? process_one_work+0x380/0x380
       worker_thread+0x30/0x360
       ? process_one_work+0x380/0x380
       kthread+0xd7/0x100
       ? kthread_complete_and_exit+0x20/0x20
       ret_from_fork+0x1f/0x30
    
    The fix is to use the correct call to move the list.
    
    Fixes: 13bac861952a ("IB/hfi1: Fix abba locking issue with sc_disable()")
    Signed-off-by: Dean Luick <dean.luick@cornelisnetworks.com>
    Signed-off-by: Dennis Dalessandro <dennis.dalessandro@cornelisnetworks.com>
    Link: https://lore.kernel.org/r/166610327042.674422.6146908799669288976.stgit@awfm-02.cornelisnetworks.com
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 87ac93c8dd6ddbbfa2c2239a42520c8410d2fcca
Author: Håkon Bugge <haakon.bugge@oracle.com>
Date:   Wed Oct 12 16:15:42 2022 +0200

    RDMA/cma: Use output interface for net_dev check
    
    [ Upstream commit eb83f502adb036cd56c27e13b9ca3b2aabfa790b ]
    
    Commit 27cfde795a96 ("RDMA/cma: Fix arguments order in net device
    validation") swapped the src and dst addresses in the call to
    validate_net_dev().
    
    As a consequence, the test in validate_ipv4_net_dev() to see if the
    net_dev is the right one, is incorrect for port 1 <-> 2 communication when
    the ports are on the same sub-net. This is fixed by denoting the
    flowi4_oif as the device instead of the incoming one.
    
    The bug has not been observed using IPv6 addresses.
    
    Fixes: 27cfde795a96 ("RDMA/cma: Fix arguments order in net device validation")
    Signed-off-by: Håkon Bugge <haakon.bugge@oracle.com>
    Link: https://lore.kernel.org/r/20221012141542.16925-1-haakon.bugge@oracle.com
    Reviewed-by: Leon Romanovsky <leonro@nvidia.com>
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4dbb739eb29c99c8b59bbb7bbaa71ec1b438f37c
Author: Alexander Graf <graf@amazon.com>
Date:   Mon Oct 17 20:45:41 2022 +0200

    KVM: x86: Add compat handler for KVM_X86_SET_MSR_FILTER
    
    [ Upstream commit 1739c7017fb1d759965dcbab925ff5980a5318cb ]
    
    The KVM_X86_SET_MSR_FILTER ioctls contains a pointer in the passed in
    struct which means it has a different struct size depending on whether
    it gets called from 32bit or 64bit code.
    
    This patch introduces compat code that converts from the 32bit struct to
    its 64bit counterpart which then gets used going forward internally.
    With this applied, 32bit QEMU can successfully set MSR bitmaps when
    running on 64bit kernels.
    
    Reported-by: Andrew Randrianasulu <randrianasulu@gmail.com>
    Fixes: 1a155254ff937 ("KVM: x86: Introduce MSR filtering")
    Signed-off-by: Alexander Graf <graf@amazon.com>
    Message-Id: <20221017184541.2658-4-graf@amazon.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bb584caee8957469dfd7549dc7accdce806f23dd
Author: Alexander Graf <graf@amazon.com>
Date:   Mon Oct 17 20:45:40 2022 +0200

    KVM: x86: Copy filter arg outside kvm_vm_ioctl_set_msr_filter()
    
    [ Upstream commit 2e3272bc1790825c43d2c39690bf2836b81c6d36 ]
    
    In the next patch we want to introduce a second caller to
    set_msr_filter() which constructs its own filter list on the stack.
    Refactor the original function so it takes it as argument instead of
    reading it through copy_from_user().
    
    Signed-off-by: Alexander Graf <graf@amazon.com>
    Message-Id: <20221017184541.2658-3-graf@amazon.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9faacf442d11c872e7e2a66a6d1844459336dfb1
Author: Aaron Lewis <aaronlewis@google.com>
Date:   Thu Jul 14 16:13:15 2022 +0000

    KVM: x86: Protect the unused bits in MSR exiting flags
    
    [ Upstream commit cf5029d5dd7cb0aaa53250fa9e389abd231606b3 ]
    
    The flags for KVM_CAP_X86_USER_SPACE_MSR and KVM_X86_SET_MSR_FILTER
    have no protection for their unused bits.  Without protection, future
    development for these features will be difficult.  Add the protection
    needed to make it possible to extend these features in the future.
    
    Signed-off-by: Aaron Lewis <aaronlewis@google.com>
    Message-Id: <20220714161314.1715227-1-aaronlewis@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Stable-dep-of: 2e3272bc1790 ("KVM: x86: Copy filter arg outside kvm_vm_ioctl_set_msr_filter()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5bdbccc79c86424fef1960de76abab9e83cfbdc9
Author: Zhang Rui <rui.zhang@intel.com>
Date:   Fri Oct 14 17:01:47 2022 +0800

    x86/topology: Fix duplicated core ID within a package
    
    [ Upstream commit 71eac7063698b7d7b8fafb1683ac24a034541141 ]
    
    Today, core ID is assumed to be unique within each package.
    
    But an AlderLake-N platform adds a Module level between core and package,
    Linux excludes the unknown modules bits from the core ID, resulting in
    duplicate core ID's.
    
    To keep core ID unique within a package, Linux must include all APIC-ID
    bits for known or unknown levels above the core and below the package
    in the core ID.
    
    It is important to understand that core ID's have always come directly
    from the APIC-ID encoding, which comes from the BIOS. Thus there is no
    guarantee that they start at 0, or that they are contiguous.
    As such, naively using them for array indexes can be problematic.
    
    [ dhansen: un-known -> unknown ]
    
    Fixes: 7745f03eb395 ("x86/topology: Add CPUID.1F multi-die/package support")
    Suggested-by: Len Brown <len.brown@intel.com>
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>
    Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
    Reviewed-by: Len Brown <len.brown@intel.com>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20221014090147.1836-5-rui.zhang@intel.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6c31fc028a657e8d53cec5127a39a35cce6dba08
Author: Zhang Rui <rui.zhang@intel.com>
Date:   Fri Oct 14 17:01:46 2022 +0800

    x86/topology: Fix multiple packages shown on a single-package system
    
    [ Upstream commit 2b12a7a126d62bdbd81f4923c21bf6e9a7fbd069 ]
    
    CPUID.1F/B does not enumerate Package level explicitly, instead, all the
    APIC-ID bits above the enumerated levels are assumed to be package ID
    bits.
    
    Current code gets package ID by shifting out all the APIC-ID bits that
    Linux supports, rather than shifting out all the APIC-ID bits that
    CPUID.1F enumerates. This introduces problems when CPUID.1F enumerates a
    level that Linux does not support.
    
    For example, on a single package AlderLake-N, there are 2 Ecore Modules
    with 4 atom cores in each module.  Linux does not support the Module
    level and interprets the Module ID bits as package ID and erroneously
    reports a multi module system as a multi-package system.
    
    Fix this by using APIC-ID bits above all the CPUID.1F enumerated levels
    as package ID.
    
    [ dhansen: spelling fix ]
    
    Fixes: 7745f03eb395 ("x86/topology: Add CPUID.1F multi-die/package support")
    Suggested-by: Len Brown <len.brown@intel.com>
    Signed-off-by: Zhang Rui <rui.zhang@intel.com>
    Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
    Reviewed-by: Len Brown <len.brown@intel.com>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20221014090147.1836-4-rui.zhang@intel.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f5ad52da145a460b11d3a02a74c995fc33cce2f0
Author: Yazen Ghannam <yazen.ghannam@amd.com>
Date:   Mon Nov 9 21:06:59 2020 +0000

    x86/topology: Set cpu_die_id only if DIE_TYPE found
    
    [ Upstream commit cb09a379724d299c603a7a79f444f52a9a75b8d2 ]
    
    CPUID Leaf 0x1F defines a DIE_TYPE level (nb: ECX[8:15] level type == 0x5),
    but CPUID Leaf 0xB does not. However, detect_extended_topology() will
    set struct cpuinfo_x86.cpu_die_id regardless of whether a valid Die ID
    was found.
    
    Only set cpu_die_id if a DIE_TYPE level is found. CPU topology code may
    use another value for cpu_die_id, e.g. the AMD NodeId on AMD-based
    systems. Code ordering should be maintained so that the CPUID Leaf 0x1F
    Die ID value will take precedence on systems that may use another value.
    
    Suggested-by: Borislav Petkov <bp@alien8.de>
    Signed-off-by: Yazen Ghannam <yazen.ghannam@amd.com>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Link: https://lkml.kernel.org/r/20201109210659.754018-5-Yazen.Ghannam@amd.com
    Stable-dep-of: 2b12a7a126d6 ("x86/topology: Fix multiple packages shown on a single-package system")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 570fa3bcd2f9328efc2123f8c46a50ea6b64b004
Author: Sean Christopherson <seanjc@google.com>
Date:   Tue Aug 30 23:15:55 2022 +0000

    KVM: x86: Treat #DBs from the emulator as fault-like (code and DR7.GD=1)
    
    [ Upstream commit 5623f751bd9c438ed12840e086f33c4646440d19 ]
    
    Add a dedicated "exception type" for #DBs, as #DBs can be fault-like or
    trap-like depending the sub-type of #DB, and effectively defer the
    decision of what to do with the #DB to the caller.
    
    For the emulator's two calls to exception_type(), treat the #DB as
    fault-like, as the emulator handles only code breakpoint and general
    detect #DBs, both of which are fault-like.
    
    For event injection, which uses exception_type() to determine whether to
    set EFLAGS.RF=1 on the stack, keep the current behavior of not setting
    RF=1 for #DBs.  Intel and AMD explicitly state RF isn't set on code #DBs,
    so exempting by failing the "== EXCPT_FAULT" check is correct.  The only
    other fault-like #DB is General Detect, and despite Intel and AMD both
    strongly implying (through omission) that General Detect #DBs should set
    RF=1, hardware (multiple generations of both Intel and AMD), in fact does
    not.  Through insider knowledge, extreme foresight, sheer dumb luck, or
    some combination thereof, KVM correctly handled RF for General Detect #DBs.
    
    Fixes: 38827dbd3fb8 ("KVM: x86: Do not update EFLAGS on faulting emulation")
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Reviewed-by: Maxim Levitsky <mlevitsk@redhat.com>
    Link: https://lore.kernel.org/r/20220830231614.3580124-9-seanjc@google.com
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e5d7c6786befe4aca0ba645dc5b836fc60ea733c
Author: Sean Christopherson <seanjc@google.com>
Date:   Mon May 2 00:07:31 2022 +0200

    KVM: x86: Trace re-injected exceptions
    
    [ Upstream commit a61d7c5432ac5a953bbcec17af031661c2bd201d ]
    
    Trace exceptions that are re-injected, not just those that KVM is
    injecting for the first time.  Debugging re-injection bugs is painful
    enough as is, not having visibility into what KVM is doing only makes
    things worse.
    
    Delay propagating pending=>injected in the non-reinjection path so that
    the tracing can properly identify reinjected exceptions.
    
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Reviewed-by: Maxim Levitsky <mlevitsk@redhat.com>
    Signed-off-by: Maciej S. Szmigiero <maciej.szmigiero@oracle.com>
    Message-Id: <25470690a38b4d2b32b6204875dd35676c65c9f2.1651440202.git.maciej.szmigiero@oracle.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Stable-dep-of: 5623f751bd9c ("KVM: x86: Treat #DBs from the emulator as fault-like (code and DR7.GD=1)")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8364786152d5abf887162612c23f932d8cda164f
Author: Sean Christopherson <seanjc@google.com>
Date:   Tue Aug 30 15:37:21 2022 +0200

    KVM: nVMX: Don't propagate vmcs12's PERF_GLOBAL_CTRL settings to vmcs02
    
    [ Upstream commit def9d705c05eab3fdedeb10ad67907513b12038e ]
    
    Don't propagate vmcs12's VM_ENTRY_LOAD_IA32_PERF_GLOBAL_CTRL to vmcs02.
    KVM doesn't disallow L1 from using VM_ENTRY_LOAD_IA32_PERF_GLOBAL_CTRL
    even when KVM itself doesn't use the control, e.g. due to the various
    CPU errata that where the MSR can be corrupted on VM-Exit.
    
    Preserve KVM's (vmcs01) setting to hopefully avoid having to toggle the
    bit in vmcs02 at a later point.  E.g. if KVM is loading PERF_GLOBAL_CTRL
    when running L1, then odds are good KVM will also load the MSR when
    running L2.
    
    Fixes: 8bf00a529967 ("KVM: VMX: add support for switching of PERF_GLOBAL_CTRL")
    Cc: stable@vger.kernel.org
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Link: https://lore.kernel.org/r/20220830133737.1539624-18-vkuznets@redhat.com
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 523e1dd9f8d4d8cf064488473ef518c8dedcfeec
Author: Sean Christopherson <seanjc@google.com>
Date:   Tue Aug 10 10:19:50 2021 -0700

    KVM: nVMX: Pull KVM L0's desired controls directly from vmcs01
    
    [ Upstream commit 389ab25216c9d09e0d335e764eeeb84c2089614f ]
    
    When preparing controls for vmcs02, grab KVM's desired controls from
    vmcs01's shadow state instead of recalculating the controls from scratch,
    or in the secondary execution controls, instead of using the dedicated
    cache.  Calculating secondary exec controls is eye-poppingly expensive
    due to the guest CPUID checks, hence the dedicated cache, but the other
    calculations aren't exactly free either.
    
    Explicitly clear several bits (x2APIC, DESC exiting, and load EFER on
    exit) as appropriate as they may be set in vmcs01, whereas the previous
    implementation relied on dynamic bits being cleared in the calculator.
    
    Intentionally propagate VM_{ENTRY,EXIT}_LOAD_IA32_PERF_GLOBAL_CTRL from
    vmcs01 to vmcs02.  Whether or not PERF_GLOBAL_CTRL is loaded depends on
    whether or not perf itself is active, so unless perf stops between the
    exit from L1 and entry to L2, vmcs01 will hold the desired value.  This
    is purely an optimization as atomic_switch_perf_msrs() will set/clear
    the control as needed at VM-Enter, i.e. it avoids two extra VMWRITEs in
    the case where perf is active (versus starting with the bits clear in
    vmcs02, which was the previous behavior).
    
    Cc: Zeng Guang <guang.zeng@intel.com>
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Message-Id: <20210810171952.2758100-3-seanjc@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Stable-dep-of: def9d705c05e ("KVM: nVMX: Don't propagate vmcs12's PERF_GLOBAL_CTRL settings to vmcs02")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 028fcabd8a67196277f907c8ecce8e0bb99b276a
Author: Lukas Wunner <lukas@wunner.de>
Date:   Sat Nov 5 09:46:40 2022 -0400

    serial: ar933x: Deassert Transmit Enable on ->rs485_config()
    
    commit 3a939433ddc1bab98be028903aaa286e5e7461d7 upstream.
    
    The ar933x_uart driver neglects to deassert Transmit Enable when
    ->rs485_config() is invoked.  Fix it.
    
    Fixes: 9be1064fe524 ("serial: ar933x_uart: add RS485 support")
    Cc: stable@vger.kernel.org # v5.7+
    Cc: Daniel Golle <daniel@makrotopia.org>
    Reviewed-by: Ilpo JÃ€rvinen <ilpo.jarvinen@linux.intel.com>
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e6da7808c955e609b3adf9d18b02f94463616016
Author: Maciej W. Rozycki <macro@orcam.me.uk>
Date:   Wed Sep 21 00:35:32 2022 +0100

    serial: 8250: Let drivers request full 16550A feature probing
    
    [ Upstream commit 9906890c89e4dbd900ed87ad3040080339a7f411 ]
    
    A SERIAL_8250_16550A_VARIANTS configuration option has been recently
    defined that lets one request the 8250 driver not to probe for 16550A
    device features so as to reduce the driver's device startup time in
    virtual machines.
    
    Some actual hardware devices require these features to have been fully
    determined however for their driver to work correctly, so define a flag
    to let drivers request full 16550A feature probing on a device-by-device
    basis if required regardless of the SERIAL_8250_16550A_VARIANTS option
    setting chosen.
    
    Fixes: dc56ecb81a0a ("serial: 8250: Support disabling mdelay-filled probes of 16550A variants")
    Cc: stable@vger.kernel.org # v5.6+
    Reported-by: Anders Blomdell <anders.blomdell@control.lth.se>
    Signed-off-by: Maciej W. Rozycki <macro@orcam.me.uk>
    Link: https://lore.kernel.org/r/alpine.DEB.2.21.2209202357520.41633@angie.orcam.me.uk
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

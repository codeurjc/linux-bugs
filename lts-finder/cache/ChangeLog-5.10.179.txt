commit f1b32fda06d2cfb8eea9680b0ba7a8b0d5b81eeb
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Apr 26 11:27:43 2023 +0200

    Linux 5.10.179
    
    Link: https://lore.kernel.org/r/20230424131127.653885914@linuxfoundation.org
    Tested-by: Salvatore Bonaccorso <carnil@debian.org>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Chris Paterson (CIP) <chris.paterson2@renesas.com>
    Tested-by: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0367bf3f4a4eb6691e18194beb5792843aecced9
Author: Ekaterina Orlova <vorobushek.ok@gmail.com>
Date:   Fri Apr 21 15:35:39 2023 +0100

    ASN.1: Fix check for strdup() success
    
    commit 5a43001c01691dcbd396541e6faa2c0077378f48 upstream.
    
    It seems there is a misprint in the check of strdup() return code that
    can lead to NULL pointer dereference.
    
    Found by Linux Verification Center (linuxtesting.org) with SVACE.
    
    Fixes: 4520c6a49af8 ("X.509: Add simple ASN.1 grammar compiler")
    Signed-off-by: Ekaterina Orlova <vorobushek.ok@gmail.com>
    Cc: David Woodhouse <dwmw2@infradead.org>
    Cc: James Bottomley <jejb@linux.ibm.com>
    Cc: Jarkko Sakkinen <jarkko@kernel.org>
    Cc: keyrings@vger.kernel.org
    Cc: linux-kbuild@vger.kernel.org
    Link: https://lore.kernel.org/r/20230315172130.140-1-vorobushek.ok@gmail.com/
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4ab5f8f9d026bd6e66827c5993179bab42fc8f51
Author: Nikita Zhandarovich <n.zhandarovich@fintech.ru>
Date:   Mon Apr 17 06:32:42 2023 -0700

    ASoC: fsl_asrc_dma: fix potential null-ptr-deref
    
    commit 86a24e99c97234f87d9f70b528a691150e145197 upstream.
    
    dma_request_slave_channel() may return NULL which will lead to
    NULL pointer dereference error in 'tmp_chan->private'.
    
    Correct this behaviour by, first, switching from deprecated function
    dma_request_slave_channel() to dma_request_chan(). Secondly, enable
    sanity check for the resuling value of dma_request_chan().
    Also, fix description that follows the enacted changes and that
    concerns the use of dma_request_slave_channel().
    
    Fixes: 706e2c881158 ("ASoC: fsl_asrc_dma: Reuse the dma channel if available in Back-End")
    Co-developed-by: Natalia Petrova <n.petrova@fintech.ru>
    Signed-off-by: Nikita Zhandarovich <n.zhandarovich@fintech.ru>
    Acked-by: Shengjiu Wang <shengjiu.wang@gmail.com>
    Link: https://lore.kernel.org/r/20230417133242.53339-1-n.zhandarovich@fintech.ru
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 42604b4ad5f3289596455c786c04c67a1b5740d9
Author: Dan Carpenter <error27@gmail.com>
Date:   Wed Mar 29 07:35:32 2023 +0300

    iio: adc: at91-sama5d2_adc: fix an error code in at91_adc_allocate_trigger()
    
    commit 73a428b37b9b538f8f8fe61caa45e7f243bab87c upstream.
    
    The at91_adc_allocate_trigger() function is supposed to return error
    pointers.  Returning a NULL will cause an Oops.
    
    Fixes: 5e1a1da0f8c9 ("iio: adc: at91-sama5d2_adc: add hw trigger and buffer support")
    Signed-off-by: Dan Carpenter <error27@gmail.com>
    Link: https://lore.kernel.org/r/5d728f9d-31d1-410d-a0b3-df6a63a2c8ba@kili.mountain
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 155b2586de3f171d46c8a1955990d4676487501e
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Mon Apr 24 07:31:05 2023 +0200

    pwm: hibvt: Explicitly set .polarity in .get_state()
    
    [ Upstream commit 6f57937980142715e927697a6ffd2050f38ed6f6 ]
    
    The driver only both polarities. Complete the implementation of
    .get_state() by setting .polarity according to the configured hardware
    state.
    
    Fixes: d09f00810850 ("pwm: Add PWM driver for HiSilicon BVT SOCs")
    Link: https://lore.kernel.org/r/20230228135508.1798428-2-u.kleine-koenig@pengutronix.de
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Thierry Reding <thierry.reding@gmail.com>
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1c3a1211370dcaf509bac72ff258c813cc42a6eb
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Mon Apr 24 07:31:04 2023 +0200

    pwm: iqs620a: Explicitly set .polarity in .get_state()
    
    [ Upstream commit b20b097128d9145fadcea1cbb45c4d186cb57466 ]
    
    The driver only supports normal polarity. Complete the implementation of
    .get_state() by setting .polarity accordingly.
    
    Fixes: 6f0841a8197b ("pwm: Add support for Azoteq IQS620A PWM generator")
    Reviewed-by: Jeff LaBundy <jeff@labundy.com>
    Link: https://lore.kernel.org/r/20230228135508.1798428-4-u.kleine-koenig@pengutronix.de
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Thierry Reding <thierry.reding@gmail.com>
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b28079807de2144ca88d4f2a5cf039c58e48654d
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Wed Mar 22 22:45:44 2023 +0100

    pwm: meson: Explicitly set .polarity in .get_state()
    
    commit 8caa81eb950cb2e9d2d6959b37d853162d197f57 upstream.
    
    The driver only supports normal polarity. Complete the implementation of
    .get_state() by setting .polarity accordingly.
    
    This fixes a regression that was possible since commit c73a3107624d
    ("pwm: Handle .get_state() failures") which stopped to zero-initialize
    the state passed to the .get_state() callback. This was reported at
    https://forum.odroid.com/viewtopic.php?f=177&t=46360 . While this was an
    unintended side effect, the real issue is the driver's callback not
    setting the polarity.
    
    There is a complicating fact, that the .apply() callback fakes support
    for inversed polarity. This is not (and cannot) be matched by
    .get_state(). As fixing this isn't easy, only point it out in a comment
    to prevent authors of other drivers from copying that approach.
    
    Fixes: c375bcbaabdb ("pwm: meson: Read the full hardware state in meson_pwm_get_state()")
    Reported-by: Munehisa Kamata <kamatam@amazon.com>
    Acked-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Link: https://lore.kernel.org/r/20230310191405.2606296-1-u.kleine-koenig@pengutronix.de
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Thierry Reding <thierry.reding@gmail.com>
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f69112de70a0c876a42532daab9962e36c2f3fed
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Wed Oct 19 15:36:01 2022 -0700

    sctp: Call inet6_destroy_sock() via sk->sk_destruct().
    
    commit 6431b0f6ff1633ae598667e4cdd93830074a03e8 upstream.
    
    After commit d38afeec26ed ("tcp/udp: Call inet6_destroy_sock()
    in IPv6 sk->sk_destruct()."), we call inet6_destroy_sock() in
    sk->sk_destruct() by setting inet6_sock_destruct() to it to make
    sure we do not leak inet6-specific resources.
    
    SCTP sets its own sk->sk_destruct() in the sctp_init_sock(), and
    SCTPv6 socket reuses it as the init function.
    
    To call inet6_sock_destruct() from SCTPv6 sk->sk_destruct(), we
    set sctp_v6_destruct_sock() in a new init function.
    
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Ziyang Xuan <william.xuanziyang@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7da54ddc04e6cef3c016b87dbaae574abc73fa94
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Wed Oct 19 15:36:00 2022 -0700

    dccp: Call inet6_destroy_sock() via sk->sk_destruct().
    
    commit 1651951ebea54970e0bda60c638fc2eee7a6218f upstream.
    
    After commit d38afeec26ed ("tcp/udp: Call inet6_destroy_sock()
    in IPv6 sk->sk_destruct()."), we call inet6_destroy_sock() in
    sk->sk_destruct() by setting inet6_sock_destruct() to it to make
    sure we do not leak inet6-specific resources.
    
    DCCP sets its own sk->sk_destruct() in the dccp_init_sock(), and
    DCCPv6 socket shares it by calling the same init function via
    dccp_v6_init_sock().
    
    To call inet6_sock_destruct() from DCCPv6 sk->sk_destruct(), we
    export it and set dccp_v6_sk_destruct() in the init function.
    
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Ziyang Xuan <william.xuanziyang@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 04d393c4bbf5b906329fd40449c1c660a3affa37
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Wed Oct 19 15:35:59 2022 -0700

    inet6: Remove inet6_destroy_sock() in sk->sk_prot->destroy().
    
    commit b5fc29233d28be7a3322848ebe73ac327559cdb9 upstream.
    
    After commit d38afeec26ed ("tcp/udp: Call inet6_destroy_sock()
    in IPv6 sk->sk_destruct()."), we call inet6_destroy_sock() in
    sk->sk_destruct() by setting inet6_sock_destruct() to it to make
    sure we do not leak inet6-specific resources.
    
    Now we can remove unnecessary inet6_destroy_sock() calls in
    sk->sk_prot->destroy().
    
    DCCP and SCTP have their own sk->sk_destruct() function, so we
    change them separately in the following patches.
    
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Reviewed-by: Matthieu Baerts <matthieu.baerts@tessares.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Ziyang Xuan <william.xuanziyang@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b1f06ab985efd3456c8bbf96bdc52c53a125b4b3
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Thu Oct 6 11:53:47 2022 -0700

    tcp/udp: Call inet6_destroy_sock() in IPv6 sk->sk_destruct().
    
    commit d38afeec26ed4739c640bf286c270559aab2ba5f upstream.
    
    Originally, inet6_sk(sk)->XXX were changed under lock_sock(), so we were
    able to clean them up by calling inet6_destroy_sock() during the IPv6 ->
    IPv4 conversion by IPV6_ADDRFORM.  However, commit 03485f2adcde ("udpv6:
    Add lockless sendmsg() support") added a lockless memory allocation path,
    which could cause a memory leak:
    
    setsockopt(IPV6_ADDRFORM)                 sendmsg()
    +-----------------------+                 +-------+
    - do_ipv6_setsockopt(sk, ...)             - udpv6_sendmsg(sk, ...)
      - sockopt_lock_sock(sk)                   ^._ called via udpv6_prot
        - lock_sock(sk)                             before WRITE_ONCE()
      - WRITE_ONCE(sk->sk_prot, &tcp_prot)
      - inet6_destroy_sock()                    - if (!corkreq)
      - sockopt_release_sock(sk)                  - ip6_make_skb(sk, ...)
        - release_sock(sk)                          ^._ lockless fast path for
                                                        the non-corking case
    
                                                    - __ip6_append_data(sk, ...)
                                                      - ipv6_local_rxpmtu(sk, ...)
                                                        - xchg(&np->rxpmtu, skb)
                                                          ^._ rxpmtu is never freed.
    
                                                    - goto out_no_dst;
    
                                                - lock_sock(sk)
    
    For now, rxpmtu is only the case, but not to miss the future change
    and a similar bug fixed in commit e27326009a3d ("net: ping6: Fix
    memleak in ipv6_renew_options()."), let's set a new function to IPv6
    sk->sk_destruct() and call inet6_cleanup_sock() there.  Since the
    conversion does not change sk->sk_destruct(), we can guarantee that
    we can clean up IPv6 resources finally.
    
    We can now remove all inet6_destroy_sock() calls from IPv6 protocol
    specific ->destroy() functions, but such changes are invasive to
    backport.  So they can be posted as a follow-up later for net-next.
    
    Fixes: 03485f2adcde ("udpv6: Add lockless sendmsg() support")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Ziyang Xuan <william.xuanziyang@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0e7b5e1020aad24e63d1231065af92c701629327
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Thu Oct 6 11:53:46 2022 -0700

    udp: Call inet6_destroy_sock() in setsockopt(IPV6_ADDRFORM).
    
    commit 21985f43376cee092702d6cb963ff97a9d2ede68 upstream.
    
    Commit 4b340ae20d0e ("IPv6: Complete IPV6_DONTFRAG support") forgot
    to add a change to free inet6_sk(sk)->rxpmtu while converting an IPv6
    socket into IPv4 with IPV6_ADDRFORM.  After conversion, sk_prot is
    changed to udp_prot and ->destroy() never cleans it up, resulting in
    a memory leak.
    
    This is due to the discrepancy between inet6_destroy_sock() and
    IPV6_ADDRFORM, so let's call inet6_destroy_sock() from IPV6_ADDRFORM
    to remove the difference.
    
    However, this is not enough for now because rxpmtu can be changed
    without lock_sock() after commit 03485f2adcde ("udpv6: Add lockless
    sendmsg() support").  We will fix this case in the following patch.
    
    Note we will rename inet6_destroy_sock() to inet6_cleanup_sock() and
    remove unnecessary inet6_destroy_sock() calls in sk_prot->destroy()
    in the future.
    
    Fixes: 4b340ae20d0e ("IPv6: Complete IPV6_DONTFRAG support")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Ziyang Xuan <william.xuanziyang@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 05cf34a2b6414a1172552d16159b3e17e9da36a3
Author: Baokun Li <libaokun1@huawei.com>
Date:   Wed Apr 19 06:46:10 2023 +0000

    ext4: fix use-after-free in ext4_xattr_set_entry
    
    [ Upstream commit 67d7d8ad99beccd9fe92d585b87f1760dc9018e3 ]
    
    Hulk Robot reported a issue:
    ==================================================================
    BUG: KASAN: use-after-free in ext4_xattr_set_entry+0x18ab/0x3500
    Write of size 4105 at addr ffff8881675ef5f4 by task syz-executor.0/7092
    
    CPU: 1 PID: 7092 Comm: syz-executor.0 Not tainted 4.19.90-dirty #17
    Call Trace:
    [...]
     memcpy+0x34/0x50 mm/kasan/kasan.c:303
     ext4_xattr_set_entry+0x18ab/0x3500 fs/ext4/xattr.c:1747
     ext4_xattr_ibody_inline_set+0x86/0x2a0 fs/ext4/xattr.c:2205
     ext4_xattr_set_handle+0x940/0x1300 fs/ext4/xattr.c:2386
     ext4_xattr_set+0x1da/0x300 fs/ext4/xattr.c:2498
     __vfs_setxattr+0x112/0x170 fs/xattr.c:149
     __vfs_setxattr_noperm+0x11b/0x2a0 fs/xattr.c:180
     __vfs_setxattr_locked+0x17b/0x250 fs/xattr.c:238
     vfs_setxattr+0xed/0x270 fs/xattr.c:255
     setxattr+0x235/0x330 fs/xattr.c:520
     path_setxattr+0x176/0x190 fs/xattr.c:539
     __do_sys_lsetxattr fs/xattr.c:561 [inline]
     __se_sys_lsetxattr fs/xattr.c:557 [inline]
     __x64_sys_lsetxattr+0xc2/0x160 fs/xattr.c:557
     do_syscall_64+0xdf/0x530 arch/x86/entry/common.c:298
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    RIP: 0033:0x459fe9
    RSP: 002b:00007fa5e54b4c08 EFLAGS: 00000246 ORIG_RAX: 00000000000000bd
    RAX: ffffffffffffffda RBX: 000000000051bf60 RCX: 0000000000459fe9
    RDX: 00000000200003c0 RSI: 0000000020000180 RDI: 0000000020000140
    RBP: 000000000051bf60 R08: 0000000000000001 R09: 0000000000000000
    R10: 0000000000001009 R11: 0000000000000246 R12: 0000000000000000
    R13: 00007ffc73c93fc0 R14: 000000000051bf60 R15: 00007fa5e54b4d80
    [...]
    ==================================================================
    
    Above issue may happen as follows:
    -------------------------------------
    ext4_xattr_set
      ext4_xattr_set_handle
        ext4_xattr_ibody_find
          >> s->end < s->base
          >> no EXT4_STATE_XATTR
          >> xattr_check_inode is not executed
        ext4_xattr_ibody_set
          ext4_xattr_set_entry
           >> size_t min_offs = s->end - s->base
           >> UAF in memcpy
    
    we can easily reproduce this problem with the following commands:
        mkfs.ext4 -F /dev/sda
        mount -o debug_want_extra_isize=128 /dev/sda /mnt
        touch /mnt/file
        setfattr -n user.cat -v `seq -s z 4096|tr -d '[:digit:]'` /mnt/file
    
    In ext4_xattr_ibody_find, we have the following assignment logic:
      header = IHDR(inode, raw_inode)
             = raw_inode + EXT4_GOOD_OLD_INODE_SIZE + i_extra_isize
      is->s.base = IFIRST(header)
                 = header + sizeof(struct ext4_xattr_ibody_header)
      is->s.end = raw_inode + s_inode_size
    
    In ext4_xattr_set_entry
      min_offs = s->end - s->base
               = s_inode_size - EXT4_GOOD_OLD_INODE_SIZE - i_extra_isize -
                 sizeof(struct ext4_xattr_ibody_header)
      last = s->first
      free = min_offs - ((void *)last - s->base) - sizeof(__u32)
           = s_inode_size - EXT4_GOOD_OLD_INODE_SIZE - i_extra_isize -
             sizeof(struct ext4_xattr_ibody_header) - sizeof(__u32)
    
    In the calculation formula, all values except s_inode_size and
    i_extra_size are fixed values. When i_extra_size is the maximum value
    s_inode_size - EXT4_GOOD_OLD_INODE_SIZE, min_offs is -4 and free is -8.
    The value overflows. As a result, the preceding issue is triggered when
    memcpy is executed.
    
    Therefore, when finding xattr or setting xattr, check whether
    there is space for storing xattr in the inode to resolve this issue.
    
    Cc: stable@kernel.org
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Baokun Li <libaokun1@huawei.com>
    Reviewed-by: Ritesh Harjani (IBM) <ritesh.list@gmail.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Link: https://lore.kernel.org/r/20220616021358.2504451-3-libaokun1@huawei.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Tudor Ambarus <tudor.ambarus@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c75711396c04a77cb614f49d37e7385e984c0cb7
Author: Ritesh Harjani <riteshh@linux.ibm.com>
Date:   Wed Apr 19 06:46:09 2023 +0000

    ext4: remove duplicate definition of ext4_xattr_ibody_inline_set()
    
    [ Upstream commit 310c097c2bdbea253d6ee4e064f3e65580ef93ac ]
    
    ext4_xattr_ibody_inline_set() & ext4_xattr_ibody_set() have the exact
    same definition.  Hence remove ext4_xattr_ibody_inline_set() and all
    its call references. Convert the callers of it to call
    ext4_xattr_ibody_set() instead.
    
    [ Modified to preserve ext4_xattr_ibody_set() and remove
      ext4_xattr_ibody_inline_set() instead. -- TYT ]
    
    Signed-off-by: Ritesh Harjani <riteshh@linux.ibm.com>
    Link: https://lore.kernel.org/r/fd566b799bbbbe9b668eb5eecde5b5e319e3694f.1622685482.git.riteshh@linux.ibm.com
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Signed-off-by: Tudor Ambarus <tudor.ambarus@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9400206d9d5eebc0317da4151364ade32d28944f
Author: Tudor Ambarus <tudor.ambarus@linaro.org>
Date:   Wed Apr 19 06:46:08 2023 +0000

    Revert "ext4: fix use-after-free in ext4_xattr_set_entry"
    
    This reverts commit bb8592efcf8ef2f62947745d3182ea05b5256a15 which is
    commit 67d7d8ad99beccd9fe92d585b87f1760dc9018e3 upstream.
    
    The order in which patches are queued to stable matters. This patch
    has a logical dependency on commit 310c097c2bdbea253d6ee4e064f3e65580ef93ac
    upstream, and failing to queue the latter results in a null-ptr-deref
    reported at the Link below.
    
    In order to avoid conflicts on stable, revert the commit just so that we
    can queue its prerequisite patch first and then queue the same after.
    
    Link: https://syzkaller.appspot.com/bug?extid=d5ebf56f3b1268136afd
    Signed-off-by: Tudor Ambarus <tudor.ambarus@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 81775ab858b4236c52c5da7e25cec6e49dd91b46
Author: Miklos Szeredi <mszeredi@redhat.com>
Date:   Fri Apr 22 15:48:53 2022 +0200

    fuse: fix deadlock between atomic O_TRUNC and page invalidation
    
    commit 2fdbb8dd01556e1501132b5ad3826e8f71e24a8b upstream.
    
    fuse_finish_open() will be called with FUSE_NOWRITE set in case of atomic
    O_TRUNC open(), so commit 76224355db75 ("fuse: truncate pagecache on
    atomic_o_trunc") replaced invalidate_inode_pages2() by truncate_pagecache()
    in such a case to avoid the A-A deadlock. However, we found another A-B-B-A
    deadlock related to the case above, which will cause the xfstests
    generic/464 testcase hung in our virtio-fs test environment.
    
    For example, consider two processes concurrently open one same file, one
    with O_TRUNC and another without O_TRUNC. The deadlock case is described
    below, if open(O_TRUNC) is already set_nowrite(acquired A), and is trying
    to lock a page (acquiring B), open() could have held the page lock
    (acquired B), and waiting on the page writeback (acquiring A). This would
    lead to deadlocks.
    
    open(O_TRUNC)
    ----------------------------------------------------------------
    fuse_open_common
      inode_lock            [C acquire]
      fuse_set_nowrite      [A acquire]
    
      fuse_finish_open
        truncate_pagecache
          lock_page         [B acquire]
          truncate_inode_page
          unlock_page       [B release]
    
      fuse_release_nowrite  [A release]
      inode_unlock          [C release]
    ----------------------------------------------------------------
    
    open()
    ----------------------------------------------------------------
    fuse_open_common
      fuse_finish_open
        invalidate_inode_pages2
          lock_page         [B acquire]
            fuse_launder_page
              fuse_wait_on_page_writeback [A acquire & release]
          unlock_page       [B release]
    ----------------------------------------------------------------
    
    Besides this case, all calls of invalidate_inode_pages2() and
    invalidate_inode_pages2_range() in fuse code also can deadlock with
    open(O_TRUNC).
    
    Fix by moving the truncate_pagecache() call outside the nowrite protected
    region.  The nowrite protection is only for delayed writeback
    (writeback_cache) case, where inode lock does not protect against
    truncation racing with writes on the server.  Write syscalls racing with
    page cache truncation still get the inode lock protection.
    
    This patch also changes the order of filemap_invalidate_lock()
    vs. fuse_set_nowrite() in fuse_open_common().  This new order matches the
    order found in fuse_file_fallocate() and fuse_do_setattr().
    
    Reported-by: Jiachen Zhang <zhangjiachen.jaycee@bytedance.com>
    Tested-by: Jiachen Zhang <zhangjiachen.jaycee@bytedance.com>
    Fixes: e4648309b85a ("fuse: truncate pending writes on O_TRUNC")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Yang Bo <yb203166@antfin.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 03cefde986f1504fb84c92403c2b6c133fc9bdb0
Author: Jiachen Zhang <zhangjiachen.jaycee@bytedance.com>
Date:   Wed Sep 28 20:19:34 2022 +0800

    fuse: always revalidate rename target dentry
    
    commit ccc031e26afe60d2a5a3d93dabd9c978210825fb upstream.
    
    The previous commit df8629af2934 ("fuse: always revalidate if exclusive
    create") ensures that the dentries are revalidated on O_EXCL creates.  This
    commit complements it by also performing revalidation for rename target
    dentries.  Otherwise, a rename target file that only exists in kernel
    dentry cache but not in the filesystem will result in EEXIST if
    RENAME_NOREPLACE flag is used.
    
    Signed-off-by: Jiachen Zhang <zhangjiachen.jaycee@bytedance.com>
    Signed-off-by: Zhang Tianci <zhangtianci.1997@bytedance.com>
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Yang Bo <yb203166@antfin.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 42dfdbd4dcfa021d50af9f6a4c4a09eb086cc29d
Author: Miklos Szeredi <mszeredi@redhat.com>
Date:   Fri Oct 22 17:03:03 2021 +0200

    fuse: fix attr version comparison in fuse_read_update_size()
    
    commit 484ce65715b06aead8c4901f01ca32c5a240bc71 upstream.
    
    A READ request returning a short count is taken as indication of EOF, and
    the cached file size is modified accordingly.
    
    Fix the attribute version checking to allow for changes to fc->attr_version
    on other inodes.
    
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Yang Bo <yb203166@antfin.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0078a1667cbf7e674430186837698503f0ef4272
Author: Miklos Szeredi <mszeredi@redhat.com>
Date:   Thu Oct 21 10:01:38 2021 +0200

    fuse: check s_root when destroying sb
    
    commit d534d31d6a45d71de61db22090b4820afb68fddc upstream.
    
    Checking "fm" works because currently sb->s_fs_info is cleared on error
    paths; however, sb->s_root is what generic_shutdown_super() checks to
    determine whether the sb was fully initialized or not.
    
    This change will allow cleanup of sb setup error paths.
    
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Yang Bo <yb203166@antfin.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6d0d67b05f7b42f638aae31af558e72ce7c5836a
Author: Connor Kuehl <ckuehl@redhat.com>
Date:   Thu Mar 18 08:52:22 2021 -0500

    virtiofs: split requests that exceed virtqueue size
    
    commit a7f0d7aab0b4f3f0780b1f77356e2fe7202ac0cb upstream.
    
    If an incoming FUSE request can't fit on the virtqueue, the request is
    placed onto a workqueue so a worker can try to resubmit it later where
    there will (hopefully) be space for it next time.
    
    This is fine for requests that aren't larger than a virtqueue's maximum
    capacity.  However, if a request's size exceeds the maximum capacity of the
    virtqueue (even if the virtqueue is empty), it will be doomed to a life of
    being placed on the workqueue, removed, discovered it won't fit, and placed
    on the workqueue yet again.
    
    Furthermore, from section 2.6.5.3.1 (Driver Requirements: Indirect
    Descriptors) of the virtio spec:
    
      "A driver MUST NOT create a descriptor chain longer than the Queue
      Size of the device."
    
    To fix this, limit the number of pages FUSE will use for an overall
    request.  This way, each request can realistically fit on the virtqueue
    when it is decomposed into a scattergather list and avoid violating section
    2.6.5.3.1 of the virtio spec.
    
    Signed-off-by: Connor Kuehl <ckuehl@redhat.com>
    Reviewed-by: Vivek Goyal <vgoyal@redhat.com>
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Yang Bo <yb203166@antfin.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cf08dc79168a80a7cf4dad14a3cc0f2f87561d11
Author: Miklos Szeredi <mszeredi@redhat.com>
Date:   Wed Nov 11 17:22:32 2020 +0100

    virtiofs: clean up error handling in virtio_fs_get_tree()
    
    commit 833c5a42e28beeefa1f9bd476a63fe8050c1e8ca upstream.
    
    Avoid duplicating error cleanup.
    
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
    Signed-off-by: Yang Bo <yb203166@antfin.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e220438d1e33170313a295cd797919228c638953
Author: Alyssa Ross <hi@alyssa.is>
Date:   Sun Mar 26 18:21:21 2023 +0000

    purgatory: fix disabling debug info
    
    commit d83806c4c0cccc0d6d3c3581a11983a9c186a138 upstream.
    
    Since 32ef9e5054ec, -Wa,-gdwarf-2 is no longer used in KBUILD_AFLAGS.
    Instead, it includes -g, the appropriate -gdwarf-* flag, and also the
    -Wa versions of both of those if building with Clang and GNU as.  As a
    result, debug info was being generated for the purgatory objects, even
    though the intention was that it not be.
    
    Fixes: 32ef9e5054ec ("Makefile.debug: re-enable debug info for .S files")
    Signed-off-by: Alyssa Ross <hi@alyssa.is>
    Cc: stable@vger.kernel.org
    Acked-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 37df709706ae71de4dca8fe338625a643543fd9a
Author: Salvatore Bonaccorso <carnil@debian.org>
Date:   Sat Apr 22 00:17:42 2023 +0200

    docs: futex: Fix kernel-doc references after code split-up preparation
    
    In upstream commit 77e52ae35463 ("futex: Move to kernel/futex/") the
    futex code from kernel/futex.c was moved into kernel/futex/core.c in
    preparation of the split-up of the implementation in various files.
    
    Point kernel-doc references to the new files as otherwise the
    documentation shows errors on build:
    
        [...]
        Error: Cannot open file ./kernel/futex.c
        Error: Cannot open file ./kernel/futex.c
        [...]
        WARNING: kernel-doc './scripts/kernel-doc -rst -enable-lineno -sphinx-version 3.4.3 -internal ./kernel/futex.c' failed with return code 2
    
    There is no direct upstream commit for this change. It is made in
    analogy to commit bc67f1c454fb ("docs: futex: Fix kernel-doc
    references") applied as consequence of the restructuring of the futex
    code.
    
    Fixes: 77e52ae35463 ("futex: Move to kernel/futex/")
    Signed-off-by: Salvatore Bonaccorso <carnil@debian.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 77748b0a047e7962c66cd9864ddfe87432571a52
Author: Jiaxun Yang <jiaxun.yang@flygoat.com>
Date:   Sat Apr 8 21:33:48 2023 +0100

    MIPS: Define RUNTIME_DISCARD_EXIT in LD script
    
    commit 6dcbd0a69c84a8ae7a442840a8cf6b1379dc8f16 upstream.
    
    MIPS's exit sections are discarded at runtime as well.
    
    Fixes link error:
    `.exit.text' referenced in section `__jump_table' of fs/fuse/inode.o:
    defined in discarded section `.exit.text' of fs/fuse/inode.o
    
    Fixes: 99cb0d917ffa ("arch: fix broken BuildID for arm64 and riscv")
    Reported-by: "kernelci.org bot" <bot@kernelci.org>
    Signed-off-by: Jiaxun Yang <jiaxun.yang@flygoat.com>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4735b6f74f25e5e869ef1e199064c4f4cd31aa68
Author: Qais Yousef <qyousef@layalina.io>
Date:   Tue Apr 18 15:09:43 2023 +0100

    sched/fair: Fixes for capacity inversion detection
    
    commit da07d2f9c153e457e845d4dcfdd13568d71d18a4 upstream.
    
    Traversing the Perf Domains requires rcu_read_lock() to be held and is
    conditional on sched_energy_enabled(). Ensure right protections applied.
    
    Also skip capacity inversion detection for our own pd; which was an
    error.
    
    Fixes: 44c7b80bffc3 ("sched/fair: Detect capacity inversion")
    Reported-by: Dietmar Eggemann <dietmar.eggemann@arm.com>
    Signed-off-by: Qais Yousef (Google) <qyousef@layalina.io>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Vincent Guittot <vincent.guittot@linaro.org>
    Link: https://lore.kernel.org/r/20230112122708.330667-3-qyousef@layalina.io
    (cherry picked from commit da07d2f9c153e457e845d4dcfdd13568d71d18a4)
    Signed-off-by: Qais Yousef (Google) <qyousef@layalina.io>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 89ad8a672f57fb119e1743901ed129d4b0a2dc2b
Author: Qais Yousef <qyousef@layalina.io>
Date:   Tue Apr 18 15:09:42 2023 +0100

    sched/uclamp: Fix a uninitialized variable warnings
    
    commit e26fd28db82899be71b4b949527373d0a6be1e65 upstream.
    
    Addresses the following warnings:
    
    > config: riscv-randconfig-m031-20221111
    > compiler: riscv64-linux-gcc (GCC) 12.1.0
    >
    > smatch warnings:
    > kernel/sched/fair.c:7263 find_energy_efficient_cpu() error: uninitialized symbol 'util_min'.
    > kernel/sched/fair.c:7263 find_energy_efficient_cpu() error: uninitialized symbol 'util_max'.
    
    Fixes: 244226035a1f ("sched/uclamp: Fix fits_capacity() check in feec()")
    Reported-by: kernel test robot <lkp@intel.com>
    Reported-by: Dan Carpenter <error27@gmail.com>
    Signed-off-by: Qais Yousef (Google) <qyousef@layalina.io>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Vincent Guittot <vincent.guittot@linaro.org>
    Link: https://lore.kernel.org/r/20230112122708.330667-2-qyousef@layalina.io
    (cherry picked from commit e26fd28db82899be71b4b949527373d0a6be1e65)
    [Conflict in kernel/sched/fair.c due to new automatic variable in
    master vs 5.10 and new code around for loop]
    Signed-off-by: Qais Yousef (Google) <qyousef@layalina.io>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 09129798a608eee34c0e53e5cb4974023628944f
Author: Qais Yousef <qyousef@layalina.io>
Date:   Tue Apr 18 15:09:41 2023 +0100

    sched/fair: Consider capacity inversion in util_fits_cpu()
    
    commit: aa69c36f31aadc1669bfa8a3de6a47b5e6c98ee8 upstream.
    
    We do consider thermal pressure in util_fits_cpu() for uclamp_min only.
    With the exception of the biggest cores which by definition are the max
    performance point of the system and all tasks by definition should fit.
    
    Even under thermal pressure, the capacity of the biggest CPU is the
    highest in the system and should still fit every task. Except when it
    reaches capacity inversion point, then this is no longer true.
    
    We can handle this by using the inverted capacity as capacity_orig in
    util_fits_cpu(). Which not only addresses the problem above, but also
    ensure uclamp_max now considers the inverted capacity. Force fitting
    a task when a CPU is in this adverse state will contribute to making the
    thermal throttling last longer.
    
    Signed-off-by: Qais Yousef <qais.yousef@arm.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lore.kernel.org/r/20220804143609.515789-10-qais.yousef@arm.com
    (cherry picked from commit aa69c36f31aadc1669bfa8a3de6a47b5e6c98ee8)
    Signed-off-by: Qais Yousef (Google) <qyousef@layalina.io>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 30f04dd56dfddfc58cd7fe9b45728ba9c1682a94
Author: Qais Yousef <qyousef@layalina.io>
Date:   Tue Apr 18 15:09:40 2023 +0100

    sched/fair: Detect capacity inversion
    
    commit: 44c7b80bffc3a657a36857098d5d9c49d94e652b upstream.
    
    Check each performance domain to see if thermal pressure is causing its
    capacity to be lower than another performance domain.
    
    We assume that each performance domain has CPUs with the same
    capacities, which is similar to an assumption made in energy_model.c
    
    We also assume that thermal pressure impacts all CPUs in a performance
    domain equally.
    
    If there're multiple performance domains with the same capacity_orig, we
    will trigger a capacity inversion if the domain is under thermal
    pressure.
    
    The new cpu_in_capacity_inversion() should help users to know when
    information about capacity_orig are not reliable and can opt in to use
    the inverted capacity as the 'actual' capacity_orig.
    
    Signed-off-by: Qais Yousef <qais.yousef@arm.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lore.kernel.org/r/20220804143609.515789-9-qais.yousef@arm.com
    (cherry picked from commit 44c7b80bffc3a657a36857098d5d9c49d94e652b)
    [Trivial conflict in kernel/sched/fair.c and sched.h due to code shuffling]
    Signed-off-by: Qais Yousef (Google) <qyousef@layalina.io>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b18cbd359d7216a57af9409a177fa58e7db827fb
Author: Qais Yousef <qyousef@layalina.io>
Date:   Tue Apr 18 15:09:39 2023 +0100

    sched/uclamp: Cater for uclamp in find_energy_efficient_cpu()'s early exit condition
    
    commit d81304bc6193554014d4372a01debdf65e1e9a4d upstream.
    
    If the utilization of the woken up task is 0, we skip the energy
    calculation because it has no impact.
    
    But if the task is boosted (uclamp_min != 0) will have an impact on task
    placement and frequency selection. Only skip if the util is truly
    0 after applying uclamp values.
    
    Change uclamp_task_cpu() signature to avoid unnecessary additional calls
    to uclamp_eff_get(). feec() is the only user now.
    
    Fixes: 732cd75b8c920 ("sched/fair: Select an energy-efficient CPU on task wake-up")
    Signed-off-by: Qais Yousef <qais.yousef@arm.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lore.kernel.org/r/20220804143609.515789-8-qais.yousef@arm.com
    (cherry picked from commit d81304bc6193554014d4372a01debdf65e1e9a4d)
    Signed-off-by: Qais Yousef (Google) <qyousef@layalina.io>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 41a880740c9f3a7da983c67a2ae8f70085fd2c00
Author: Qais Yousef <qyousef@layalina.io>
Date:   Tue Apr 18 15:09:38 2023 +0100

    sched/uclamp: Make cpu_overutilized() use util_fits_cpu()
    
    commit c56ab1b3506ba0e7a872509964b100912bde165d upstream.
    
    So that it is now uclamp aware.
    
    This fixes a major problem of busy tasks capped with UCLAMP_MAX keeping
    the system in overutilized state which disables EAS and leads to wasting
    energy in the long run.
    
    Without this patch running a busy background activity like JIT
    compilation on Pixel 6 causes the system to be in overutilized state
    74.5% of the time.
    
    With this patch this goes down to  9.79%.
    
    It also fixes another problem when long running tasks that have their
    UCLAMP_MIN changed while running such that they need to upmigrate to
    honour the new UCLAMP_MIN value. The upmigration doesn't get triggered
    because overutilized state never gets set in this state, hence misfit
    migration never happens at tick in this case until the task wakes up
    again.
    
    Fixes: af24bde8df202 ("sched/uclamp: Add uclamp support to energy_compute()")
    Signed-off-by: Qais Yousef <qais.yousef@arm.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lore.kernel.org/r/20220804143609.515789-7-qais.yousef@arm.com
    (cherry picked from commit c56ab1b3506ba0e7a872509964b100912bde165d)
    [Conflict in kernel/sched/fair.c: use cpu_util() instead of
    cpu_util_cfs()]
    Signed-off-by: Qais Yousef (Google) <qyousef@layalina.io>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 07750955e9a241f6c8d5f0ed4eab2b26fb8cd53d
Author: Qais Yousef <qyousef@layalina.io>
Date:   Tue Apr 18 15:09:37 2023 +0100

    sched/uclamp: Make asym_fits_capacity() use util_fits_cpu()
    
    commit a2e7f03ed28fce26c78b985f87913b6ce3accf9d upstream.
    
    Use the new util_fits_cpu() to ensure migration margin and capacity
    pressure are taken into account correctly when uclamp is being used
    otherwise we will fail to consider CPUs as fitting in scenarios where
    they should.
    
    s/asym_fits_capacity/asym_fits_cpu/ to better reflect what it does now.
    
    Fixes: b4c9c9f15649 ("sched/fair: Prefer prev cpu in asymmetric wakeup path")
    Signed-off-by: Qais Yousef <qais.yousef@arm.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lore.kernel.org/r/20220804143609.515789-6-qais.yousef@arm.com
    (cherry picked from commit a2e7f03ed28fce26c78b985f87913b6ce3accf9d)
    [Conflict in kernel/sched/fair.c due different name of static key
    wrapper function and slightly different if condition block in one of the
    asym_fits_cpu() call sites]
    Signed-off-by: Qais Yousef (Google) <qyousef@layalina.io>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2fd1c194e688484e65c2a428bd343107d2a753c2
Author: Qais Yousef <qyousef@layalina.io>
Date:   Tue Apr 18 15:09:36 2023 +0100

    sched/uclamp: Make select_idle_capacity() use util_fits_cpu()
    
    commit b759caa1d9f667b94727b2ad12589cbc4ce13a82 upstream.
    
    Use the new util_fits_cpu() to ensure migration margin and capacity
    pressure are taken into account correctly when uclamp is being used
    otherwise we will fail to consider CPUs as fitting in scenarios where
    they should.
    
    Fixes: b4c9c9f15649 ("sched/fair: Prefer prev cpu in asymmetric wakeup path")
    Signed-off-by: Qais Yousef <qais.yousef@arm.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lore.kernel.org/r/20220804143609.515789-5-qais.yousef@arm.com
    (cherry picked from commit b759caa1d9f667b94727b2ad12589cbc4ce13a82)
    Signed-off-by: Qais Yousef (Google) <qyousef@layalina.io>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8ca2bf63d946bf443fa0b86a2eaefdf952f8cc29
Author: Qais Yousef <qyousef@layalina.io>
Date:   Tue Apr 18 15:09:35 2023 +0100

    sched/uclamp: Fix fits_capacity() check in feec()
    
    commit 244226035a1f9b2b6c326e55ae5188fab4f428cb upstream.
    
    As reported by Yun Hsiang [1], if a task has its uclamp_min >= 0.8 * 1024,
    it'll always pick the previous CPU because fits_capacity() will always
    return false in this case.
    
    The new util_fits_cpu() logic should handle this correctly for us beside
    more corner cases where similar failures could occur, like when using
    UCLAMP_MAX.
    
    We open code uclamp_rq_util_with() except for the clamp() part,
    util_fits_cpu() needs the 'raw' values to be passed to it.
    
    Also introduce uclamp_rq_{set, get}() shorthand accessors to get uclamp
    value for the rq. Makes the code more readable and ensures the right
    rules (use READ_ONCE/WRITE_ONCE) are respected transparently.
    
    [1] https://lists.linaro.org/pipermail/eas-dev/2020-July/001488.html
    
    Fixes: 1d42509e475c ("sched/fair: Make EAS wakeup placement consider uclamp restrictions")
    Reported-by: Yun Hsiang <hsiang023167@gmail.com>
    Signed-off-by: Qais Yousef <qais.yousef@arm.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lore.kernel.org/r/20220804143609.515789-4-qais.yousef@arm.com
    (cherry picked from commit 244226035a1f9b2b6c326e55ae5188fab4f428cb)
    [Fix trivial conflict in kernel/sched/fair.c due to new automatic
    variables in master vs 5.10]
    Signed-off-by: Qais Yousef (Google) <qyousef@layalina.io>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5cb1a56ced3080f78da539a7addfa95f25c60fd8
Author: Qais Yousef <qyousef@layalina.io>
Date:   Tue Apr 18 15:09:34 2023 +0100

    sched/uclamp: Make task_fits_capacity() use util_fits_cpu()
    
    commit b48e16a69792b5dc4a09d6807369d11b2970cc36 upstream.
    
    So that the new uclamp rules in regard to migration margin and capacity
    pressure are taken into account correctly.
    
    Fixes: a7008c07a568 ("sched/fair: Make task_fits_capacity() consider uclamp restrictions")
    Co-developed-by: Vincent Guittot <vincent.guittot@linaro.org>
    Signed-off-by: Qais Yousef <qais.yousef@arm.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lore.kernel.org/r/20220804143609.515789-3-qais.yousef@arm.com
    (cherry picked from commit b48e16a69792b5dc4a09d6807369d11b2970cc36)
    Signed-off-by: Qais Yousef (Google) <qyousef@layalina.io>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2523d9d7bb5ca7986ee29b5e0fb66d1221bffbc1
Author: Peter Xu <peterx@redhat.com>
Date:   Wed Apr 5 11:51:20 2023 -0400

    mm/khugepaged: check again on anon uffd-wp during isolation
    
    commit dd47ac428c3f5f3bcabe845f36be870fe6c20784 upstream.
    
    Khugepaged collapse an anonymous thp in two rounds of scans.  The 2nd
    round done in __collapse_huge_page_isolate() after
    hpage_collapse_scan_pmd(), during which all the locks will be released
    temporarily.  It means the pgtable can change during this phase before 2nd
    round starts.
    
    It's logically possible some ptes got wr-protected during this phase, and
    we can errornously collapse a thp without noticing some ptes are
    wr-protected by userfault.  e1e267c7928f wanted to avoid it but it only
    did that for the 1st phase, not the 2nd phase.
    
    Since __collapse_huge_page_isolate() happens after a round of small page
    swapins, we don't need to worry on any !present ptes - if it existed
    khugepaged will already bail out.  So we only need to check present ptes
    with uffd-wp bit set there.
    
    This is something I found only but never had a reproducer, I thought it
    was one caused a bug in Muhammad's recent pagemap new ioctl work, but it
    turns out it's not the cause of that but an userspace bug.  However this
    seems to still be a real bug even with a very small race window, still
    worth to have it fixed and copy stable.
    
    Link: https://lkml.kernel.org/r/20230405155120.3608140-1-peterx@redhat.com
    Fixes: e1e267c7928f ("khugepaged: skip collapse if uffd-wp detected")
    Signed-off-by: Peter Xu <peterx@redhat.com>
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Reviewed-by: Yang Shi <shy828301@gmail.com>
    Cc: Andrea Arcangeli <aarcange@redhat.com>
    Cc: Axel Rasmussen <axelrasmussen@google.com>
    Cc: Mike Rapoport <rppt@linux.vnet.ibm.com>
    Cc: Nadav Amit <nadav.amit@gmail.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 651b0bf43d6706496c993312c3e86cb858606eba
Author: Bhavya Kapoor <b-kapoor@ti.com>
Date:   Fri Mar 17 14:57:11 2023 +0530

    mmc: sdhci_am654: Set HIGH_SPEED_ENA for SDR12 and SDR25
    
    commit 2265098fd6a6272fde3fd1be5761f2f5895bd99a upstream.
    
    Timing Information in Datasheet assumes that HIGH_SPEED_ENA=1 should be
    set for SDR12 and SDR25 modes. But sdhci_am654 driver clears
    HIGH_SPEED_ENA register. Thus, Modify sdhci_am654 to not clear
    HIGH_SPEED_ENA (HOST_CONTROL[2]) bit for SDR12 and SDR25 speed modes.
    
    Fixes: e374e87538f4 ("mmc: sdhci_am654: Clear HISPD_ENA in some lower speed modes")
    Signed-off-by: Bhavya Kapoor <b-kapoor@ti.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20230317092711.660897-1-b-kapoor@ti.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c61928fcca27a5ed5b3dde9930023182015de2ae
Author: Ondrej Mosnacek <omosnace@redhat.com>
Date:   Fri Feb 17 17:21:54 2023 +0100

    kernel/sys.c: fix and improve control flow in __sys_setres[ug]id()
    
    commit 659c0ce1cb9efc7f58d380ca4bb2a51ae9e30553 upstream.
    
    Linux Security Modules (LSMs) that implement the "capable" hook will
    usually emit an access denial message to the audit log whenever they
    "block" the current task from using the given capability based on their
    security policy.
    
    The occurrence of a denial is used as an indication that the given task
    has attempted an operation that requires the given access permission, so
    the callers of functions that perform LSM permission checks must take care
    to avoid calling them too early (before it is decided if the permission is
    actually needed to perform the requested operation).
    
    The __sys_setres[ug]id() functions violate this convention by first
    calling ns_capable_setid() and only then checking if the operation
    requires the capability or not.  It means that any caller that has the
    capability granted by DAC (task's capability set) but not by MAC (LSMs)
    will generate a "denied" audit record, even if is doing an operation for
    which the capability is not required.
    
    Fix this by reordering the checks such that ns_capable_setid() is checked
    last and -EPERM is returned immediately if it returns false.
    
    While there, also do two small optimizations:
    * move the capability check before prepare_creds() and
    * bail out early in case of a no-op.
    
    Link: https://lkml.kernel.org/r/20230217162154.837549-1-omosnace@redhat.com
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Ondrej Mosnacek <omosnace@redhat.com>
    Cc: Eric W. Biederman <ebiederm@xmission.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e10a6d88ae9b81413da6a6d415c2b705100dd872
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Sat Apr 1 22:03:27 2023 +0200

    memstick: fix memory leak if card device is never registered
    
    commit 4b6d621c9d859ff89e68cebf6178652592676013 upstream.
    
    When calling dev_set_name() memory is allocated for the name for the
    struct device.  Once that structure device is registered, or attempted
    to be registerd, with the driver core, the driver core will handle
    cleaning up that memory when the device is removed from the system.
    
    Unfortunatly for the memstick code, there is an error path that causes
    the struct device to never be registered, and so the memory allocated in
    dev_set_name will be leaked.  Fix that leak by manually freeing it right
    before the memory for the device is freed.
    
    Cc: Maxim Levitsky <maximlevitsky@gmail.com>
    Cc: Alex Dubov <oakad@yahoo.com>
    Cc: Ulf Hansson <ulf.hansson@linaro.org>
    Cc: "Rafael J. Wysocki" <rafael@kernel.org>
    Cc: Hans de Goede <hdegoede@redhat.com>
    Cc: Kay Sievers <kay.sievers@vrfy.org>
    Cc: linux-mmc@vger.kernel.org
    Fixes: 0252c3b4f018 ("memstick: struct device - replace bus_id with dev_name(), dev_set_name()")
    Cc: stable <stable@kernel.org>
    Co-developed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Co-developed-by: Mirsad Goran Todorovac <mirsad.todorovac@alu.unizg.hr>
    Signed-off-by: Mirsad Goran Todorovac <mirsad.todorovac@alu.unizg.hr>
    Link: https://lore.kernel.org/r/20230401200327.16800-1-gregkh@linuxfoundation.org
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2c90ef37151f9143c1bd18d8f76563f817632dbd
Author: Ryusuke Konishi <konishi.ryusuke@gmail.com>
Date:   Tue Apr 18 02:35:13 2023 +0900

    nilfs2: initialize unused bytes in segment summary blocks
    
    commit ef832747a82dfbc22a3702219cc716f449b24e4a upstream.
    
    Syzbot still reports uninit-value in nilfs_add_checksums_on_logs() for
    KMSAN enabled kernels after applying commit 7397031622e0 ("nilfs2:
    initialize "struct nilfs_binfo_dat"->bi_pad field").
    
    This is because the unused bytes at the end of each block in segment
    summaries are not initialized.  So this fixes the issue by padding the
    unused bytes with null bytes.
    
    Link: https://lkml.kernel.org/r/20230417173513.12598-1-konishi.ryusuke@gmail.com
    Signed-off-by: Ryusuke Konishi <konishi.ryusuke@gmail.com>
    Tested-by: Ryusuke Konishi <konishi.ryusuke@gmail.com>
    Reported-by: syzbot+048585f3f4227bb2b49b@syzkaller.appspotmail.com
      Link: https://syzkaller.appspot.com/bug?extid=048585f3f4227bb2b49b
    Cc: Alexander Potapenko <glider@google.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 09daff9c3cd77c4c2e195de82a2082ee956db0e0
Author: Brian Masney <bmasney@redhat.com>
Date:   Mon Apr 3 21:14:55 2023 -0400

    iio: light: tsl2772: fix reading proximity-diodes from device tree
    
    commit b1cb00d51e361cf5af93649917d9790e1623647e upstream.
    
    tsl2772_read_prox_diodes() will correctly parse the properties from
    device tree to determine which proximity diode(s) to read from, however
    it didn't actually set this value on the struct tsl2772_settings. Let's
    go ahead and fix that.
    
    Reported-by: Tom Rix <trix@redhat.com>
    Link: https://lore.kernel.org/lkml/20230327120823.1369700-1-trix@redhat.com/
    Fixes: 94cd1113aaa0 ("iio: tsl2772: add support for reading proximity led settings from device tree")
    Signed-off-by: Brian Masney <bmasney@redhat.com>
    Link: https://lore.kernel.org/r/20230404011455.339454-1-bmasney@redhat.com
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 77ac8f2ad4adcddfba0d539030bbeb53b35f6099
Author: Brian Foster <bfoster@redhat.com>
Date:   Fri Apr 9 10:27:43 2021 -0700

    xfs: drop submit side trans alloc for append ioends
    
    commit 7cd3099f4925d7c15887d1940ebd65acd66100f5 upstream.
    
    Per-inode ioend completion batching has a log reservation deadlock
    vector between preallocated append transactions and transactions
    that are acquired at completion time for other purposes (i.e.,
    unwritten extent conversion or COW fork remaps). For example, if the
    ioend completion workqueue task executes on a batch of ioends that
    are sorted such that an append ioend sits at the tail, it's possible
    for the outstanding append transaction reservation to block
    allocation of transactions required to process preceding ioends in
    the list.
    
    Append ioend completion is historically the common path for on-disk
    inode size updates. While file extending writes may have completed
    sometime earlier, the on-disk inode size is only updated after
    successful writeback completion. These transactions are preallocated
    serially from writeback context to mitigate concurrency and
    associated log reservation pressure across completions processed by
    multi-threaded workqueue tasks.
    
    However, now that delalloc blocks unconditionally map to unwritten
    extents at physical block allocation time, size updates via append
    ioends are relatively rare. This means that inode size updates most
    commonly occur as part of the preexisting completion time
    transaction to convert unwritten extents. As a result, there is no
    longer a strong need to preallocate size update transactions.
    
    Remove the preallocation of inode size update transactions to avoid
    the ioend completion processing log reservation deadlock. Instead,
    continue to send all potential size extending ioends to workqueue
    context for completion and allocate the transaction from that
    context. This ensures that no outstanding log reservation is owned
    by the ioend completion worker task when it begins to process
    ioends.
    
    Signed-off-by: Brian Foster <bfoster@redhat.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Darrick J. Wong <djwong@kernel.org>
    Signed-off-by: Darrick J. Wong <djwong@kernel.org>
    Reported-by: Christian Theune <ct@flyingcircus.io>
    Link: https://lore.kernel.org/linux-xfs/CAOQ4uxjj2UqA0h4Y31NbmpHksMhVrXfXjLG4Tnz3zq_UR-3gSA@mail.gmail.com/
    Signed-off-by: Amir Goldstein <amir73il@gmail.com>
    Acked-by: Darrick J. Wong <djwong@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a4e800a7bd67490722c8466472c7ad03e3754902
Author: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
Date:   Wed Aug 25 09:54:47 2021 +0530

    powerpc/doc: Fix htmldocs errors
    
    commit f50da6edbf1ebf35dd8070847bfab5cb988d472b upstream.
    
    Fix make htmldocs related errors with the newly added associativity.rst
    doc file.
    
    Reported-by: Stephen Rothwell <sfr@canb.auug.org.au>
    Tested-by: Stephen Rothwell <sfr@canb.auug.org.au> # build test
    Signed-off-by: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20210825042447.106219-1-aneesh.kumar@linux.ibm.com
    Cc: Salvatore Bonaccorso <carnil@debian.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c215c636819ce09c336f8c27f1495e3b958208f3
Author: Juergen Gross <jgross@suse.com>
Date:   Wed Mar 29 10:02:59 2023 +0200

    xen/netback: use same error messages for same errors
    
    [ Upstream commit 2eca98e5b24d01c02b46c67be05a5f98cc9789b1 ]
    
    Issue the same error message in case an illegal page boundary crossing
    has been detected in both cases where this is tested.
    
    Suggested-by: Jan Beulich <jbeulich@suse.com>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Jan Beulich <jbeulich@suse.com>
    Link: https://lore.kernel.org/r/20230329080259.14823-1-jgross@suse.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0c9cbfc951c4c4f686df1aee2aceb93935eea729
Author: Sagi Grimberg <sagi@grimberg.me>
Date:   Mon Mar 20 15:33:34 2023 +0200

    nvme-tcp: fix a possible UAF when failing to allocate an io queue
    
    [ Upstream commit 88eaba80328b31ef81813a1207b4056efd7006a6 ]
    
    When we allocate a nvme-tcp queue, we set the data_ready callback before
    we actually need to use it. This creates the potential that if a stray
    controller sends us data on the socket before we connect, we can trigger
    the io_work and start consuming the socket.
    
    In this case reported: we failed to allocate one of the io queues, and
    as we start releasing the queues that we already allocated, we get
    a UAF [1] from the io_work which is running before it should really.
    
    Fix this by setting the socket ops callbacks only before we start the
    queue, so that we can't accidentally schedule the io_work in the
    initialization phase before the queue started. While we are at it,
    rename nvme_tcp_restore_sock_calls to pair with nvme_tcp_setup_sock_ops.
    
    [1]:
    [16802.107284] nvme nvme4: starting error recovery
    [16802.109166] nvme nvme4: Reconnecting in 10 seconds...
    [16812.173535] nvme nvme4: failed to connect socket: -111
    [16812.173745] nvme nvme4: Failed reconnect attempt 1
    [16812.173747] nvme nvme4: Reconnecting in 10 seconds...
    [16822.413555] nvme nvme4: failed to connect socket: -111
    [16822.413762] nvme nvme4: Failed reconnect attempt 2
    [16822.413765] nvme nvme4: Reconnecting in 10 seconds...
    [16832.661274] nvme nvme4: creating 32 I/O queues.
    [16833.919887] BUG: kernel NULL pointer dereference, address: 0000000000000088
    [16833.920068] nvme nvme4: Failed reconnect attempt 3
    [16833.920094] #PF: supervisor write access in kernel mode
    [16833.920261] nvme nvme4: Reconnecting in 10 seconds...
    [16833.920368] #PF: error_code(0x0002) - not-present page
    [16833.921086] Workqueue: nvme_tcp_wq nvme_tcp_io_work [nvme_tcp]
    [16833.921191] RIP: 0010:_raw_spin_lock_bh+0x17/0x30
    ...
    [16833.923138] Call Trace:
    [16833.923271]  <TASK>
    [16833.923402]  lock_sock_nested+0x1e/0x50
    [16833.923545]  nvme_tcp_try_recv+0x40/0xa0 [nvme_tcp]
    [16833.923685]  nvme_tcp_io_work+0x68/0xa0 [nvme_tcp]
    [16833.923824]  process_one_work+0x1e8/0x390
    [16833.923969]  worker_thread+0x53/0x3d0
    [16833.924104]  ? process_one_work+0x390/0x390
    [16833.924240]  kthread+0x124/0x150
    [16833.924376]  ? set_kthread_struct+0x50/0x50
    [16833.924518]  ret_from_fork+0x1f/0x30
    [16833.924655]  </TASK>
    
    Reported-by: Yanjun Zhang <zhangyanjun@cestc.cn>
    Signed-off-by: Sagi Grimberg <sagi@grimberg.me>
    Tested-by: Yanjun Zhang <zhangyanjun@cestc.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8c746b665089f9da50c34fc0369aa7d7f7c5e609
Author: Heiko Carstens <hca@linux.ibm.com>
Date:   Mon Mar 6 12:31:30 2023 +0100

    s390/ptrace: fix PTRACE_GET_LAST_BREAK error handling
    
    [ Upstream commit f9bbf25e7b2b74b52b2f269216a92657774f239c ]
    
    Return -EFAULT if put_user() for the PTRACE_GET_LAST_BREAK
    request fails, instead of silently ignoring it.
    
    Reviewed-by: Sven Schnelle <svens@linux.ibm.com>
    Signed-off-by: Heiko Carstens <hca@linux.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a36246a7480d9590b9b790a6b5b3ac95f6e41833
Author: Álvaro Fernández Rojas <noltari@gmail.com>
Date:   Thu Mar 23 20:48:41 2023 +0100

    net: dsa: b53: mmap: add phy ops
    
    [ Upstream commit 45977e58ce65ed0459edc9a0466d9dfea09463f5 ]
    
    Implement phy_read16() and phy_write16() ops for B53 MMAP to avoid accessing
    B53_PORT_MII_PAGE registers which hangs the device.
    This access should be done through the MDIO Mux bus controller.
    
    Signed-off-by: Álvaro Fernández Rojas <noltari@gmail.com>
    Acked-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b33f28ea45e9eb0f84e7bcc0ddc0d2d06a9acedb
Author: Damien Le Moal <damien.lemoal@opensource.wdc.com>
Date:   Wed Mar 22 11:22:11 2023 +0900

    scsi: core: Improve scsi_vpd_inquiry() checks
    
    [ Upstream commit f0aa59a33d2ac2267d260fe21eaf92500df8e7b4 ]
    
    Some USB-SATA adapters have broken behavior when an unsupported VPD page is
    probed: Depending on the VPD page number, a 4-byte header with a valid VPD
    page number but with a 0 length is returned. Currently, scsi_vpd_inquiry()
    only checks that the page number is valid to determine if the page is
    valid, which results in receiving only the 4-byte header for the
    non-existent page. This error manifests itself very often with page 0xb9
    for the Concurrent Positioning Ranges detection done by sd_read_cpr(),
    resulting in the following error message:
    
    sd 0:0:0:0: [sda] Invalid Concurrent Positioning Ranges VPD page
    
    Prevent such misleading error message by adding a check in
    scsi_vpd_inquiry() to verify that the page length is not 0.
    
    Signed-off-by: Damien Le Moal <damien.lemoal@opensource.wdc.com>
    Link: https://lore.kernel.org/r/20230322022211.116327-1-damien.lemoal@opensource.wdc.com
    Reviewed-by: Benjamin Block <bblock@linux.ibm.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 24ddcc6a635b01a8fa2f320461011e67c0ea5abc
Author: Tomas Henzl <thenzl@redhat.com>
Date:   Fri Mar 24 14:52:49 2023 +0100

    scsi: megaraid_sas: Fix fw_crash_buffer_show()
    
    [ Upstream commit 0808ed6ebbc292222ca069d339744870f6d801da ]
    
    If crash_dump_buf is not allocated then crash dump can't be available.
    Replace logical 'and' with 'or'.
    
    Signed-off-by: Tomas Henzl <thenzl@redhat.com>
    Link: https://lore.kernel.org/r/20230324135249.9733-1-thenzl@redhat.com
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 01bd481b1b9430bb16cbb05b25b7c87eb2514111
Author: Nick Desaulniers <ndesaulniers@google.com>
Date:   Wed Mar 8 11:59:33 2023 -0800

    selftests: sigaltstack: fix -Wuninitialized
    
    [ Upstream commit 05107edc910135d27fe557267dc45be9630bf3dd ]
    
    Building sigaltstack with clang via:
    $ ARCH=x86 make LLVM=1 -C tools/testing/selftests/sigaltstack/
    
    produces the following warning:
      warning: variable 'sp' is uninitialized when used here [-Wuninitialized]
      if (sp < (unsigned long)sstack ||
          ^~
    
    Clang expects these to be declared at global scope; we've fixed this in
    the kernel proper by using the macro `current_stack_pointer`. This is
    defined in different headers for different target architectures, so just
    create a new header that defines the arch-specific register names for
    the stack pointer register, and define it for more targets (at least the
    ones that support current_stack_pointer/ARCH_HAS_CURRENT_STACK_POINTER).
    
    Reported-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Link: https://lore.kernel.org/lkml/CA+G9fYsi3OOu7yCsMutpzKDnBMAzJBCPimBp86LhGBa0eCnEpA@mail.gmail.com/
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Tested-by: Anders Roxell <anders.roxell@linaro.org>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8b44a83a16806f4cc4330562648e10c5ae0eb706
Author: Jonathan Denose <jdenose@chromium.org>
Date:   Fri Mar 17 03:19:51 2023 -0700

    Input: i8042 - add quirk for Fujitsu Lifebook A574/H
    
    [ Upstream commit f5bad62f9107b701a6def7cac1f5f65862219b83 ]
    
    Fujitsu Lifebook A574/H requires the nomux option to properly
    probe the touchpad, especially when waking from sleep.
    
    Signed-off-by: Jonathan Denose <jdenose@google.com>
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20230303152623.45859-1-jdenose@google.com
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 37882b203a2d206cfab4fb9e1ade4374d0db0540
Author: Douglas Raillard <douglas.raillard@arm.com>
Date:   Mon Mar 6 12:25:49 2023 +0000

    f2fs: Fix f2fs_truncate_partial_nodes ftrace event
    
    [ Upstream commit 0b04d4c0542e8573a837b1d81b94209e48723b25 ]
    
    Fix the nid_t field so that its size is correctly reported in the text
    format embedded in trace.dat files. As it stands, it is reported as
    being of size 4:
    
            field:nid_t nid[3];     offset:24;      size:4; signed:0;
    
    Instead of 12:
    
            field:nid_t nid[3];     offset:24;      size:12;        signed:0;
    
    This also fixes the reported offset of subsequent fields so that they
    match with the actual struct layout.
    
    Signed-off-by: Douglas Raillard <douglas.raillard@arm.com>
    Reviewed-by: Mukesh Ojha <quic_mojha@quicinc.com>
    Reviewed-by: Chao Yu <chao@kernel.org>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9a8dbfd7f3e5c3066b2a4fb0eab13b852b087e9b
Author: Sebastian Basierski <sebastianx.basierski@intel.com>
Date:   Mon Apr 17 13:53:45 2023 -0700

    e1000e: Disable TSO on i219-LM card to increase speed
    
    [ Upstream commit 67d47b95119ad589b0a0b16b88b1dd9a04061ced ]
    
    While using i219-LM card currently it was only possible to achieve
    about 60% of maximum speed due to regression introduced in Linux 5.8.
    This was caused by TSO not being disabled by default despite commit
    f29801030ac6 ("e1000e: Disable TSO for buffer overrun workaround").
    Fix that by disabling TSO during driver probe.
    
    Fixes: f29801030ac6 ("e1000e: Disable TSO for buffer overrun workaround")
    Signed-off-by: Sebastian Basierski <sebastianx.basierski@intel.com>
    Signed-off-by: Mateusz Palczewski <mateusz.palczewski@intel.com>
    Tested-by: Naama Meir <naamax.meir@linux.intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Reviewed-by: Simon Horman <simon.horman@corigine.com>
    Link: https://lore.kernel.org/r/20230417205345.1030801-1-anthony.l.nguyen@intel.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b1281d008845ae9a4de9ef7510dcc1667557a67a
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Tue Apr 11 15:24:13 2023 +0000

    bpf: Fix incorrect verifier pruning due to missing register precision taints
    
    [ Upstream commit 71b547f561247897a0a14f3082730156c0533fed ]
    
    Juan Jose et al reported an issue found via fuzzing where the verifier's
    pruning logic prematurely marks a program path as safe.
    
    Consider the following program:
    
       0: (b7) r6 = 1024
       1: (b7) r7 = 0
       2: (b7) r8 = 0
       3: (b7) r9 = -2147483648
       4: (97) r6 %= 1025
       5: (05) goto pc+0
       6: (bd) if r6 <= r9 goto pc+2
       7: (97) r6 %= 1
       8: (b7) r9 = 0
       9: (bd) if r6 <= r9 goto pc+1
      10: (b7) r6 = 0
      11: (b7) r0 = 0
      12: (63) *(u32 *)(r10 -4) = r0
      13: (18) r4 = 0xffff888103693400 // map_ptr(ks=4,vs=48)
      15: (bf) r1 = r4
      16: (bf) r2 = r10
      17: (07) r2 += -4
      18: (85) call bpf_map_lookup_elem#1
      19: (55) if r0 != 0x0 goto pc+1
      20: (95) exit
      21: (77) r6 >>= 10
      22: (27) r6 *= 8192
      23: (bf) r1 = r0
      24: (0f) r0 += r6
      25: (79) r3 = *(u64 *)(r0 +0)
      26: (7b) *(u64 *)(r1 +0) = r3
      27: (95) exit
    
    The verifier treats this as safe, leading to oob read/write access due
    to an incorrect verifier conclusion:
    
      func#0 @0
      0: R1=ctx(off=0,imm=0) R10=fp0
      0: (b7) r6 = 1024                     ; R6_w=1024
      1: (b7) r7 = 0                        ; R7_w=0
      2: (b7) r8 = 0                        ; R8_w=0
      3: (b7) r9 = -2147483648              ; R9_w=-2147483648
      4: (97) r6 %= 1025                    ; R6_w=scalar()
      5: (05) goto pc+0
      6: (bd) if r6 <= r9 goto pc+2         ; R6_w=scalar(umin=18446744071562067969,var_off=(0xffffffff00000000; 0xffffffff)) R9_w=-2147483648
      7: (97) r6 %= 1                       ; R6_w=scalar()
      8: (b7) r9 = 0                        ; R9=0
      9: (bd) if r6 <= r9 goto pc+1         ; R6=scalar(umin=1) R9=0
      10: (b7) r6 = 0                       ; R6_w=0
      11: (b7) r0 = 0                       ; R0_w=0
      12: (63) *(u32 *)(r10 -4) = r0
      last_idx 12 first_idx 9
      regs=1 stack=0 before 11: (b7) r0 = 0
      13: R0_w=0 R10=fp0 fp-8=0000????
      13: (18) r4 = 0xffff8ad3886c2a00      ; R4_w=map_ptr(off=0,ks=4,vs=48,imm=0)
      15: (bf) r1 = r4                      ; R1_w=map_ptr(off=0,ks=4,vs=48,imm=0) R4_w=map_ptr(off=0,ks=4,vs=48,imm=0)
      16: (bf) r2 = r10                     ; R2_w=fp0 R10=fp0
      17: (07) r2 += -4                     ; R2_w=fp-4
      18: (85) call bpf_map_lookup_elem#1   ; R0=map_value_or_null(id=1,off=0,ks=4,vs=48,imm=0)
      19: (55) if r0 != 0x0 goto pc+1       ; R0=0
      20: (95) exit
    
      from 19 to 21: R0=map_value(off=0,ks=4,vs=48,imm=0) R6=0 R7=0 R8=0 R9=0 R10=fp0 fp-8=mmmm????
      21: (77) r6 >>= 10                    ; R6_w=0
      22: (27) r6 *= 8192                   ; R6_w=0
      23: (bf) r1 = r0                      ; R0=map_value(off=0,ks=4,vs=48,imm=0) R1_w=map_value(off=0,ks=4,vs=48,imm=0)
      24: (0f) r0 += r6
      last_idx 24 first_idx 19
      regs=40 stack=0 before 23: (bf) r1 = r0
      regs=40 stack=0 before 22: (27) r6 *= 8192
      regs=40 stack=0 before 21: (77) r6 >>= 10
      regs=40 stack=0 before 19: (55) if r0 != 0x0 goto pc+1
      parent didn't have regs=40 stack=0 marks: R0_rw=map_value_or_null(id=1,off=0,ks=4,vs=48,imm=0) R6_rw=P0 R7=0 R8=0 R9=0 R10=fp0 fp-8=mmmm????
      last_idx 18 first_idx 9
      regs=40 stack=0 before 18: (85) call bpf_map_lookup_elem#1
      regs=40 stack=0 before 17: (07) r2 += -4
      regs=40 stack=0 before 16: (bf) r2 = r10
      regs=40 stack=0 before 15: (bf) r1 = r4
      regs=40 stack=0 before 13: (18) r4 = 0xffff8ad3886c2a00
      regs=40 stack=0 before 12: (63) *(u32 *)(r10 -4) = r0
      regs=40 stack=0 before 11: (b7) r0 = 0
      regs=40 stack=0 before 10: (b7) r6 = 0
      25: (79) r3 = *(u64 *)(r0 +0)         ; R0_w=map_value(off=0,ks=4,vs=48,imm=0) R3_w=scalar()
      26: (7b) *(u64 *)(r1 +0) = r3         ; R1_w=map_value(off=0,ks=4,vs=48,imm=0) R3_w=scalar()
      27: (95) exit
    
      from 9 to 11: R1=ctx(off=0,imm=0) R6=0 R7=0 R8=0 R9=0 R10=fp0
      11: (b7) r0 = 0                       ; R0_w=0
      12: (63) *(u32 *)(r10 -4) = r0
      last_idx 12 first_idx 11
      regs=1 stack=0 before 11: (b7) r0 = 0
      13: R0_w=0 R10=fp0 fp-8=0000????
      13: (18) r4 = 0xffff8ad3886c2a00      ; R4_w=map_ptr(off=0,ks=4,vs=48,imm=0)
      15: (bf) r1 = r4                      ; R1_w=map_ptr(off=0,ks=4,vs=48,imm=0) R4_w=map_ptr(off=0,ks=4,vs=48,imm=0)
      16: (bf) r2 = r10                     ; R2_w=fp0 R10=fp0
      17: (07) r2 += -4                     ; R2_w=fp-4
      18: (85) call bpf_map_lookup_elem#1
      frame 0: propagating r6
      last_idx 19 first_idx 11
      regs=40 stack=0 before 18: (85) call bpf_map_lookup_elem#1
      regs=40 stack=0 before 17: (07) r2 += -4
      regs=40 stack=0 before 16: (bf) r2 = r10
      regs=40 stack=0 before 15: (bf) r1 = r4
      regs=40 stack=0 before 13: (18) r4 = 0xffff8ad3886c2a00
      regs=40 stack=0 before 12: (63) *(u32 *)(r10 -4) = r0
      regs=40 stack=0 before 11: (b7) r0 = 0
      parent didn't have regs=40 stack=0 marks: R1=ctx(off=0,imm=0) R6_r=P0 R7=0 R8=0 R9=0 R10=fp0
      last_idx 9 first_idx 9
      regs=40 stack=0 before 9: (bd) if r6 <= r9 goto pc+1
      parent didn't have regs=40 stack=0 marks: R1=ctx(off=0,imm=0) R6_rw=Pscalar() R7_w=0 R8_w=0 R9_rw=0 R10=fp0
      last_idx 8 first_idx 0
      regs=40 stack=0 before 8: (b7) r9 = 0
      regs=40 stack=0 before 7: (97) r6 %= 1
      regs=40 stack=0 before 6: (bd) if r6 <= r9 goto pc+2
      regs=40 stack=0 before 5: (05) goto pc+0
      regs=40 stack=0 before 4: (97) r6 %= 1025
      regs=40 stack=0 before 3: (b7) r9 = -2147483648
      regs=40 stack=0 before 2: (b7) r8 = 0
      regs=40 stack=0 before 1: (b7) r7 = 0
      regs=40 stack=0 before 0: (b7) r6 = 1024
      19: safe
      frame 0: propagating r6
      last_idx 9 first_idx 0
      regs=40 stack=0 before 6: (bd) if r6 <= r9 goto pc+2
      regs=40 stack=0 before 5: (05) goto pc+0
      regs=40 stack=0 before 4: (97) r6 %= 1025
      regs=40 stack=0 before 3: (b7) r9 = -2147483648
      regs=40 stack=0 before 2: (b7) r8 = 0
      regs=40 stack=0 before 1: (b7) r7 = 0
      regs=40 stack=0 before 0: (b7) r6 = 1024
    
      from 6 to 9: safe
      verification time 110 usec
      stack depth 4
      processed 36 insns (limit 1000000) max_states_per_insn 0 total_states 3 peak_states 3 mark_read 2
    
    The verifier considers this program as safe by mistakenly pruning unsafe
    code paths. In the above func#0, code lines 0-10 are of interest. In line
    0-3 registers r6 to r9 are initialized with known scalar values. In line 4
    the register r6 is reset to an unknown scalar given the verifier does not
    track modulo operations. Due to this, the verifier can also not determine
    precisely which branches in line 6 and 9 are taken, therefore it needs to
    explore them both.
    
    As can be seen, the verifier starts with exploring the false/fall-through
    paths first. The 'from 19 to 21' path has both r6=0 and r9=0 and the pointer
    arithmetic on r0 += r6 is therefore considered safe. Given the arithmetic,
    r6 is correctly marked for precision tracking where backtracking kicks in
    where it walks back the current path all the way where r6 was set to 0 in
    the fall-through branch.
    
    Next, the pruning logics pops the path 'from 9 to 11' from the stack. Also
    here, the state of the registers is the same, that is, r6=0 and r9=0, so
    that at line 19 the path can be pruned as it is considered safe. It is
    interesting to note that the conditional in line 9 turned r6 into a more
    precise state, that is, in the fall-through path at the beginning of line
    10, it is R6=scalar(umin=1), and in the branch-taken path (which is analyzed
    here) at the beginning of line 11, r6 turned into a known const r6=0 as
    r9=0 prior to that and therefore (unsigned) r6 <= 0 concludes that r6 must
    be 0 (**):
    
      [...]                                 ; R6_w=scalar()
      9: (bd) if r6 <= r9 goto pc+1         ; R6=scalar(umin=1) R9=0
      [...]
    
      from 9 to 11: R1=ctx(off=0,imm=0) R6=0 R7=0 R8=0 R9=0 R10=fp0
      [...]
    
    The next path is 'from 6 to 9'. The verifier considers the old and current
    state equivalent, and therefore prunes the search incorrectly. Looking into
    the two states which are being compared by the pruning logic at line 9, the
    old state consists of R6_rwD=Pscalar() R9_rwD=0 R10=fp0 and the new state
    consists of R1=ctx(off=0,imm=0) R6_w=scalar(umax=18446744071562067968)
    R7_w=0 R8_w=0 R9_w=-2147483648 R10=fp0. While r6 had the reg->precise flag
    correctly set in the old state, r9 did not. Both r6'es are considered as
    equivalent given the old one is a superset of the current, more precise one,
    however, r9's actual values (0 vs 0x80000000) mismatch. Given the old r9
    did not have reg->precise flag set, the verifier does not consider the
    register as contributing to the precision state of r6, and therefore it
    considered both r9 states as equivalent. However, for this specific pruned
    path (which is also the actual path taken at runtime), register r6 will be
    0x400 and r9 0x80000000 when reaching line 21, thus oob-accessing the map.
    
    The purpose of precision tracking is to initially mark registers (including
    spilled ones) as imprecise to help verifier's pruning logic finding equivalent
    states it can then prune if they don't contribute to the program's safety
    aspects. For example, if registers are used for pointer arithmetic or to pass
    constant length to a helper, then the verifier sets reg->precise flag and
    backtracks the BPF program instruction sequence and chain of verifier states
    to ensure that the given register or stack slot including their dependencies
    are marked as precisely tracked scalar. This also includes any other registers
    and slots that contribute to a tracked state of given registers/stack slot.
    This backtracking relies on recorded jmp_history and is able to traverse
    entire chain of parent states. This process ends only when all the necessary
    registers/slots and their transitive dependencies are marked as precise.
    
    The backtrack_insn() is called from the current instruction up to the first
    instruction, and its purpose is to compute a bitmask of registers and stack
    slots that need precision tracking in the parent's verifier state. For example,
    if a current instruction is r6 = r7, then r6 needs precision after this
    instruction and r7 needs precision before this instruction, that is, in the
    parent state. Hence for the latter r7 is marked and r6 unmarked.
    
    For the class of jmp/jmp32 instructions, backtrack_insn() today only looks
    at call and exit instructions and for all other conditionals the masks
    remain as-is. However, in the given situation register r6 has a dependency
    on r9 (as described above in **), so also that one needs to be marked for
    precision tracking. In other words, if an imprecise register influences a
    precise one, then the imprecise register should also be marked precise.
    Meaning, in the parent state both dest and src register need to be tracked
    for precision and therefore the marking must be more conservative by setting
    reg->precise flag for both. The precision propagation needs to cover both
    for the conditional: if the src reg was marked but not the dst reg and vice
    versa.
    
    After the fix the program is correctly rejected:
    
      func#0 @0
      0: R1=ctx(off=0,imm=0) R10=fp0
      0: (b7) r6 = 1024                     ; R6_w=1024
      1: (b7) r7 = 0                        ; R7_w=0
      2: (b7) r8 = 0                        ; R8_w=0
      3: (b7) r9 = -2147483648              ; R9_w=-2147483648
      4: (97) r6 %= 1025                    ; R6_w=scalar()
      5: (05) goto pc+0
      6: (bd) if r6 <= r9 goto pc+2         ; R6_w=scalar(umin=18446744071562067969,var_off=(0xffffffff80000000; 0x7fffffff),u32_min=-2147483648) R9_w=-2147483648
      7: (97) r6 %= 1                       ; R6_w=scalar()
      8: (b7) r9 = 0                        ; R9=0
      9: (bd) if r6 <= r9 goto pc+1         ; R6=scalar(umin=1) R9=0
      10: (b7) r6 = 0                       ; R6_w=0
      11: (b7) r0 = 0                       ; R0_w=0
      12: (63) *(u32 *)(r10 -4) = r0
      last_idx 12 first_idx 9
      regs=1 stack=0 before 11: (b7) r0 = 0
      13: R0_w=0 R10=fp0 fp-8=0000????
      13: (18) r4 = 0xffff9290dc5bfe00      ; R4_w=map_ptr(off=0,ks=4,vs=48,imm=0)
      15: (bf) r1 = r4                      ; R1_w=map_ptr(off=0,ks=4,vs=48,imm=0) R4_w=map_ptr(off=0,ks=4,vs=48,imm=0)
      16: (bf) r2 = r10                     ; R2_w=fp0 R10=fp0
      17: (07) r2 += -4                     ; R2_w=fp-4
      18: (85) call bpf_map_lookup_elem#1   ; R0=map_value_or_null(id=1,off=0,ks=4,vs=48,imm=0)
      19: (55) if r0 != 0x0 goto pc+1       ; R0=0
      20: (95) exit
    
      from 19 to 21: R0=map_value(off=0,ks=4,vs=48,imm=0) R6=0 R7=0 R8=0 R9=0 R10=fp0 fp-8=mmmm????
      21: (77) r6 >>= 10                    ; R6_w=0
      22: (27) r6 *= 8192                   ; R6_w=0
      23: (bf) r1 = r0                      ; R0=map_value(off=0,ks=4,vs=48,imm=0) R1_w=map_value(off=0,ks=4,vs=48,imm=0)
      24: (0f) r0 += r6
      last_idx 24 first_idx 19
      regs=40 stack=0 before 23: (bf) r1 = r0
      regs=40 stack=0 before 22: (27) r6 *= 8192
      regs=40 stack=0 before 21: (77) r6 >>= 10
      regs=40 stack=0 before 19: (55) if r0 != 0x0 goto pc+1
      parent didn't have regs=40 stack=0 marks: R0_rw=map_value_or_null(id=1,off=0,ks=4,vs=48,imm=0) R6_rw=P0 R7=0 R8=0 R9=0 R10=fp0 fp-8=mmmm????
      last_idx 18 first_idx 9
      regs=40 stack=0 before 18: (85) call bpf_map_lookup_elem#1
      regs=40 stack=0 before 17: (07) r2 += -4
      regs=40 stack=0 before 16: (bf) r2 = r10
      regs=40 stack=0 before 15: (bf) r1 = r4
      regs=40 stack=0 before 13: (18) r4 = 0xffff9290dc5bfe00
      regs=40 stack=0 before 12: (63) *(u32 *)(r10 -4) = r0
      regs=40 stack=0 before 11: (b7) r0 = 0
      regs=40 stack=0 before 10: (b7) r6 = 0
      25: (79) r3 = *(u64 *)(r0 +0)         ; R0_w=map_value(off=0,ks=4,vs=48,imm=0) R3_w=scalar()
      26: (7b) *(u64 *)(r1 +0) = r3         ; R1_w=map_value(off=0,ks=4,vs=48,imm=0) R3_w=scalar()
      27: (95) exit
    
      from 9 to 11: R1=ctx(off=0,imm=0) R6=0 R7=0 R8=0 R9=0 R10=fp0
      11: (b7) r0 = 0                       ; R0_w=0
      12: (63) *(u32 *)(r10 -4) = r0
      last_idx 12 first_idx 11
      regs=1 stack=0 before 11: (b7) r0 = 0
      13: R0_w=0 R10=fp0 fp-8=0000????
      13: (18) r4 = 0xffff9290dc5bfe00      ; R4_w=map_ptr(off=0,ks=4,vs=48,imm=0)
      15: (bf) r1 = r4                      ; R1_w=map_ptr(off=0,ks=4,vs=48,imm=0) R4_w=map_ptr(off=0,ks=4,vs=48,imm=0)
      16: (bf) r2 = r10                     ; R2_w=fp0 R10=fp0
      17: (07) r2 += -4                     ; R2_w=fp-4
      18: (85) call bpf_map_lookup_elem#1
      frame 0: propagating r6
      last_idx 19 first_idx 11
      regs=40 stack=0 before 18: (85) call bpf_map_lookup_elem#1
      regs=40 stack=0 before 17: (07) r2 += -4
      regs=40 stack=0 before 16: (bf) r2 = r10
      regs=40 stack=0 before 15: (bf) r1 = r4
      regs=40 stack=0 before 13: (18) r4 = 0xffff9290dc5bfe00
      regs=40 stack=0 before 12: (63) *(u32 *)(r10 -4) = r0
      regs=40 stack=0 before 11: (b7) r0 = 0
      parent didn't have regs=40 stack=0 marks: R1=ctx(off=0,imm=0) R6_r=P0 R7=0 R8=0 R9=0 R10=fp0
      last_idx 9 first_idx 9
      regs=40 stack=0 before 9: (bd) if r6 <= r9 goto pc+1
      parent didn't have regs=240 stack=0 marks: R1=ctx(off=0,imm=0) R6_rw=Pscalar() R7_w=0 R8_w=0 R9_rw=P0 R10=fp0
      last_idx 8 first_idx 0
      regs=240 stack=0 before 8: (b7) r9 = 0
      regs=40 stack=0 before 7: (97) r6 %= 1
      regs=40 stack=0 before 6: (bd) if r6 <= r9 goto pc+2
      regs=240 stack=0 before 5: (05) goto pc+0
      regs=240 stack=0 before 4: (97) r6 %= 1025
      regs=240 stack=0 before 3: (b7) r9 = -2147483648
      regs=40 stack=0 before 2: (b7) r8 = 0
      regs=40 stack=0 before 1: (b7) r7 = 0
      regs=40 stack=0 before 0: (b7) r6 = 1024
      19: safe
    
      from 6 to 9: R1=ctx(off=0,imm=0) R6_w=scalar(umax=18446744071562067968) R7_w=0 R8_w=0 R9_w=-2147483648 R10=fp0
      9: (bd) if r6 <= r9 goto pc+1
      last_idx 9 first_idx 0
      regs=40 stack=0 before 6: (bd) if r6 <= r9 goto pc+2
      regs=240 stack=0 before 5: (05) goto pc+0
      regs=240 stack=0 before 4: (97) r6 %= 1025
      regs=240 stack=0 before 3: (b7) r9 = -2147483648
      regs=40 stack=0 before 2: (b7) r8 = 0
      regs=40 stack=0 before 1: (b7) r7 = 0
      regs=40 stack=0 before 0: (b7) r6 = 1024
      last_idx 9 first_idx 0
      regs=200 stack=0 before 6: (bd) if r6 <= r9 goto pc+2
      regs=240 stack=0 before 5: (05) goto pc+0
      regs=240 stack=0 before 4: (97) r6 %= 1025
      regs=240 stack=0 before 3: (b7) r9 = -2147483648
      regs=40 stack=0 before 2: (b7) r8 = 0
      regs=40 stack=0 before 1: (b7) r7 = 0
      regs=40 stack=0 before 0: (b7) r6 = 1024
      11: R6=scalar(umax=18446744071562067968) R9=-2147483648
      11: (b7) r0 = 0                       ; R0_w=0
      12: (63) *(u32 *)(r10 -4) = r0
      last_idx 12 first_idx 11
      regs=1 stack=0 before 11: (b7) r0 = 0
      13: R0_w=0 R10=fp0 fp-8=0000????
      13: (18) r4 = 0xffff9290dc5bfe00      ; R4_w=map_ptr(off=0,ks=4,vs=48,imm=0)
      15: (bf) r1 = r4                      ; R1_w=map_ptr(off=0,ks=4,vs=48,imm=0) R4_w=map_ptr(off=0,ks=4,vs=48,imm=0)
      16: (bf) r2 = r10                     ; R2_w=fp0 R10=fp0
      17: (07) r2 += -4                     ; R2_w=fp-4
      18: (85) call bpf_map_lookup_elem#1   ; R0_w=map_value_or_null(id=3,off=0,ks=4,vs=48,imm=0)
      19: (55) if r0 != 0x0 goto pc+1       ; R0_w=0
      20: (95) exit
    
      from 19 to 21: R0=map_value(off=0,ks=4,vs=48,imm=0) R6=scalar(umax=18446744071562067968) R7=0 R8=0 R9=-2147483648 R10=fp0 fp-8=mmmm????
      21: (77) r6 >>= 10                    ; R6_w=scalar(umax=18014398507384832,var_off=(0x0; 0x3fffffffffffff))
      22: (27) r6 *= 8192                   ; R6_w=scalar(smax=9223372036854767616,umax=18446744073709543424,var_off=(0x0; 0xffffffffffffe000),s32_max=2147475456,u32_max=-8192)
      23: (bf) r1 = r0                      ; R0=map_value(off=0,ks=4,vs=48,imm=0) R1_w=map_value(off=0,ks=4,vs=48,imm=0)
      24: (0f) r0 += r6
      last_idx 24 first_idx 21
      regs=40 stack=0 before 23: (bf) r1 = r0
      regs=40 stack=0 before 22: (27) r6 *= 8192
      regs=40 stack=0 before 21: (77) r6 >>= 10
      parent didn't have regs=40 stack=0 marks: R0_rw=map_value(off=0,ks=4,vs=48,imm=0) R6_r=Pscalar(umax=18446744071562067968) R7=0 R8=0 R9=-2147483648 R10=fp0 fp-8=mmmm????
      last_idx 19 first_idx 11
      regs=40 stack=0 before 19: (55) if r0 != 0x0 goto pc+1
      regs=40 stack=0 before 18: (85) call bpf_map_lookup_elem#1
      regs=40 stack=0 before 17: (07) r2 += -4
      regs=40 stack=0 before 16: (bf) r2 = r10
      regs=40 stack=0 before 15: (bf) r1 = r4
      regs=40 stack=0 before 13: (18) r4 = 0xffff9290dc5bfe00
      regs=40 stack=0 before 12: (63) *(u32 *)(r10 -4) = r0
      regs=40 stack=0 before 11: (b7) r0 = 0
      parent didn't have regs=40 stack=0 marks: R1=ctx(off=0,imm=0) R6_rw=Pscalar(umax=18446744071562067968) R7_w=0 R8_w=0 R9_w=-2147483648 R10=fp0
      last_idx 9 first_idx 0
      regs=40 stack=0 before 9: (bd) if r6 <= r9 goto pc+1
      regs=240 stack=0 before 6: (bd) if r6 <= r9 goto pc+2
      regs=240 stack=0 before 5: (05) goto pc+0
      regs=240 stack=0 before 4: (97) r6 %= 1025
      regs=240 stack=0 before 3: (b7) r9 = -2147483648
      regs=40 stack=0 before 2: (b7) r8 = 0
      regs=40 stack=0 before 1: (b7) r7 = 0
      regs=40 stack=0 before 0: (b7) r6 = 1024
      math between map_value pointer and register with unbounded min value is not allowed
      verification time 886 usec
      stack depth 4
      processed 49 insns (limit 1000000) max_states_per_insn 1 total_states 5 peak_states 5 mark_read 2
    
    Fixes: b5dc0163d8fd ("bpf: precise scalar_value tracking")
    Reported-by: Juan Jose Lopez Jaimez <jjlopezjaimez@google.com>
    Reported-by: Meador Inge <meadori@google.com>
    Reported-by: Simon Scannell <simonscannell@google.com>
    Reported-by: Nenad Stojanovski <thenenadx@google.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Co-developed-by: Andrii Nakryiko <andrii@kernel.org>
    Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
    Reviewed-by: John Fastabend <john.fastabend@gmail.com>
    Reviewed-by: Juan Jose Lopez Jaimez <jjlopezjaimez@google.com>
    Reviewed-by: Meador Inge <meadori@google.com>
    Reviewed-by: Simon Scannell <simonscannell@google.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b085b5787b4a83755e7bf485d44c00217f04ba44
Author: Ido Schimmel <idosch@nvidia.com>
Date:   Mon Apr 17 18:52:51 2023 +0200

    mlxsw: pci: Fix possible crash during initialization
    
    [ Upstream commit 1f64757ee2bb22a93ec89b4c71707297e8cca0ba ]
    
    During initialization the driver issues a reset command via its command
    interface in order to remove previous configuration from the device.
    
    After issuing the reset, the driver waits for 200ms before polling on
    the "system_status" register using memory-mapped IO until the device
    reaches a ready state (0x5E). The wait is necessary because the reset
    command only triggers the reset, but the reset itself happens
    asynchronously. If the driver starts polling too soon, the read of the
    "system_status" register will never return and the system will crash
    [1].
    
    The issue was discovered when the device was flashed with a development
    firmware version where the reset routine took longer to complete. The
    issue was fixed in the firmware, but it exposed the fact that the
    current wait time is borderline.
    
    Fix by increasing the wait time from 200ms to 400ms. With this patch and
    the buggy firmware version, the issue did not reproduce in 10 reboots
    whereas without the patch the issue is reproduced quite consistently.
    
    [1]
    mce: CPUs not responding to MCE broadcast (may include false positives): 0,4
    mce: CPUs not responding to MCE broadcast (may include false positives): 0,4
    Kernel panic - not syncing: Timeout: Not all CPUs entered broadcast exception handler
    Shutting down cpus with NMI
    Kernel Offset: 0x12000000 from 0xffffffff81000000 (relocation range: 0xffffffff80000000-0xffffffffbfffffff)
    
    Fixes: ac004e84164e ("mlxsw: pci: Wait longer before accessing the device after reset")
    Signed-off-by: Ido Schimmel <idosch@nvidia.com>
    Reviewed-by: Petr Machata <petrm@nvidia.com>
    Signed-off-by: Petr Machata <petrm@nvidia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c972851d3848647f57cd8d5625c48663410c3f96
Author: Alexander Aring <aahringo@redhat.com>
Date:   Mon Apr 17 09:00:52 2023 -0400

    net: rpl: fix rpl header size calculation
    
    [ Upstream commit 4e006c7a6dac0ead4c1bf606000aa90a372fc253 ]
    
    This patch fixes a missing 8 byte for the header size calculation. The
    ipv6_rpl_srh_size() is used to check a skb_pull() on skb->data which
    points to skb_transport_header(). Currently we only check on the
    calculated addresses fields using CmprI and CmprE fields, see:
    
    https://www.rfc-editor.org/rfc/rfc6554#section-3
    
    there is however a missing 8 byte inside the calculation which stands
    for the fields before the addresses field. Those 8 bytes are represented
    by sizeof(struct ipv6_rpl_sr_hdr) expression.
    
    Fixes: 8610c7c6e3bd ("net: ipv6: add support for rpl sr exthdr")
    Signed-off-by: Alexander Aring <aahringo@redhat.com>
    Reported-by: maxpl0it <maxpl0it@protonmail.com>
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b6b06c5ee333ff9ccaf4c54005263daba5673b2f
Author: Nikita Zhandarovich <n.zhandarovich@fintech.ru>
Date:   Mon Apr 17 05:07:18 2023 -0700

    mlxfw: fix null-ptr-deref in mlxfw_mfa2_tlv_next()
    
    [ Upstream commit c0e73276f0fcbbd3d4736ba975d7dc7a48791b0c ]
    
    Function mlxfw_mfa2_tlv_multi_get() returns NULL if 'tlv' in
    question does not pass checks in mlxfw_mfa2_tlv_payload_get(). This
    behaviour may lead to NULL pointer dereference in 'multi->total_len'.
    Fix this issue by testing mlxfw_mfa2_tlv_multi_get()'s return value
    against NULL.
    
    Found by Linux Verification Center (linuxtesting.org) with static
    analysis tool SVACE.
    
    Fixes: 410ed13cae39 ("Add the mlxfw module for Mellanox firmware flash process")
    Co-developed-by: Natalia Petrova <n.petrova@fintech.ru>
    Signed-off-by: Nikita Zhandarovich <n.zhandarovich@fintech.ru>
    Reviewed-by: Ido Schimmel <idosch@nvidia.com>
    Link: https://lore.kernel.org/r/20230417120718.52325-1-n.zhandarovich@fintech.ru
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 880c09bc2f0b6d0f3f3d995508a1c06177eb7d73
Author: Aleksandr Loktionov <aleksandr.loktionov@intel.com>
Date:   Mon Apr 3 07:13:18 2023 +0200

    i40e: fix i40e_setup_misc_vector() error handling
    
    [ Upstream commit c86c00c6935505929cc9adb29ddb85e48c71f828 ]
    
    Add error handling of i40e_setup_misc_vector() in i40e_rebuild().
    In case interrupt vectors setup fails do not re-open vsi-s and
    do not bring up vf-s, we have no interrupts to serve a traffic
    anyway.
    
    Fixes: 41c445ff0f48 ("i40e: main driver core")
    Signed-off-by: Aleksandr Loktionov <aleksandr.loktionov@intel.com>
    Tested-by: Pucha Himasekhar Reddy <himasekharx.reddy.pucha@intel.com> (A Contingent worker at Intel)
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 72df55d3dc96aa5784254e2d86c0802ebe09cf5d
Author: Aleksandr Loktionov <aleksandr.loktionov@intel.com>
Date:   Fri Mar 24 18:16:38 2023 +0100

    i40e: fix accessing vsi->active_filters without holding lock
    
    [ Upstream commit 8485d093b076e59baff424552e8aecfc5bd2d261 ]
    
    Fix accessing vsi->active_filters without holding the mac_filter_hash_lock.
    Move vsi->active_filters = 0 inside critical section and
    move clear_bit(__I40E_VSI_OVERFLOW_PROMISC, vsi->state) after the critical
    section to ensure the new filters from other threads can be added only after
    filters cleaning in the critical section is finished.
    
    Fixes: 278e7d0b9d68 ("i40e: store MAC/VLAN filters in a hash with the MAC Address as key")
    Signed-off-by: Aleksandr Loktionov <aleksandr.loktionov@intel.com>
    Tested-by: Pucha Himasekhar Reddy <himasekharx.reddy.pucha@intel.com> (A Contingent worker at Intel)
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 381110d061926f738d3220feb5580f1f1409cbd7
Author: Florian Westphal <fw@strlen.de>
Date:   Mon Apr 17 10:21:36 2023 +0200

    netfilter: nf_tables: fix ifdef to also consider nf_tables=m
    
    [ Upstream commit c55c0e91c813589dc55bea6bf9a9fbfaa10ae41d ]
    
    nftables can be built as a module, so fix the preprocessor conditional
    accordingly.
    
    Fixes: 478b360a47b7 ("netfilter: nf_tables: fix nf_trace always-on with XT_TRACE=n")
    Reported-by: Florian Fainelli <f.fainelli@gmail.com>
    Reported-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6758a51ef36ac78962db2f421a8e4d85fd23853a
Author: Ding Hui <dinghui@sangfor.com.cn>
Date:   Fri Apr 14 23:23:06 2023 +0800

    sfc: Fix use-after-free due to selftest_work
    
    [ Upstream commit a80bb8e7233b2ad6ff119646b6e33fb3edcec37b ]
    
    There is a use-after-free scenario that is:
    
    When the NIC is down, user set mac address or vlan tag to VF,
    the xxx_set_vf_mac() or xxx_set_vf_vlan() will invoke efx_net_stop()
    and efx_net_open(), since netif_running() is false, the port will not
    start and keep port_enabled false, but selftest_work is scheduled
    in efx_net_open().
    
    If we remove the device before selftest_work run, the efx_stop_port()
    will not be called since the NIC is down, and then efx is freed,
    we will soon get a UAF in run_timer_softirq() like this:
    
    [ 1178.907941] ==================================================================
    [ 1178.907948] BUG: KASAN: use-after-free in run_timer_softirq+0xdea/0xe90
    [ 1178.907950] Write of size 8 at addr ff11001f449cdc80 by task swapper/47/0
    [ 1178.907950]
    [ 1178.907953] CPU: 47 PID: 0 Comm: swapper/47 Kdump: loaded Tainted: G           O     --------- -t - 4.18.0 #1
    [ 1178.907954] Hardware name: SANGFOR X620G40/WI2HG-208T1061A, BIOS SPYH051032-U01 04/01/2022
    [ 1178.907955] Call Trace:
    [ 1178.907956]  <IRQ>
    [ 1178.907960]  dump_stack+0x71/0xab
    [ 1178.907963]  print_address_description+0x6b/0x290
    [ 1178.907965]  ? run_timer_softirq+0xdea/0xe90
    [ 1178.907967]  kasan_report+0x14a/0x2b0
    [ 1178.907968]  run_timer_softirq+0xdea/0xe90
    [ 1178.907971]  ? init_timer_key+0x170/0x170
    [ 1178.907973]  ? hrtimer_cancel+0x20/0x20
    [ 1178.907976]  ? sched_clock+0x5/0x10
    [ 1178.907978]  ? sched_clock_cpu+0x18/0x170
    [ 1178.907981]  __do_softirq+0x1c8/0x5fa
    [ 1178.907985]  irq_exit+0x213/0x240
    [ 1178.907987]  smp_apic_timer_interrupt+0xd0/0x330
    [ 1178.907989]  apic_timer_interrupt+0xf/0x20
    [ 1178.907990]  </IRQ>
    [ 1178.907991] RIP: 0010:mwait_idle+0xae/0x370
    
    If the NIC is not actually brought up, there is no need to schedule
    selftest_work, so let's move invoking efx_selftest_async_start()
    into efx_start_all(), and it will be canceled by broughting down.
    
    Fixes: dd40781e3a4e ("sfc: Run event/IRQ self-test asynchronously when interface is brought up")
    Fixes: e340be923012 ("sfc: add ndo_set_vf_mac() function for EF10")
    Debugged-by: Huang Cun <huangcun@sangfor.com.cn>
    Cc: Donglin Peng <pengdonglin@sangfor.com.cn>
    Suggested-by: Martin Habets <habetsm.xilinx@gmail.com>
    Signed-off-by: Ding Hui <dinghui@sangfor.com.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 06a72bbf0d9834fde7e12b2039fbc929fc8eb220
Author: Jonathan Cooper <jonathan.s.cooper@amd.com>
Date:   Tue Jun 28 14:58:55 2022 +0100

    sfc: Split STATE_READY in to STATE_NET_DOWN and STATE_NET_UP.
    
    [ Upstream commit 813cf9d1e753e1e0a247d3d685212a06141b483e ]
    
    This patch splits the READY state in to NET_UP and NET_DOWN. This
    is to prepare for future work to delay resource allocation until
    interface up so that we can use resources more efficiently in
    SRIOV environments, and also to lay the ground work for an extra
    PROBED state where we don't create a network interface,
    for VDPA operation.
    
    Signed-off-by: Jonathan Cooper <jonathan.s.cooper@amd.com>
    Acked-by: Martin Habets <habetsm.xilinx@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Stable-dep-of: a80bb8e7233b ("sfc: Fix use-after-free due to selftest_work")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b6dd232f6350778a6ba440ea52bdfc4571b62a06
Author: Xuan Zhuo <xuanzhuo@linux.alibaba.com>
Date:   Fri Apr 14 14:08:35 2023 +0800

    virtio_net: bugfix overflow inside xdp_linearize_page()
    
    [ Upstream commit 853618d5886bf94812f31228091cd37d308230f7 ]
    
    Here we copy the data from the original buf to the new page. But we
    not check that it may be overflow.
    
    As long as the size received(including vnethdr) is greater than 3840
    (PAGE_SIZE -VIRTIO_XDP_HEADROOM). Then the memcpy will overflow.
    
    And this is completely possible, as long as the MTU is large, such
    as 4096. In our test environment, this will cause crash. Since crash is
    caused by the written memory, it is meaningless, so I do not include it.
    
    Fixes: 72979a6c3590 ("virtio_net: xdp, add slowpath case for non contiguous buffers")
    Signed-off-by: Xuan Zhuo <xuanzhuo@linux.alibaba.com>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Acked-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ddcf35deb8f2a1d9addc74b586cf4c5a1f5d6020
Author: Gwangun Jung <exsociety@gmail.com>
Date:   Thu Apr 13 19:35:54 2023 +0900

    net: sched: sch_qfq: prevent slab-out-of-bounds in qfq_activate_agg
    
    [ Upstream commit 3037933448f60f9acb705997eae62013ecb81e0d ]
    
    If the TCA_QFQ_LMAX value is not offered through nlattr, lmax is determined by the MTU value of the network device.
    The MTU of the loopback device can be set up to 2^31-1.
    As a result, it is possible to have an lmax value that exceeds QFQ_MIN_LMAX.
    
    Due to the invalid lmax value, an index is generated that exceeds the QFQ_MAX_INDEX(=24) value, causing out-of-bounds read/write errors.
    
    The following reports a oob access:
    
    [   84.582666] BUG: KASAN: slab-out-of-bounds in qfq_activate_agg.constprop.0 (net/sched/sch_qfq.c:1027 net/sched/sch_qfq.c:1060 net/sched/sch_qfq.c:1313)
    [   84.583267] Read of size 4 at addr ffff88810f676948 by task ping/301
    [   84.583686]
    [   84.583797] CPU: 3 PID: 301 Comm: ping Not tainted 6.3.0-rc5 #1
    [   84.584164] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.15.0-1 04/01/2014
    [   84.584644] Call Trace:
    [   84.584787]  <TASK>
    [   84.584906] dump_stack_lvl (lib/dump_stack.c:107 (discriminator 1))
    [   84.585108] print_report (mm/kasan/report.c:320 mm/kasan/report.c:430)
    [   84.585570] kasan_report (mm/kasan/report.c:538)
    [   84.585988] qfq_activate_agg.constprop.0 (net/sched/sch_qfq.c:1027 net/sched/sch_qfq.c:1060 net/sched/sch_qfq.c:1313)
    [   84.586599] qfq_enqueue (net/sched/sch_qfq.c:1255)
    [   84.587607] dev_qdisc_enqueue (net/core/dev.c:3776)
    [   84.587749] __dev_queue_xmit (./include/net/sch_generic.h:186 net/core/dev.c:3865 net/core/dev.c:4212)
    [   84.588763] ip_finish_output2 (./include/net/neighbour.h:546 net/ipv4/ip_output.c:228)
    [   84.589460] ip_output (net/ipv4/ip_output.c:430)
    [   84.590132] ip_push_pending_frames (./include/net/dst.h:444 net/ipv4/ip_output.c:126 net/ipv4/ip_output.c:1586 net/ipv4/ip_output.c:1606)
    [   84.590285] raw_sendmsg (net/ipv4/raw.c:649)
    [   84.591960] sock_sendmsg (net/socket.c:724 net/socket.c:747)
    [   84.592084] __sys_sendto (net/socket.c:2142)
    [   84.593306] __x64_sys_sendto (net/socket.c:2150)
    [   84.593779] do_syscall_64 (arch/x86/entry/common.c:50 arch/x86/entry/common.c:80)
    [   84.593902] entry_SYSCALL_64_after_hwframe (arch/x86/entry/entry_64.S:120)
    [   84.594070] RIP: 0033:0x7fe568032066
    [   84.594192] Code: 0e 0d 00 f7 d8 64 89 02 48 c7 c0 ff ff ff ff eb b8 0f 1f 00 41 89 ca 64 8b 04 25 18 00 00 00 85 c09[ 84.594796] RSP: 002b:00007ffce388b4e8 EFLAGS: 00000246 ORIG_RAX: 000000000000002c
    
    Code starting with the faulting instruction
    ===========================================
    [   84.595047] RAX: ffffffffffffffda RBX: 00007ffce388cc70 RCX: 00007fe568032066
    [   84.595281] RDX: 0000000000000040 RSI: 00005605fdad6d10 RDI: 0000000000000003
    [   84.595515] RBP: 00005605fdad6d10 R08: 00007ffce388eeec R09: 0000000000000010
    [   84.595749] R10: 0000000000000000 R11: 0000000000000246 R12: 0000000000000040
    [   84.595984] R13: 00007ffce388cc30 R14: 00007ffce388b4f0 R15: 0000001d00000001
    [   84.596218]  </TASK>
    [   84.596295]
    [   84.596351] Allocated by task 291:
    [   84.596467] kasan_save_stack (mm/kasan/common.c:46)
    [   84.596597] kasan_set_track (mm/kasan/common.c:52)
    [   84.596725] __kasan_kmalloc (mm/kasan/common.c:384)
    [   84.596852] __kmalloc_node (./include/linux/kasan.h:196 mm/slab_common.c:967 mm/slab_common.c:974)
    [   84.596979] qdisc_alloc (./include/linux/slab.h:610 ./include/linux/slab.h:731 net/sched/sch_generic.c:938)
    [   84.597100] qdisc_create (net/sched/sch_api.c:1244)
    [   84.597222] tc_modify_qdisc (net/sched/sch_api.c:1680)
    [   84.597357] rtnetlink_rcv_msg (net/core/rtnetlink.c:6174)
    [   84.597495] netlink_rcv_skb (net/netlink/af_netlink.c:2574)
    [   84.597627] netlink_unicast (net/netlink/af_netlink.c:1340 net/netlink/af_netlink.c:1365)
    [   84.597759] netlink_sendmsg (net/netlink/af_netlink.c:1942)
    [   84.597891] sock_sendmsg (net/socket.c:724 net/socket.c:747)
    [   84.598016] ____sys_sendmsg (net/socket.c:2501)
    [   84.598147] ___sys_sendmsg (net/socket.c:2557)
    [   84.598275] __sys_sendmsg (./include/linux/file.h:31 net/socket.c:2586)
    [   84.598399] do_syscall_64 (arch/x86/entry/common.c:50 arch/x86/entry/common.c:80)
    [   84.598520] entry_SYSCALL_64_after_hwframe (arch/x86/entry/entry_64.S:120)
    [   84.598688]
    [   84.598744] The buggy address belongs to the object at ffff88810f674000
    [   84.598744]  which belongs to the cache kmalloc-8k of size 8192
    [   84.599135] The buggy address is located 2664 bytes to the right of
    [   84.599135]  allocated 7904-byte region [ffff88810f674000, ffff88810f675ee0)
    [   84.599544]
    [   84.599598] The buggy address belongs to the physical page:
    [   84.599777] page:00000000e638567f refcount:1 mapcount:0 mapping:0000000000000000 index:0x0 pfn:0x10f670
    [   84.600074] head:00000000e638567f order:3 entire_mapcount:0 nr_pages_mapped:0 pincount:0
    [   84.600330] flags: 0x200000000010200(slab|head|node=0|zone=2)
    [   84.600517] raw: 0200000000010200 ffff888100043180 dead000000000122 0000000000000000
    [   84.600764] raw: 0000000000000000 0000000080020002 00000001ffffffff 0000000000000000
    [   84.601009] page dumped because: kasan: bad access detected
    [   84.601187]
    [   84.601241] Memory state around the buggy address:
    [   84.601396]  ffff88810f676800: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    [   84.601620]  ffff88810f676880: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    [   84.601845] >ffff88810f676900: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    [   84.602069]                                               ^
    [   84.602243]  ffff88810f676980: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    [   84.602468]  ffff88810f676a00: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    [   84.602693] ==================================================================
    [   84.602924] Disabling lock debugging due to kernel taint
    
    Fixes: 3015f3d2a3cd ("pkt_sched: enable QFQ to support TSO/GSO")
    Reported-by: Gwangun Jung <exsociety@gmail.com>
    Signed-off-by: Gwangun Jung <exsociety@gmail.com>
    Acked-by: Jamal Hadi Salim<jhs@mojatatu.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8e73952957a3de4d611a8c2ec82b39b8f25d7c4c
Author: Cristian Ciocaltea <cristian.ciocaltea@collabora.com>
Date:   Thu Apr 6 20:18:00 2023 +0300

    regulator: fan53555: Explicitly include bits header
    
    [ Upstream commit 4fb9a5060f73627303bc531ceaab1b19d0a24aef ]
    
    Since commit f2a9eb975ab2 ("regulator: fan53555: Add support for
    FAN53526") the driver makes use of the BIT() macro, but relies on the
    bits header being implicitly included.
    
    Explicitly pull the header in to avoid potential build failures in some
    configurations.
    
    While here, reorder include directives alphabetically.
    
    Fixes: f2a9eb975ab2 ("regulator: fan53555: Add support for FAN53526")
    Signed-off-by: Cristian Ciocaltea <cristian.ciocaltea@collabora.com>
    Link: https://lore.kernel.org/r/20230406171806.948290-3-cristian.ciocaltea@collabora.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3224458030a2b44eeaeed5af9d1824c2ae0eb30e
Author: Florian Westphal <fw@strlen.de>
Date:   Mon Apr 3 13:54:37 2023 +0200

    netfilter: br_netfilter: fix recent physdev match breakage
    
    [ Upstream commit 94623f579ce338b5fa61b5acaa5beb8aa657fb9e ]
    
    Recent attempt to ensure PREROUTING hook is executed again when a
    decrypted ipsec packet received on a bridge passes through the network
    stack a second time broke the physdev match in INPUT hook.
    
    We can't discard the nf_bridge info strct from sabotage_in hook, as
    this is needed by the physdev match.
    
    Keep the struct around and handle this with another conditional instead.
    
    Fixes: 2b272bb558f1 ("netfilter: br_netfilter: disable sabotage_in hook after first suppression")
    Reported-and-tested-by: Farid BENAMROUCHE <fariouche@yahoo.fr>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 08b78037c4f1476f5537b4e900ea0f151ea219e8
Author: Peng Fan <peng.fan@nxp.com>
Date:   Mon Mar 27 18:03:21 2023 +0800

    arm64: dts: imx8mm-evk: correct pmic clock source
    
    [ Upstream commit 85af7ffd24da38e416a14bd6bf207154d94faa83 ]
    
    The osc_32k supports #clock-cells as 0, using an id is wrong, drop it.
    
    Fixes: a6a355ede574 ("arm64: dts: imx8mm-evk: Add 32.768 kHz clock to PMIC")
    Signed-off-by: Peng Fan <peng.fan@nxp.com>
    Reviewed-by: Marco Felsch <m.felsch@pengutronix.de>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2c06e904c2b730c3c2289fffb3eec601b8d0ec1b
Author: Marc Gonzalez <mgonzalez@freebox.fr>
Date:   Mon Mar 27 14:09:30 2023 +0200

    arm64: dts: meson-g12-common: specify full DMC range
    
    [ Upstream commit aec4353114a408b3a831a22ba34942d05943e462 ]
    
    According to S905X2 Datasheet - Revision 07:
    DRAM Memory Controller (DMC) register area spans ff638000-ff63a000.
    
    According to DeviceTree Specification - Release v0.4-rc1:
    simple-bus nodes do not require reg property.
    
    Fixes: 1499218c80c99a ("arm64: dts: move common G12A & G12B modes to meson-g12-common.dtsi")
    Signed-off-by: Marc Gonzalez <mgonzalez@freebox.fr>
    Reviewed-by: Martin Blumenstingl <martin.blumenstingl@googlemail.com>
    Link: https://lore.kernel.org/r/20230327120932.2158389-2-mgonzalez@freebox.fr
    Signed-off-by: Neil Armstrong <neil.armstrong@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b33dbd06ac5f23e69c1336df9d5315ad3655a0ad
Author: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
Date:   Fri Mar 24 05:16:50 2023 +0300

    arm64: dts: qcom: ipq8074-hk01: enable QMP device, not the PHY node
    
    [ Upstream commit 72630ba422b70ea0874fc90d526353cf71c72488 ]
    
    Correct PCIe PHY enablement to refer the QMP device nodes rather than
    PHY device nodes. QMP nodes have 'status = "disabled"' property in the
    ipq8074.dtsi, while PHY nodes do not correspond to the actual device and
    do not have the status property.
    
    Fixes: e8a7fdc505bb ("arm64: dts: ipq8074: qcom: Re-arrange dts nodes based on address")
    Signed-off-by: Dmitry Baryshkov <dmitry.baryshkov@linaro.org>
    Signed-off-by: Bjorn Andersson <andersson@kernel.org>
    Link: https://lore.kernel.org/r/20230324021651.1799969-1-dmitry.baryshkov@linaro.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e662521ec73993cc90b1a57a0f12ddd19ca6ac79
Author: Jianqun Xu <jay.xu@rock-chips.com>
Date:   Wed Feb 8 17:14:11 2023 +0800

    ARM: dts: rockchip: fix a typo error for rk3288 spdif node
    
    [ Upstream commit 02c84f91adb9a64b75ec97d772675c02a3e65ed7 ]
    
    Fix the address in the spdif node name.
    
    Fixes: 874e568e500a ("ARM: dts: rockchip: Add SPDIF transceiver for RK3288")
    Signed-off-by: Jianqun Xu <jay.xu@rock-chips.com>
    Reviewed-by: Sjoerd Simons <sjoerd@collabora.com>
    Link: https://lore.kernel.org/r/20230208091411.1603142-1-jay.xu@rock-chips.com
    Signed-off-by: Heiko Stuebner <heiko@sntech.de>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4fdad925aa1a320c2f32bf956ed29100c7fdc464
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Apr 13 16:48:27 2023 +0200

    Linux 5.15.107
    
    Link: https://lore.kernel.org/r/20230412082823.045155996@linuxfoundation.org
    Tested-by: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: Shuah Khan <skhan@linuxfoundation.org>
    Tested-by: Guenter Roeck <linux@roeck-us.net>
    Tested-by: Bagas Sanjaya <bagasdotme@gmail.com>
    Tested-by: Ron Economos <re@w6rz.net>
    Tested-by: Linux Kernel Functional Testing <lkft@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c862d7debe55202b0180f039b0d0f68e1485ebb3
Author: Eduard Zingerman <eddyz87@gmail.com>
Date:   Sat Oct 1 13:44:24 2022 +0300

    bpftool: Print newline before '}' for struct with padding only fields
    
    [ Upstream commit 44a726c3f23cf762ef4ce3c1709aefbcbe97f62c ]
    
    btf_dump_emit_struct_def attempts to print empty structures at a
    single line, e.g. `struct empty {}`. However, it has to account for a
    case when there are no regular but some padding fields in the struct.
    In such case `vlen` would be zero, but size would be non-zero.
    
    E.g. here is struct bpf_timer from vmlinux.h before this patch:
    
     struct bpf_timer {
            long: 64;
            long: 64;};
    
    And after this patch:
    
     struct bpf_dynptr {
            long: 64;
            long: 64;
     };
    
    Signed-off-by: Eduard Zingerman <eddyz87@gmail.com>
    Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
    Link: https://lore.kernel.org/bpf/20221001104425.415768-1-eddyz87@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1585f3fc24b5c27a6d7a3351880cca28acec95c2
Author: Heming Zhao <ocfs2-devel@oss.oracle.com>
Date:   Mon Aug 15 16:57:54 2022 +0800

    ocfs2: fix freeing uninitialized resource on ocfs2_dlm_shutdown
    
    commit 550842cc60987b269e31b222283ade3e1b6c7fc8 upstream.
    
    After commit 0737e01de9c4 ("ocfs2: ocfs2_mount_volume does cleanup job
    before return error"), any procedure after ocfs2_dlm_init() fails will
    trigger crash when calling ocfs2_dlm_shutdown().
    
    ie: On local mount mode, no dlm resource is initialized.  If
    ocfs2_mount_volume() fails in ocfs2_find_slot(), error handling will call
    ocfs2_dlm_shutdown(), then does dlm resource cleanup job, which will
    trigger kernel crash.
    
    This solution should bypass uninitialized resources in
    ocfs2_dlm_shutdown().
    
    Link: https://lkml.kernel.org/r/20220815085754.20417-1-heming.zhao@suse.com
    Fixes: 0737e01de9c4 ("ocfs2: ocfs2_mount_volume does cleanup job before return error")
    Signed-off-by: Heming Zhao <heming.zhao@suse.com>
    Reviewed-by: Joseph Qi <joseph.qi@linux.alibaba.com>
    Cc: Mark Fasheh <mark@fasheh.com>
    Cc: Joel Becker <jlbec@evilplan.org>
    Cc: Junxiao Bi <junxiao.bi@oracle.com>
    Cc: Changwei Ge <gechangwei@live.cn>
    Cc: Gang He <ghe@suse.com>
    Cc: Jun Piao <piaojun@huawei.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b97e4100be37350f1953c897902097cb01347df6
Author: Masahiro Yamada <masahiroy@kernel.org>
Date:   Sat Oct 15 05:18:11 2022 +0900

    kbuild: fix single directory build
    
    commit 3753af778dd9d0d5199d6a7d01b0ead33135d095 upstream.
    
    Commit f110e5a250e3 ("kbuild: refactor single builds of *.ko") was wrong.
    
    KBUILD_MODULES _is_ needed for single builds.
    
    Otherwise, "make foo/bar/baz/" does not build module objects at all.
    
    Fixes: f110e5a250e3 ("kbuild: refactor single builds of *.ko")
    Reported-by: David Sterba <dsterba@suse.cz>
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Tested-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 326b80bd2267c9f25eca1cdb725980a27a084add
Author: Alistair Popple <apopple@nvidia.com>
Date:   Thu Mar 30 12:25:19 2023 +1100

    mm: take a page reference when removing device exclusive entries
    
    commit 7c7b962938ddda6a9cd095de557ee5250706ea88 upstream.
    
    Device exclusive page table entries are used to prevent CPU access to a
    page whilst it is being accessed from a device.  Typically this is used to
    implement atomic operations when the underlying bus does not support
    atomic access.  When a CPU thread encounters a device exclusive entry it
    locks the page and restores the original entry after calling mmu notifiers
    to signal drivers that exclusive access is no longer available.
    
    The device exclusive entry holds a reference to the page making it safe to
    access the struct page whilst the entry is present.  However the fault
    handling code does not hold the PTL when taking the page lock.  This means
    if there are multiple threads faulting concurrently on the device
    exclusive entry one will remove the entry whilst others will wait on the
    page lock without holding a reference.
    
    This can lead to threads locking or waiting on a folio with a zero
    refcount.  Whilst mmap_lock prevents the pages getting freed via munmap()
    they may still be freed by a migration.  This leads to warnings such as
    PAGE_FLAGS_CHECK_AT_FREE due to the page being locked when the refcount
    drops to zero.
    
    Fix this by trying to take a reference on the folio before locking it.
    The code already checks the PTE under the PTL and aborts if the entry is
    no longer there.  It is also possible the folio has been unmapped, freed
    and re-allocated allowing a reference to be taken on an unrelated folio.
    This case is also detected by the PTE check and the folio is unlocked
    without further changes.
    
    Link: https://lkml.kernel.org/r/20230330012519.804116-1-apopple@nvidia.com
    Fixes: b756a3b5e7ea ("mm: device exclusive memory access")
    Signed-off-by: Alistair Popple <apopple@nvidia.com>
    Reviewed-by: Ralph Campbell <rcampbell@nvidia.com>
    Reviewed-by: John Hubbard <jhubbard@nvidia.com>
    Acked-by: David Hildenbrand <david@redhat.com>
    Cc: Matthew Wilcox (Oracle) <willy@infradead.org>
    Cc: Christoph Hellwig <hch@infradead.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1fc9263ad79593972a132ea4fcc7530e87e8063e
Author: Robert Foss <rfoss@kernel.org>
Date:   Tue Dec 13 16:03:04 2022 +0100

    drm/bridge: lt9611: Fix PLL being unable to lock
    
    commit 2a9df204be0bbb896e087f00b9ee3fc559d5a608 upstream.
    
    This fixes PLL being unable to lock, and is derived from an equivalent
    downstream commit.
    
    Available LT9611 documentation does not list this register, neither does
    LT9611UXC (which is a different chip).
    
    This commit has been confirmed to fix HDMI output on DragonBoard 845c.
    
    Suggested-by: Amit Pundir <amit.pundir@linaro.org>
    Reviewed-by: Amit Pundir <amit.pundir@linaro.org>
    Signed-off-by: Robert Foss <robert.foss@linaro.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/20221213150304.4189760-1-robert.foss@linaro.org
    Signed-off-by: Amit Pundir <amit.pundir@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4bdf1514b4268d29360ba9e43becdd49955bc7ae
Author: Rongwei Wang <rongwei.wang@linux.alibaba.com>
Date:   Tue Apr 4 23:47:16 2023 +0800

    mm/swap: fix swap_info_struct race between swapoff and get_swap_pages()
    
    commit 6fe7d6b992113719e96744d974212df3fcddc76c upstream.
    
    The si->lock must be held when deleting the si from the available list.
    Otherwise, another thread can re-add the si to the available list, which
    can lead to memory corruption.  The only place we have found where this
    happens is in the swapoff path.  This case can be described as below:
    
    core 0                       core 1
    swapoff
    
    del_from_avail_list(si)      waiting
    
    try lock si->lock            acquire swap_avail_lock
                                 and re-add si into
                                 swap_avail_head
    
    acquire si->lock but missing si already being added again, and continuing
    to clear SWP_WRITEOK, etc.
    
    It can be easily found that a massive warning messages can be triggered
    inside get_swap_pages() by some special cases, for example, we call
    madvise(MADV_PAGEOUT) on blocks of touched memory concurrently, meanwhile,
    run much swapon-swapoff operations (e.g.  stress-ng-swap).
    
    However, in the worst case, panic can be caused by the above scene.  In
    swapoff(), the memory used by si could be kept in swap_info[] after
    turning off a swap.  This means memory corruption will not be caused
    immediately until allocated and reset for a new swap in the swapon path.
    A panic message caused: (with CONFIG_PLIST_DEBUG enabled)
    
    ------------[ cut here ]------------
    top: 00000000e58a3003, n: 0000000013e75cda, p: 000000008cd4451a
    prev: 0000000035b1e58a, n: 000000008cd4451a, p: 000000002150ee8d
    next: 000000008cd4451a, n: 000000008cd4451a, p: 000000008cd4451a
    WARNING: CPU: 21 PID: 1843 at lib/plist.c:60 plist_check_prev_next_node+0x50/0x70
    Modules linked in: rfkill(E) crct10dif_ce(E)...
    CPU: 21 PID: 1843 Comm: stress-ng Kdump: ... 5.10.134+
    Hardware name: Alibaba Cloud ECS, BIOS 0.0.0 02/06/2015
    pstate: 60400005 (nZCv daif +PAN -UAO -TCO BTYPE=--)
    pc : plist_check_prev_next_node+0x50/0x70
    lr : plist_check_prev_next_node+0x50/0x70
    sp : ffff0018009d3c30
    x29: ffff0018009d3c40 x28: ffff800011b32a98
    x27: 0000000000000000 x26: ffff001803908000
    x25: ffff8000128ea088 x24: ffff800011b32a48
    x23: 0000000000000028 x22: ffff001800875c00
    x21: ffff800010f9e520 x20: ffff001800875c00
    x19: ffff001800fdc6e0 x18: 0000000000000030
    x17: 0000000000000000 x16: 0000000000000000
    x15: 0736076307640766 x14: 0730073007380731
    x13: 0736076307640766 x12: 0730073007380731
    x11: 000000000004058d x10: 0000000085a85b76
    x9 : ffff8000101436e4 x8 : ffff800011c8ce08
    x7 : 0000000000000000 x6 : 0000000000000001
    x5 : ffff0017df9ed338 x4 : 0000000000000001
    x3 : ffff8017ce62a000 x2 : ffff0017df9ed340
    x1 : 0000000000000000 x0 : 0000000000000000
    Call trace:
     plist_check_prev_next_node+0x50/0x70
     plist_check_head+0x80/0xf0
     plist_add+0x28/0x140
     add_to_avail_list+0x9c/0xf0
     _enable_swap_info+0x78/0xb4
     __do_sys_swapon+0x918/0xa10
     __arm64_sys_swapon+0x20/0x30
     el0_svc_common+0x8c/0x220
     do_el0_svc+0x2c/0x90
     el0_svc+0x1c/0x30
     el0_sync_handler+0xa8/0xb0
     el0_sync+0x148/0x180
    irq event stamp: 2082270
    
    Now, si->lock locked before calling 'del_from_avail_list()' to make sure
    other thread see the si had been deleted and SWP_WRITEOK cleared together,
    will not reinsert again.
    
    This problem exists in versions after stable 5.10.y.
    
    Link: https://lkml.kernel.org/r/20230404154716.23058-1-rongwei.wang@linux.alibaba.com
    Fixes: a2468cc9bfdff ("swap: choose swap device according to numa node")
    Tested-by: Yongchen Yin <wb-yyc939293@alibaba-inc.com>
    Signed-off-by: Rongwei Wang <rongwei.wang@linux.alibaba.com>
    Cc: Bagas Sanjaya <bagasdotme@gmail.com>
    Cc: Matthew Wilcox (Oracle) <willy@infradead.org>
    Cc: Aaron Lu <aaron.lu@intel.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cbe5f7fed7f73c247ac7caeb2518daf52d619b09
Author: Zheng Yejian <zhengyejian1@huawei.com>
Date:   Sat Mar 25 10:12:47 2023 +0800

    ring-buffer: Fix race while reader and writer are on the same page
    
    commit 6455b6163d8c680366663cdb8c679514d55fc30c upstream.
    
    When user reads file 'trace_pipe', kernel keeps printing following logs
    that warn at "cpu_buffer->reader_page->read > rb_page_size(reader)" in
    rb_get_reader_page(). It just looks like there's an infinite loop in
    tracing_read_pipe(). This problem occurs several times on arm64 platform
    when testing v5.10 and below.
    
      Call trace:
       rb_get_reader_page+0x248/0x1300
       rb_buffer_peek+0x34/0x160
       ring_buffer_peek+0xbc/0x224
       peek_next_entry+0x98/0xbc
       __find_next_entry+0xc4/0x1c0
       trace_find_next_entry_inc+0x30/0x94
       tracing_read_pipe+0x198/0x304
       vfs_read+0xb4/0x1e0
       ksys_read+0x74/0x100
       __arm64_sys_read+0x24/0x30
       el0_svc_common.constprop.0+0x7c/0x1bc
       do_el0_svc+0x2c/0x94
       el0_svc+0x20/0x30
       el0_sync_handler+0xb0/0xb4
       el0_sync+0x160/0x180
    
    Then I dump the vmcore and look into the problematic per_cpu ring_buffer,
    I found that tail_page/commit_page/reader_page are on the same page while
    reader_page->read is obviously abnormal:
      tail_page == commit_page == reader_page == {
        .write = 0x100d20,
        .read = 0x8f9f4805,  // Far greater than 0xd20, obviously abnormal!!!
        .entries = 0x10004c,
        .real_end = 0x0,
        .page = {
          .time_stamp = 0x857257416af0,
          .commit = 0xd20,  // This page hasn't been full filled.
          // .data[0...0xd20] seems normal.
        }
     }
    
    The root cause is most likely the race that reader and writer are on the
    same page while reader saw an event that not fully committed by writer.
    
    To fix this, add memory barriers to make sure the reader can see the
    content of what is committed. Since commit a0fcaaed0c46 ("ring-buffer: Fix
    race between reset page and reading page") has added the read barrier in
    rb_get_reader_page(), here we just need to add the write barrier.
    
    Link: https://lore.kernel.org/linux-trace-kernel/20230325021247.2923907-1-zhengyejian1@huawei.com
    
    Cc: stable@vger.kernel.org
    Fixes: 77ae365eca89 ("ring-buffer: make lockless")
    Suggested-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Zheng Yejian <zhengyejian1@huawei.com>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 23ed5af5767ae0e0de5382706ce57c156bd1a832
Author: Karol Herbst <kherbst@redhat.com>
Date:   Fri Mar 31 00:39:38 2023 +0200

    drm/nouveau/disp: Support more modes by checking with lower bpc
    
    commit 7f67aa097e875c87fba024e850cf405342300059 upstream.
    
    This allows us to advertise more modes especially on HDR displays.
    
    Fixes using 4K@60 modes on my TV and main display both using a HDMI to DP
    adapter. Also fixes similar issues for users running into this.
    
    Cc: stable@vger.kernel.org # 5.10+
    Signed-off-by: Karol Herbst <kherbst@redhat.com>
    Reviewed-by: Lyude Paul <lyude@redhat.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20230330223938.4025569-1-kherbst@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6f2180c5273a7da94121d8d42a1c4a36501374e3
Author: Boris Brezillon <boris.brezillon@collabora.com>
Date:   Fri May 21 11:38:11 2021 +0200

    drm/panfrost: Fix the panfrost_mmu_map_fault_addr() error path
    
    commit 764a2ab9eb56e1200083e771aab16186836edf1d upstream.
    
    Make sure all bo->base.pages entries are either NULL or pointing to a
    valid page before calling drm_gem_shmem_put_pages().
    
    Reported-by: Tomeu Vizoso <tomeu.vizoso@collabora.com>
    Cc: <stable@vger.kernel.org>
    Fixes: 187d2929206e ("drm/panfrost: Add support for GPU heap allocations")
    Signed-off-by: Boris Brezillon <boris.brezillon@collabora.com>
    Reviewed-by: Steven Price <steven.price@arm.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20210521093811.1018992-1-boris.brezillon@collabora.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a184df0de132df4f88f36ac765b0e4b4eee6ff61
Author: Yafang Shao <laoar.shao@gmail.com>
Date:   Thu Mar 30 16:26:25 2023 +0000

    mm: vmalloc: avoid warn_alloc noise caused by fatal signal
    
    commit f349b15e183d6956f1b63d6ff57849ff10c7edd5 upstream.
    
    There're some suspicious warn_alloc on my test serer, for example,
    
    [13366.518837] warn_alloc: 81 callbacks suppressed
    [13366.518841] test_verifier: vmalloc error: size 4096, page order 0, failed to allocate pages, mode:0x500dc2(GFP_HIGHUSER|__GFP_ZERO|__GFP_ACCOUNT), nodemask=(null),cpuset=/,mems_allowed=0-1
    [13366.522240] CPU: 30 PID: 722463 Comm: test_verifier Kdump: loaded Tainted: G        W  O       6.2.0+ #638
    [13366.524216] Call Trace:
    [13366.524702]  <TASK>
    [13366.525148]  dump_stack_lvl+0x6c/0x80
    [13366.525712]  dump_stack+0x10/0x20
    [13366.526239]  warn_alloc+0x119/0x190
    [13366.526783]  ? alloc_pages_bulk_array_mempolicy+0x9e/0x2a0
    [13366.527470]  __vmalloc_area_node+0x546/0x5b0
    [13366.528066]  __vmalloc_node_range+0xc2/0x210
    [13366.528660]  __vmalloc_node+0x42/0x50
    [13366.529186]  ? bpf_prog_realloc+0x53/0xc0
    [13366.529743]  __vmalloc+0x1e/0x30
    [13366.530235]  bpf_prog_realloc+0x53/0xc0
    [13366.530771]  bpf_patch_insn_single+0x80/0x1b0
    [13366.531351]  bpf_jit_blind_constants+0xe9/0x1c0
    [13366.531932]  ? __free_pages+0xee/0x100
    [13366.532457]  ? free_large_kmalloc+0x58/0xb0
    [13366.533002]  bpf_int_jit_compile+0x8c/0x5e0
    [13366.533546]  bpf_prog_select_runtime+0xb4/0x100
    [13366.534108]  bpf_prog_load+0x6b1/0xa50
    [13366.534610]  ? perf_event_task_tick+0x96/0xb0
    [13366.535151]  ? security_capable+0x3a/0x60
    [13366.535663]  __sys_bpf+0xb38/0x2190
    [13366.536120]  ? kvm_clock_get_cycles+0x9/0x10
    [13366.536643]  __x64_sys_bpf+0x1c/0x30
    [13366.537094]  do_syscall_64+0x38/0x90
    [13366.537554]  entry_SYSCALL_64_after_hwframe+0x72/0xdc
    [13366.538107] RIP: 0033:0x7f78310f8e29
    [13366.538561] Code: 01 00 48 81 c4 80 00 00 00 e9 f1 fe ff ff 0f 1f 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 8b 0d 17 e0 2c 00 f7 d8 64 89 01 48
    [13366.540286] RSP: 002b:00007ffe2a61fff8 EFLAGS: 00000206 ORIG_RAX: 0000000000000141
    [13366.541031] RAX: ffffffffffffffda RBX: 0000000000000000 RCX: 00007f78310f8e29
    [13366.541749] RDX: 0000000000000080 RSI: 00007ffe2a6200b0 RDI: 0000000000000005
    [13366.542470] RBP: 00007ffe2a620010 R08: 00007ffe2a6202a0 R09: 00007ffe2a6200b0
    [13366.543183] R10: 00000000000f423e R11: 0000000000000206 R12: 0000000000407800
    [13366.543900] R13: 00007ffe2a620540 R14: 0000000000000000 R15: 0000000000000000
    [13366.544623]  </TASK>
    [13366.545260] Mem-Info:
    [13366.546121] active_anon:81319 inactive_anon:20733 isolated_anon:0
     active_file:69450 inactive_file:5624 isolated_file:0
     unevictable:0 dirty:10 writeback:0
     slab_reclaimable:69649 slab_unreclaimable:48930
     mapped:27400 shmem:12868 pagetables:4929
     sec_pagetables:0 bounce:0
     kernel_misc_reclaimable:0
     free:15870308 free_pcp:142935 free_cma:0
    [13366.551886] Node 0 active_anon:224836kB inactive_anon:33528kB active_file:175692kB inactive_file:13752kB unevictable:0kB isolated(anon):0kB isolated(file):0kB mapped:59248kB dirty:32kB writeback:0kB shmem:18252kB shmem_thp: 0kB shmem_pmdmapped: 0kB anon_thp: 0kB writeback_tmp:0kB kernel_stack:4616kB pagetables:10664kB sec_pagetables:0kB all_unreclaimable? no
    [13366.555184] Node 1 active_anon:100440kB inactive_anon:49404kB active_file:102108kB inactive_file:8744kB unevictable:0kB isolated(anon):0kB isolated(file):0kB mapped:50352kB dirty:8kB writeback:0kB shmem:33220kB shmem_thp: 0kB shmem_pmdmapped: 0kB anon_thp: 0kB writeback_tmp:0kB kernel_stack:3896kB pagetables:9052kB sec_pagetables:0kB all_unreclaimable? no
    [13366.558262] Node 0 DMA free:15360kB boost:0kB min:304kB low:380kB high:456kB reserved_highatomic:0KB active_anon:0kB inactive_anon:0kB active_file:0kB inactive_file:0kB unevictable:0kB writepending:0kB present:15992kB managed:15360kB mlocked:0kB bounce:0kB free_pcp:0kB local_pcp:0kB free_cma:0kB
    [13366.560821] lowmem_reserve[]: 0 2735 31873 31873 31873
    [13366.561981] Node 0 DMA32 free:2790904kB boost:0kB min:56028kB low:70032kB high:84036kB reserved_highatomic:0KB active_anon:1936kB inactive_anon:20kB active_file:396kB inactive_file:344kB unevictable:0kB writepending:0kB present:3129200kB managed:2801520kB mlocked:0kB bounce:0kB free_pcp:5188kB local_pcp:0kB free_cma:0kB
    [13366.565148] lowmem_reserve[]: 0 0 29137 29137 29137
    [13366.566168] Node 0 Normal free:28533824kB boost:0kB min:596740kB low:745924kB high:895108kB reserved_highatomic:28672KB active_anon:222900kB inactive_anon:33508kB active_file:175296kB inactive_file:13408kB unevictable:0kB writepending:32kB present:30408704kB managed:29837172kB mlocked:0kB bounce:0kB free_pcp:295724kB local_pcp:0kB free_cma:0kB
    [13366.569485] lowmem_reserve[]: 0 0 0 0 0
    [13366.570416] Node 1 Normal free:32141144kB boost:0kB min:660504kB low:825628kB high:990752kB reserved_highatomic:69632KB active_anon:100440kB inactive_anon:49404kB active_file:102108kB inactive_file:8744kB unevictable:0kB writepending:8kB present:33554432kB managed:33025372kB mlocked:0kB bounce:0kB free_pcp:270880kB local_pcp:46860kB free_cma:0kB
    [13366.573403] lowmem_reserve[]: 0 0 0 0 0
    [13366.574015] Node 0 DMA: 0*4kB 0*8kB 0*16kB 0*32kB 0*64kB 0*128kB 0*256kB 0*512kB 1*1024kB (U) 1*2048kB (M) 3*4096kB (M) = 15360kB
    [13366.575474] Node 0 DMA32: 782*4kB (UME) 756*8kB (UME) 736*16kB (UME) 745*32kB (UME) 694*64kB (UME) 653*128kB (UME) 595*256kB (UME) 552*512kB (UME) 454*1024kB (UME) 347*2048kB (UME) 246*4096kB (UME) = 2790904kB
    [13366.577442] Node 0 Normal: 33856*4kB (UMEH) 51815*8kB (UMEH) 42418*16kB (UMEH) 36272*32kB (UMEH) 22195*64kB (UMEH) 10296*128kB (UMEH) 7238*256kB (UMEH) 5638*512kB (UEH) 5337*1024kB (UMEH) 3506*2048kB (UMEH) 1470*4096kB (UME) = 28533784kB
    [13366.580460] Node 1 Normal: 15776*4kB (UMEH) 37485*8kB (UMEH) 29509*16kB (UMEH) 21420*32kB (UMEH) 14818*64kB (UMEH) 13051*128kB (UMEH) 9918*256kB (UMEH) 7374*512kB (UMEH) 5397*1024kB (UMEH) 3887*2048kB (UMEH) 2002*4096kB (UME) = 32141240kB
    [13366.583027] Node 0 hugepages_total=0 hugepages_free=0 hugepages_surp=0 hugepages_size=1048576kB
    [13366.584380] Node 0 hugepages_total=0 hugepages_free=0 hugepages_surp=0 hugepages_size=2048kB
    [13366.585702] Node 1 hugepages_total=0 hugepages_free=0 hugepages_surp=0 hugepages_size=1048576kB
    [13366.587042] Node 1 hugepages_total=0 hugepages_free=0 hugepages_surp=0 hugepages_size=2048kB
    [13366.588372] 87386 total pagecache pages
    [13366.589266] 0 pages in swap cache
    [13366.590327] Free swap  = 0kB
    [13366.591227] Total swap = 0kB
    [13366.592142] 16777082 pages RAM
    [13366.593057] 0 pages HighMem/MovableOnly
    [13366.594037] 357226 pages reserved
    [13366.594979] 0 pages hwpoisoned
    
    This failure really confuse me as there're still lots of available pages.
    Finally I figured out it was caused by a fatal signal.  When a process is
    allocating memory via vm_area_alloc_pages(), it will break directly even
    if it hasn't allocated the requested pages when it receives a fatal
    signal.  In that case, we shouldn't show this warn_alloc, as it is
    useless.  We only need to show this warning when there're really no enough
    pages.
    
    Link: https://lkml.kernel.org/r/20230330162625.13604-1-laoar.shao@gmail.com
    Signed-off-by: Yafang Shao <laoar.shao@gmail.com>
    Reviewed-by: Lorenzo Stoakes <lstoakes@gmail.com>
    Cc: Christoph Hellwig <hch@infradead.org>
    Cc: Uladzislau Rezki (Sony) <urezki@gmail.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d88d7a9fcf209fea6258d35aefd94869c95a4173
Author: Jason Montleon <jmontleo@redhat.com>
Date:   Fri Mar 24 13:07:11 2023 -0400

    ASoC: hdac_hdmi: use set_stream() instead of set_tdm_slots()
    
    commit f6887a71bdd2f0dcba9b8180dd2223cfa8637e85 upstream.
    
    hdac_hdmi was not updated to use set_stream() instead of set_tdm_slots()
    in the original commit so HDMI no longer produces audio.
    
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/regressions/CAJD_bPKQdtaExvVEKxhQ47G-ZXDA=k+gzhMJRHLBe=mysPnuKA@mail.gmail.com/
    Fixes: 636110411ca7 ("ASoC: Intel/SOF: use set_stream() instead of set_tdm_slots() for HDAudio")
    Signed-off-by: Jason Montleon <jmontleo@redhat.com>
    Reviewed-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Link: https://lore.kernel.org/r/20230324170711.2526-1-jmontleo@redhat.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 33d5d4e67a0e13c3ca6257fa67bf6503bc000878
Author: Steven Rostedt (Google) <rostedt@goodmis.org>
Date:   Tue Apr 4 19:45:04 2023 -0400

    tracing: Free error logs of tracing instances
    
    commit 3357c6e429643231e60447b52ffbb7ac895aca22 upstream.
    
    When a tracing instance is removed, the error messages that hold errors
    that occurred in the instance needs to be freed. The following reports a
    memory leak:
    
     # cd /sys/kernel/tracing
     # mkdir instances/foo
     # echo 'hist:keys=x' > instances/foo/events/sched/sched_switch/trigger
     # cat instances/foo/error_log
     [  117.404795] hist:sched:sched_switch: error: Couldn't find field
       Command: hist:keys=x
                          ^
     # rmdir instances/foo
    
    Then check for memory leaks:
    
     # echo scan > /sys/kernel/debug/kmemleak
     # cat /sys/kernel/debug/kmemleak
    unreferenced object 0xffff88810d8ec700 (size 192):
      comm "bash", pid 869, jiffies 4294950577 (age 215.752s)
      hex dump (first 32 bytes):
        60 dd 68 61 81 88 ff ff 60 dd 68 61 81 88 ff ff  `.ha....`.ha....
        a0 30 8c 83 ff ff ff ff 26 00 0a 00 00 00 00 00  .0......&.......
      backtrace:
        [<00000000dae26536>] kmalloc_trace+0x2a/0xa0
        [<00000000b2938940>] tracing_log_err+0x277/0x2e0
        [<000000004a0e1b07>] parse_atom+0x966/0xb40
        [<0000000023b24337>] parse_expr+0x5f3/0xdb0
        [<00000000594ad074>] event_hist_trigger_parse+0x27f8/0x3560
        [<00000000293a9645>] trigger_process_regex+0x135/0x1a0
        [<000000005c22b4f2>] event_trigger_write+0x87/0xf0
        [<000000002cadc509>] vfs_write+0x162/0x670
        [<0000000059c3b9be>] ksys_write+0xca/0x170
        [<00000000f1cddc00>] do_syscall_64+0x3e/0xc0
        [<00000000868ac68c>] entry_SYSCALL_64_after_hwframe+0x72/0xdc
    unreferenced object 0xffff888170c35a00 (size 32):
      comm "bash", pid 869, jiffies 4294950577 (age 215.752s)
      hex dump (first 32 bytes):
        0a 20 20 43 6f 6d 6d 61 6e 64 3a 20 68 69 73 74  .  Command: hist
        3a 6b 65 79 73 3d 78 0a 00 00 00 00 00 00 00 00  :keys=x.........
      backtrace:
        [<000000006a747de5>] __kmalloc+0x4d/0x160
        [<000000000039df5f>] tracing_log_err+0x29b/0x2e0
        [<000000004a0e1b07>] parse_atom+0x966/0xb40
        [<0000000023b24337>] parse_expr+0x5f3/0xdb0
        [<00000000594ad074>] event_hist_trigger_parse+0x27f8/0x3560
        [<00000000293a9645>] trigger_process_regex+0x135/0x1a0
        [<000000005c22b4f2>] event_trigger_write+0x87/0xf0
        [<000000002cadc509>] vfs_write+0x162/0x670
        [<0000000059c3b9be>] ksys_write+0xca/0x170
        [<00000000f1cddc00>] do_syscall_64+0x3e/0xc0
        [<00000000868ac68c>] entry_SYSCALL_64_after_hwframe+0x72/0xdc
    
    The problem is that the error log needs to be freed when the instance is
    removed.
    
    Link: https://lore.kernel.org/lkml/76134d9f-a5ba-6a0d-37b3-28310b4a1e91@alu.unizg.hr/
    Link: https://lore.kernel.org/linux-trace-kernel/20230404194504.5790b95f@gandalf.local.home
    
    Cc: stable@vger.kernel.org
    Cc: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: Thorsten Leemhuis <regressions@leemhuis.info>
    Cc: Ulf Hansson <ulf.hansson@linaro.org>
    Cc: Eric Biggers <ebiggers@kernel.org>
    Fixes: 2f754e771b1a6 ("tracing: Have the error logs show up in the proper instances")
    Reported-by: Mirsad Goran Todorovac <mirsad.todorovac@alu.unizg.hr>
    Tested-by: Mirsad Todorovac <mirsad.todorovac@alu.unizg.hr>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c74065da695e04759cce962c85a44b0665a399df
Author: Michal Sojka <michal.sojka@cvut.cz>
Date:   Fri Mar 31 14:55:11 2023 +0200

    can: isotp: isotp_ops: fix poll() to not report false EPOLLOUT events
    
    commit 79e19fa79cb5d5f1b3bf3e3ae24989ccb93c7b7b upstream.
    
    When using select()/poll()/epoll() with a non-blocking ISOTP socket to
    wait for when non-blocking write is possible, a false EPOLLOUT event
    is sometimes returned. This can happen at least after sending a
    message which must be split to multiple CAN frames.
    
    The reason is that isotp_sendmsg() returns -EAGAIN when tx.state is
    not equal to ISOTP_IDLE and this behavior is not reflected in
    datagram_poll(), which is used in isotp_ops.
    
    This is fixed by introducing ISOTP-specific poll function, which
    suppresses the EPOLLOUT events in that case.
    
    v2: https://lore.kernel.org/all/20230302092812.320643-1-michal.sojka@cvut.cz
    v1: https://lore.kernel.org/all/20230224010659.48420-1-michal.sojka@cvut.cz
        https://lore.kernel.org/all/b53a04a2-ba1f-3858-84c1-d3eb3301ae15@hartkopp.net
    
    Signed-off-by: Michal Sojka <michal.sojka@cvut.cz>
    Reported-by: Jakub Jira <jirajak2@fel.cvut.cz>
    Tested-by: Oliver Hartkopp <socketcan@hartkopp.net>
    Acked-by: Oliver Hartkopp <socketcan@hartkopp.net>
    Fixes: e057dd3fc20f ("can: add ISO 15765-2:2016 transport protocol")
    Link: https://lore.kernel.org/all/20230331125511.372783-1-michal.sojka@cvut.cz
    Cc: stable@vger.kernel.org
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4fe1d9b6231a68ffc91318f57fd8e4982f028cf7
Author: Oleksij Rempel <linux@rempel-privat.de>
Date:   Tue Apr 4 09:31:28 2023 +0200

    can: j1939: j1939_tp_tx_dat_new(): fix out-of-bounds memory access
    
    commit b45193cb4df556fe6251b285a5ce44046dd36b4a upstream.
    
    In the j1939_tp_tx_dat_new() function, an out-of-bounds memory access
    could occur during the memcpy() operation if the size of skb->cb is
    larger than the size of struct j1939_sk_buff_cb. This is because the
    memcpy() operation uses the size of skb->cb, leading to a read beyond
    the struct j1939_sk_buff_cb.
    
    Updated the memcpy() operation to use the size of struct
    j1939_sk_buff_cb instead of the size of skb->cb. This ensures that the
    memcpy() operation only reads the memory within the bounds of struct
    j1939_sk_buff_cb, preventing out-of-bounds memory access.
    
    Additionally, add a BUILD_BUG_ON() to check that the size of skb->cb
    is greater than or equal to the size of struct j1939_sk_buff_cb. This
    ensures that the skb->cb buffer is large enough to hold the
    j1939_sk_buff_cb structure.
    
    Fixes: 9d71dd0c7009 ("can: add support of SAE J1939 protocol")
    Reported-by: Shuangpeng Bai <sjb7183@psu.edu>
    Tested-by: Shuangpeng Bai <sjb7183@psu.edu>
    Signed-off-by: Oleksij Rempel <o.rempel@pengutronix.de>
    Link: https://groups.google.com/g/syzkaller/c/G_LL-C3plRs/m/-8xCi6dCAgAJ
    Link: https://lore.kernel.org/all/20230404073128.3173900-1-o.rempel@pengutronix.de
    Cc: stable@vger.kernel.org
    [mkl: rephrase commit message]
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0af8fae81d8b7f1beddc17c5d4cfa43235134648
Author: Christian Brauner <brauner@kernel.org>
Date:   Thu Mar 30 09:13:16 2023 +0200

    fs: drop peer group ids under namespace lock
    
    commit cb2239c198ad9fbd5aced22cf93e45562da781eb upstream.
    
    When cleaning up peer group ids in the failure path we need to make sure
    to hold on to the namespace lock. Otherwise another thread might just
    turn the mount from a shared into a non-shared mount concurrently.
    
    Link: https://lore.kernel.org/lkml/00000000000088694505f8132d77@google.com
    Fixes: 2a1867219c7b ("fs: add mount_setattr()")
    Reported-by: syzbot+8ac3859139c685c4f597@syzkaller.appspotmail.com
    Cc: stable@vger.kernel.org # 5.12+
    Message-Id: <20230330-vfs-mount_setattr-propagation-fix-v1-1-37548d91533b@kernel.org>
    Signed-off-by: Christian Brauner <brauner@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 33a503b7c33937d8bfbade7b95b55c0d8095b4bf
Author: Zheng Yejian <zhengyejian1@huawei.com>
Date:   Thu Mar 30 10:52:23 2023 +0800

    ftrace: Fix issue that 'direct->addr' not restored in modify_ftrace_direct()
    
    commit 2a2d8c51defb446e8d89a83f42f8e5cd529111e9 upstream.
    
    Syzkaller report a WARNING: "WARN_ON(!direct)" in modify_ftrace_direct().
    
    Root cause is 'direct->addr' was changed from 'old_addr' to 'new_addr' but
    not restored if error happened on calling ftrace_modify_direct_caller().
    Then it can no longer find 'direct' by that 'old_addr'.
    
    To fix it, restore 'direct->addr' to 'old_addr' explicitly in error path.
    
    Link: https://lore.kernel.org/linux-trace-kernel/20230330025223.1046087-1-zhengyejian1@huawei.com
    
    Cc: stable@vger.kernel.org
    Cc: <mhiramat@kernel.org>
    Cc: <mark.rutland@arm.com>
    Cc: <ast@kernel.org>
    Cc: <daniel@iogearbox.net>
    Fixes: 8a141dd7f706 ("ftrace: Fix modify_ftrace_direct.")
    Signed-off-by: Zheng Yejian <zhengyejian1@huawei.com>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 20c5e10950e9d82ca0db41072e3a57b58536bc4a
Author: John Keeping <john@metanate.com>
Date:   Mon Mar 27 18:36:46 2023 +0100

    ftrace: Mark get_lock_parent_ip() __always_inline
    
    commit ea65b41807a26495ff2a73dd8b1bab2751940887 upstream.
    
    If the compiler decides not to inline this function then preemption
    tracing will always show an IP inside the preemption disabling path and
    never the function actually calling preempt_{enable,disable}.
    
    Link: https://lore.kernel.org/linux-trace-kernel/20230327173647.1690849-1-john@metanate.com
    
    Cc: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Cc: stable@vger.kernel.org
    Fixes: f904f58263e1d ("sched/debug: Fix preempt_disable_ip recording for preempt_disable()")
    Signed-off-by: John Keeping <john@metanate.com>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a007b7dc19de0a51bdcd68f230491235a00eb416
Author: Kan Liang <kan.liang@linux.intel.com>
Date:   Wed Mar 22 13:24:49 2023 -0700

    perf/core: Fix the same task check in perf_event_set_output
    
    [ Upstream commit 24d3ae2f37d8bc3c14b31d353c5d27baf582b6a6 ]
    
    The same task check in perf_event_set_output has some potential issues
    for some usages.
    
    For the current perf code, there is a problem if using of
    perf_event_open() to have multiple samples getting into the same mmap’d
    memory when they are both attached to the same process.
    https://lore.kernel.org/all/92645262-D319-4068-9C44-2409EF44888E@gmail.com/
    Because the event->ctx is not ready when the perf_event_set_output() is
    invoked in the perf_event_open().
    
    Besides the above issue, before the commit bd2756811766 ("perf: Rewrite
    core context handling"), perf record can errors out when sampling with
    a hardware event and a software event as below.
     $ perf record -e cycles,dummy --per-thread ls
     failed to mmap with 22 (Invalid argument)
    That's because that prior to the commit a hardware event and a software
    event are from different task context.
    
    The problem should be a long time issue since commit c3f00c70276d
    ("perk: Separate find_get_context() from event initialization").
    
    The task struct is stored in the event->hw.target for each per-thread
    event. It is a more reliable way to determine whether two events are
    attached to the same task.
    
    The event->hw.target was also introduced several years ago by the
    commit 50f16a8bf9d7 ("perf: Remove type specific target pointers"). It
    can not only be used to fix the issue with the current code, but also
    back port to fix the issues with an older kernel.
    
    Note: The event->hw.target was introduced later than commit
    c3f00c70276d. The patch may cannot be applied between the commit
    c3f00c70276d and commit 50f16a8bf9d7. Anybody that wants to back-port
    this at that period may have to find other solutions.
    
    Fixes: c3f00c70276d ("perf: Separate find_get_context() from event initialization")
    Signed-off-by: Kan Liang <kan.liang@linux.intel.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Zhengjun Xing <zhengjun.xing@linux.intel.com>
    Link: https://lkml.kernel.org/r/20230322202449.512091-1-kan.liang@linux.intel.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8417eb9aaf1e022cf1cc112fcb89b62a3d426cea
Author: Thiago Rafael Becker <tbecker@redhat.com>
Date:   Wed Apr 5 10:16:48 2023 -0300

    cifs: sanitize paths in cifs_update_super_prepath.
    
    [ Upstream commit d19342c6609b67f2ba83b9eccca2777e3687f625 ]
    
    After a server reboot, clients are failing to move files with ENOENT.
    This is caused by DFS referrals containing multiple separators, which
    the server move call doesn't recognize.
    
    v1: Initial patch.
    v2: Move prototype to header.
    
    Link: https://bugzilla.redhat.com/show_bug.cgi?id=2182472
    Fixes: a31080899d5f ("cifs: sanitize multiple delimiters in prepath")
    Actually-Fixes: 24e0a1eff9e2 ("cifs: switch to new mount api")
    Reviewed-by: Paulo Alcantara (SUSE) <pc@manguebit.com>
    Signed-off-by: Thiago Rafael Becker <tbecker@redhat.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit df23c702d11ca281dffe7ca8b9e5278f8d1132aa
Author: Steve French <stfrench@microsoft.com>
Date:   Thu Mar 23 15:10:26 2023 -0500

    smb3: lower default deferred close timeout to address perf regression
    
    [ Upstream commit 7e0e76d99079be13c9961dde7c93b2d1ee665af4 ]
    
    Performance tests with large number of threads noted that the change
    of the default closetimeo (deferred close timeout between when
    close is done by application and when client has to send the close
    to the server), to 5 seconds from 1 second, significantly degraded
    perf in some cases like this (in the filebench example reported,
    the stats show close requests on the wire taking twice as long,
    and 50% regression in filebench perf). This is stil configurable
    via mount parm closetimeo, but to be safe, decrease default back
    to its previous value of 1 second.
    
    Reported-by: Yin Fengwei <fengwei.yin@intel.com>
    Reported-by: kernel test robot <yujie.liu@intel.com>
    Link: https://lore.kernel.org/lkml/997614df-10d4-af53-9571-edec36b0e2f3@intel.com/
    Fixes: 5efdd9122eff ("smb3: allow deferred close timeout to be configurable")
    Cc: stable@vger.kernel.org # 6.0+
    Tested-by: Yin Fengwei <fengwei.yin@intel.com>
    Reviewed-by: Paulo Alcantara (SUSE) <pc@manguebit.com>
    Reviewed-by: Shyam Prasad N <sprasad@microsoft.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Stable-dep-of: d19342c6609b ("cifs: sanitize paths in cifs_update_super_prepath.")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1d9cad9c5873097ea141ffc5da1e7921ce765aa8
Author: Steve French <stfrench@microsoft.com>
Date:   Thu Aug 11 00:53:00 2022 -0500

    smb3: allow deferred close timeout to be configurable
    
    [ Upstream commit 5efdd9122eff772eae2feae9f0fc0ec02d4846a3 ]
    
    Deferred close can be a very useful feature for allowing
    caching data for read, and for minimizing the number of
    reopens needed for a file that is repeatedly opened and
    close but there are workloads where its default (1 second,
    similar to actimeo/acregmax) is much too small.
    
    Allow the user to configure the amount of time we can
    defer sending the final smb3 close when we have a
    handle lease on the file (rather than forcing it to depend
    on value of actimeo which is often unrelated, and less safe).
    
    Adds new mount parameter "closetimeo=" which is the maximum
    number of seconds we can wait before sending an SMB3
    close when we have a handle lease for it.  Default value
    also is set to slightly larger at 5 seconds (although some
    other clients use larger default this should still help).
    
    Suggested-by: Bharath SM <bharathsm@microsoft.com>
    Reviewed-by: Bharath SM <bharathsm@microsoft.com>
    Reviewed-by: Shyam Prasad N <sprasad@microsoft.com>
    Reviewed-by: Paulo Alcantara (SUSE) <pc@cjr.nz>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Stable-dep-of: d19342c6609b ("cifs: sanitize paths in cifs_update_super_prepath.")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5e5c5f472972c4bc9430adc08b36763a0fa5b9f7
Author: Zhong Jinghua <zhongjinghua@huawei.com>
Date:   Wed Mar 29 15:17:39 2023 +0800

    scsi: iscsi_tcp: Check that sock is valid before iscsi_set_param()
    
    [ Upstream commit 48b19b79cfa37b1e50da3b5a8af529f994c08901 ]
    
    The validity of sock should be checked before assignment to avoid incorrect
    values. Commit 57569c37f0ad ("scsi: iscsi: iscsi_tcp: Fix null-ptr-deref
    while calling getpeername()") introduced this change which may lead to
    inconsistent values of tcp_sw_conn->sendpage and conn->datadgst_en.
    
    Fix the issue by moving the position of the assignment.
    
    Fixes: 57569c37f0ad ("scsi: iscsi: iscsi_tcp: Fix null-ptr-deref while calling getpeername()")
    Signed-off-by: Zhong Jinghua <zhongjinghua@huawei.com>
    Link: https://lore.kernel.org/r/20230329071739.2175268-1-zhongjinghua@huaweicloud.com
    Reviewed-by: Mike Christie <michael.christie@oracle.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ae73c4dd48f2c79d515d509a0cbe9efb0a197f44
Author: Li Zetao <lizetao1@huawei.com>
Date:   Sat Mar 25 11:00:04 2023 +0000

    scsi: qla2xxx: Fix memory leak in qla2x00_probe_one()
    
    [ Upstream commit 85ade4010e13ef152ea925c74d94253db92e5428 ]
    
    There is a memory leak reported by kmemleak:
    
      unreferenced object 0xffffc900003f0000 (size 12288):
        comm "modprobe", pid 19117, jiffies 4299751452 (age 42490.264s)
        hex dump (first 32 bytes):
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
          00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
        backtrace:
          [<00000000629261a8>] __vmalloc_node_range+0xe56/0x1110
          [<0000000001906886>] __vmalloc_node+0xbd/0x150
          [<000000005bb4dc34>] vmalloc+0x25/0x30
          [<00000000a2dc1194>] qla2x00_create_host+0x7a0/0xe30 [qla2xxx]
          [<0000000062b14b47>] qla2x00_probe_one+0x2eb8/0xd160 [qla2xxx]
          [<00000000641ccc04>] local_pci_probe+0xeb/0x1a0
    
    The root cause is traced to an error-handling path in qla2x00_probe_one()
    when the adapter "base_vha" initialize failed. The fab_scan_rp "scan.l" is
    used to record the port information and it is allocated in
    qla2x00_create_host(). However, it is not released in the error handling
    path "probe_failed".
    
    Fix this by freeing the memory of "scan.l" when an error occurs in the
    adapter initialization process.
    
    Fixes: a4239945b8ad ("scsi: qla2xxx: Add switch command to simplify fabric discovery")
    Signed-off-by: Li Zetao <lizetao1@huawei.com>
    Link: https://lore.kernel.org/r/20230325110004.363898-1-lizetao1@huawei.com
    Reviewed-by: Himanshu Madhani <himanshu.madhani@oracle.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c8c17991dab08926272606ad2628b05f86b37092
Author: Nuno Sá <nuno.sa@analog.com>
Date:   Fri Jan 20 13:46:45 2023 +0100

    iio: adc: ad7791: fix IRQ flags
    
    [ Upstream commit 0c6ef985a1fd8a74dcb5cad941ddcadd55cb8697 ]
    
    The interrupt is triggered on the falling edge rather than being a level
    low interrupt.
    
    Fixes: da4d3d6bb9f6 ("iio: adc: ad-sigma-delta: Allow custom IRQ flags")
    Signed-off-by: Nuno Sá <nuno.sa@analog.com>
    Link: https://lore.kernel.org/r/20230120124645.819910-1-nuno.sa@analog.com
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bc61cce6a658d844920371bf7f5970adaf78a4d0
Author: Steve Clevenger <scclevenger@os.amperecomputing.com>
Date:   Mon Feb 27 16:54:32 2023 -0700

    coresight-etm4: Fix for() loop drvdata->nr_addr_cmp range bug
    
    commit bf84937e882009075f57fd213836256fc65d96bc upstream.
    
    In etm4_enable_hw, fix for() loop range to represent address comparator pairs.
    
    Fixes: 2e1cdfe184b5 ("coresight-etm4x: Adding CoreSight ETM4x driver")
    Cc: stable@vger.kernel.org
    Signed-off-by: Steve Clevenger <scclevenger@os.amperecomputing.com>
    Reviewed-by: James Clark <james.clark@arm.com>
    Signed-off-by: Suzuki K Poulose <suzuki.poulose@arm.com>
    Link: https://lore.kernel.org/r/4a4ee61ce8ef402615a4528b21a051de3444fb7b.1677540079.git.scclevenger@os.amperecomputing.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 97302eb6ca48b7bbb1a19f7c92e963684e65dd47
Author: Suzuki K Poulose <suzuki.poulose@arm.com>
Date:   Tue Mar 21 10:45:30 2023 +0000

    coresight: etm4x: Do not access TRCIDR1 for identification
    
    commit 735e7b30a53a1679c050cddb73f5e5316105d2e3 upstream.
    
    CoreSight ETM4x architecture clearly provides ways to identify a device
    via registers in the "Management" class, TRCDEVARCH and TRCDEVTYPE. These
    registers can be accessed without the Trace domain being powered on.
    We additionally added TRCIDR1 as fallback in order to cover for any
    ETMs that may not have implemented TRCDEVARCH. So far, nobody has
    reported hitting a WARNING we placed to catch such systems.
    
    Also, more importantly it is problematic to access TRCIDR1, which is a
    "Trace" register via MMIO access, without clearing the OSLK. But we cannot
    mess with the OSLK until we know for sure that this is an ETMv4 device.
    Thus, this kind of creates a chicken and egg problem unnecessarily for
    systems "which are compliant" to the ETMv4 architecture.
    
    Let us remove the TRCIDR1 fall back check and rely only on TRCDEVARCH.
    
    Fixes: 8b94db1edaee ("coresight: etm4x: Use TRCDEVARCH for component discovery")
    Cc: stable@vger.kernel.org
    Reported-by: Steve Clevenger <scclevenger@os.amperecomputing.com>
    Link: https://lore.kernel.org/all/143540e5623d4c7393d24833f2b80600d8d745d2.1677881753.git.scclevenger@os.amperecomputing.com/
    Cc: Mike Leach <mike.leach@linaro.org>
    Cc: James Clark <james.clark@arm.com>
    Reviewed-by: Mike Leach <mike.leach@linaro.org>
    Reviewed-by: Anshuman Khandual <anshuman.khandual@arm.com>
    Signed-off-by: Suzuki K Poulose <suzuki.poulose@arm.com>
    Link: https://lore.kernel.org/r/20230321104530.1547136-1-suzuki.poulose@arm.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fd23e9bbfccc18fc2548c1d4e93d2861a95c6fb2
Author: Jeremy Soller <jeremy@system76.com>
Date:   Fri Mar 31 10:23:17 2023 -0600

    ALSA: hda/realtek: Add quirk for Clevo X370SNW
    
    commit 36d4d213c6d4fffae2645a601e8ae996de4c3645 upstream.
    
    Fixes speaker output and headset detection on Clevo X370SNW.
    
    Signed-off-by: Jeremy Soller <jeremy@system76.com>
    Signed-off-by: Tim Crawford <tcrawford@system76.com>
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/r/20230331162317.14992-1-tcrawford@system76.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f204f38212dc058bf6228f20ac8a56aa4f3f874e
Author: Marios Makassikis <mmakassikis@freebox.fr>
Date:   Thu Mar 16 14:40:43 2023 +0100

    ksmbd: do not call kvmalloc() with __GFP_NORETRY | __GFP_NO_WARN
    
    commit e416ea62a9166e6075a07a970cc5bf79255d2700 upstream.
    
    Commit 83dcedd5540d ("ksmbd: fix infinite loop in ksmbd_conn_handler_loop()"),
    changes GFP modifiers passed to kvmalloc(). This cause xfstests generic/551
    test to fail. We limit pdu length size according to connection status and
    maximum number of connections. In the rest, memory allocation of request
    is limited by credit management. so these flags are no longer needed.
    
    Fixes: 83dcedd5540d ("ksmbd: fix infinite loop in ksmbd_conn_handler_loop()")
    Cc: stable@vger.kernel.org
    Signed-off-by: Marios Makassikis <mmakassikis@freebox.fr>
    Acked-by: Namjae Jeon <linkinjeon@kernel.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 091b3e31275b6750cf8ba4914c32e2b9b07904ed
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Fri Mar 17 10:46:57 2023 +0100

    dt-bindings: serial: renesas,scif: Fix 4th IRQ for 4-IRQ SCIFs
    
    commit 7b21f329ae0ab6361c0aebfc094db95821490cd1 upstream.
    
    The fourth interrupt on SCIF variants with four interrupts (RZ/A1) is
    the Break interrupt, not the Transmit End interrupt (like on SCI(g)).
    Update the description and interrupt name to fix this.
    
    Fixes: 384d00fae8e51f8f ("dt-bindings: serial: sh-sci: Convert to json-schema")
    Cc: stable <stable@kernel.org>
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Acked-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Link: https://lore.kernel.org/r/719d1582e0ebbe3d674e3a48fc26295e1475a4c3.1679046394.git.geert+renesas@glider.be
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d540aea451ab5489777a8156560f1388449b3109
Author: Ryusuke Konishi <konishi.ryusuke@gmail.com>
Date:   Fri Mar 31 05:55:15 2023 +0900

    nilfs2: fix sysfs interface lifetime
    
    commit 42560f9c92cc43dce75dbf06cc0d840dced39b12 upstream.
    
    The current nilfs2 sysfs support has issues with the timing of creation
    and deletion of sysfs entries, potentially leading to null pointer
    dereferences, use-after-free, and lockdep warnings.
    
    Some of the sysfs attributes for nilfs2 per-filesystem instance refer to
    metadata file "cpfile", "sufile", or "dat", but
    nilfs_sysfs_create_device_group that creates those attributes is executed
    before the inodes for these metadata files are loaded, and
    nilfs_sysfs_delete_device_group which deletes these sysfs entries is
    called after releasing their metadata file inodes.
    
    Therefore, access to some of these sysfs attributes may occur outside of
    the lifetime of these metadata files, resulting in inode NULL pointer
    dereferences or use-after-free.
    
    In addition, the call to nilfs_sysfs_create_device_group() is made during
    the locking period of the semaphore "ns_sem" of nilfs object, so the
    shrinker call caused by the memory allocation for the sysfs entries, may
    derive lock dependencies "ns_sem" -> (shrinker) -> "locks acquired in
    nilfs_evict_inode()".
    
    Since nilfs2 may acquire "ns_sem" deep in the call stack holding other
    locks via its error handler __nilfs_error(), this causes lockdep to report
    circular locking.  This is a false positive and no circular locking
    actually occurs as no inodes exist yet when
    nilfs_sysfs_create_device_group() is called.  Fortunately, the lockdep
    warnings can be resolved by simply moving the call to
    nilfs_sysfs_create_device_group() out of "ns_sem".
    
    This fixes these sysfs issues by revising where the device's sysfs
    interface is created/deleted and keeping its lifetime within the lifetime
    of the metadata files above.
    
    Link: https://lkml.kernel.org/r/20230330205515.6167-1-konishi.ryusuke@gmail.com
    Fixes: dd70edbde262 ("nilfs2: integrate sysfs support into driver")
    Signed-off-by: Ryusuke Konishi <konishi.ryusuke@gmail.com>
    Reported-by: syzbot+979fa7f9c0d086fdc282@syzkaller.appspotmail.com
      Link: https://lkml.kernel.org/r/0000000000003414b505f7885f7e@google.com
    Reported-by: syzbot+5b7d542076d9bddc3c6a@syzkaller.appspotmail.com
      Link: https://lkml.kernel.org/r/0000000000006ac86605f5f44eb9@google.com
    Cc: Viacheslav Dubeyko <slava@dubeyko.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 92684e02654c91a61a0b0561433b710bcece19fe
Author: Ryusuke Konishi <konishi.ryusuke@gmail.com>
Date:   Tue Mar 28 02:53:18 2023 +0900

    nilfs2: fix potential UAF of struct nilfs_sc_info in nilfs_segctor_thread()
    
    commit 6be49d100c22ffea3287a4b19d7639d259888e33 upstream.
    
    The finalization of nilfs_segctor_thread() can race with
    nilfs_segctor_kill_thread() which terminates that thread, potentially
    causing a use-after-free BUG as KASAN detected.
    
    At the end of nilfs_segctor_thread(), it assigns NULL to "sc_task" member
    of "struct nilfs_sc_info" to indicate the thread has finished, and then
    notifies nilfs_segctor_kill_thread() of this using waitqueue
    "sc_wait_task" on the struct nilfs_sc_info.
    
    However, here, immediately after the NULL assignment to "sc_task", it is
    possible that nilfs_segctor_kill_thread() will detect it and return to
    continue the deallocation, freeing the nilfs_sc_info structure before the
    thread does the notification.
    
    This fixes the issue by protecting the NULL assignment to "sc_task" and
    its notification, with spinlock "sc_state_lock" of the struct
    nilfs_sc_info.  Since nilfs_segctor_kill_thread() does a final check to
    see if "sc_task" is NULL with "sc_state_lock" locked, this can eliminate
    the race.
    
    Link: https://lkml.kernel.org/r/20230327175318.8060-1-konishi.ryusuke@gmail.com
    Reported-by: syzbot+b08ebcc22f8f3e6be43a@syzkaller.appspotmail.com
    Link: https://lkml.kernel.org/r/00000000000000660d05f7dfa877@google.com
    Signed-off-by: Ryusuke Konishi <konishi.ryusuke@gmail.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ba3a88b444cd6e99029d9a80da2e88bcd8362300
Author: Sherry Sun <sherry.sun@nxp.com>
Date:   Thu Mar 23 13:44:15 2023 +0800

    tty: serial: fsl_lpuart: avoid checking for transfer complete when UARTCTRL_SBK is asserted in lpuart32_tx_empty
    
    commit 9425914f3de6febbd6250395f56c8279676d9c3c upstream.
    
    According to LPUART RM, Transmission Complete Flag becomes 0 if queuing
    a break character by writing 1 to CTRL[SBK], so here need to avoid
    checking for transmission complete when UARTCTRL_SBK is asserted,
    otherwise the lpuart32_tx_empty may never get TIOCSER_TEMT.
    
    Commit 2411fd94ceaa("tty: serial: fsl_lpuart: skip waiting for
    transmission complete when UARTCTRL_SBK is asserted") only fix it in
    lpuart32_set_termios(), here also fix it in lpuart32_tx_empty().
    
    Fixes: 380c966c093e ("tty: serial: fsl_lpuart: add 32-bit register interface support")
    Cc: stable <stable@kernel.org>
    Signed-off-by: Sherry Sun <sherry.sun@nxp.com>
    Link: https://lore.kernel.org/r/20230323054415.20363-1-sherry.sun@nxp.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ad142624ccc3c4455ea3551e6b7ae38ac4f6ce90
Author: Biju Das <biju.das.jz@bp.renesas.com>
Date:   Tue Mar 21 11:47:50 2023 +0000

    tty: serial: sh-sci: Fix Rx on RZ/G2L SCI
    
    commit f92ed0cd9328aed918ebb0ebb64d259eccbcc6e7 upstream.
    
    SCI IP on RZ/G2L alike SoCs do not need regshift compared to other SCI
    IPs on the SH platform. Currently, it does regshift and configuring Rx
    wrongly. Drop adding regshift for RZ/G2L alike SoCs.
    
    Fixes: dfc80387aefb ("serial: sh-sci: Compute the regshift value for SCI ports")
    Cc: stable@vger.kernel.org
    Signed-off-by: Biju Das <biju.das.jz@bp.renesas.com>
    Link: https://lore.kernel.org/r/20230321114753.75038-3-biju.das.jz@bp.renesas.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1184bd5c5ee4440eea63f632a77326ff00e2e2e3
Author: Biju Das <biju.das.jz@bp.renesas.com>
Date:   Fri Mar 17 15:04:03 2023 +0000

    tty: serial: sh-sci: Fix transmit end interrupt handler
    
    commit b43a18647f03c87e77d50d6fe74904b61b96323e upstream.
    
    The fourth interrupt on SCI port is transmit end interrupt compared to
    the break interrupt on other port types. So, shuffle the interrupts to fix
    the transmit end interrupt handler.
    
    Fixes: e1d0be616186 ("sh-sci: Add h8300 SCI")
    Cc: stable <stable@kernel.org>
    Suggested-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Biju Das <biju.das.jz@bp.renesas.com>
    Link: https://lore.kernel.org/r/20230317150403.154094-1-biju.das.jz@bp.renesas.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1f49173be32d19176bc51850080482a62b9ab9ce
Author: Kai-Heng Feng <kai.heng.feng@canonical.com>
Date:   Thu Feb 23 10:00:59 2023 +0800

    iio: light: cm32181: Unregister second I2C client if present
    
    commit 099cc90a5a62e68b2fe3a42da011ab929b98bf73 upstream.
    
    If a second dummy client that talks to the actual I2C address was
    created in probe(), there should be a proper cleanup on driver and
    device removal to avoid leakage.
    
    So unregister the dummy client via another callback.
    
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Suggested-by: Hans de Goede <hdegoede@redhat.com>
    Fixes: c1e62062ff54 ("iio: light: cm32181: Handle CM3218 ACPI devices with 2 I2C resources")
    Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=2152281
    Signed-off-by: Kai-Heng Feng <kai.heng.feng@canonical.com>
    Link: https://lore.kernel.org/r/20230223020059.2013993-1-kai.heng.feng@canonical.com
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 77593b4e963c12622cb0c99ab5645395f249290e
Author: William Breathitt Gray <william.gray@linaro.org>
Date:   Fri Mar 10 19:22:48 2023 -0500

    iio: dac: cio-dac: Fix max DAC write value check for 12-bit
    
    commit c3701185ee1973845db088d8b0fc443397ab0eb2 upstream.
    
    The CIO-DAC series of devices only supports DAC values up to 12-bit
    rather than 16-bit. Trying to write a 16-bit value results in only the
    lower 12 bits affecting the DAC output which is not what the user
    expects. Instead, adjust the DAC write value check to reject values
    larger than 12-bit so that they fail explicitly as invalid for the user.
    
    Fixes: 3b8df5fd526e ("iio: Add IIO support for the Measurement Computing CIO-DAC family")
    Cc: stable@vger.kernel.org
    Signed-off-by: William Breathitt Gray <william.gray@linaro.org>
    Link: https://lore.kernel.org/r/20230311002248.8548-1-william.gray@linaro.org
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 73742a446e086b987e3bc00c7c71c851ae5101a3
Author: Lars-Peter Clausen <lars@metafoo.de>
Date:   Sun Mar 12 14:09:33 2023 -0700

    iio: adc: ti-ads7950: Set `can_sleep` flag for GPIO chip
    
    commit 363c7dc72f79edd55bf1c4380e0fbf7f1bbc2c86 upstream.
    
    The ads7950 uses a mutex as well as SPI transfers in its GPIO callbacks.
    This means these callbacks can sleep and the `can_sleep` flag should be
    set.
    
    Having the flag set will make sure that warnings are generated when calling
    any of the callbacks from a potentially non-sleeping context.
    
    Fixes: c97dce792dc8 ("iio: adc: ti-ads7950: add GPIO support")
    Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
    Acked-by: David Lechner <david@lechnology.com>
    Link: https://lore.kernel.org/r/20230312210933.2275376-1-lars@metafoo.de
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7a1e21d26104ec6bf651f5c582fc029960a531f6
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Tue Jan 31 10:46:11 2023 +0100

    iio: adis16480: select CONFIG_CRC32
    
    commit d9b540ee461cca7edca0dd2c2a42625c6b9ffb8f upstream.
    
    In rare randconfig builds, the missing CRC32 helper causes
    a link error:
    
    ld.lld: error: undefined symbol: crc32_le
    >>> referenced by usercopy_64.c
    >>>               vmlinux.o:(adis16480_trigger_handler)
    
    Fixes: 941f130881fa ("iio: adis16480: support burst read function")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Reviewed-by: Nuno Sá <nuno.sa@analog.com>
    Link: https://lore.kernel.org/r/20230131094616.130238-1-arnd@kernel.org
    Cc: <Stable@vger.kernel.org>
    Signed-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4d3841fe16c412ecae87d61d9160a25677454c9d
Author: Bjørn Mork <bjorn@mork.no>
Date:   Tue Mar 28 20:41:31 2023 +0200

    USB: serial: option: add Quectel RM500U-CN modem
    
    commit 7708a3858e69db91a8b69487994f33b96d20192a upstream.
    
    This modem supports several modes with a class network function
    and a number of serial functions, all using ff/00/00
    
    The device ID is the same in all modes.
    
    RNDIS mode
    ----------
    T:  Bus=01 Lev=01 Prnt=01 Port=00 Cnt=01 Dev#=  2 Spd=480  MxCh= 0
    D:  Ver= 2.10 Cls=00(>ifc ) Sub=00 Prot=00 MxPS=64 #Cfgs=  1
    P:  Vendor=2c7c ProdID=0900 Rev= 4.04
    S:  Manufacturer=Quectel
    S:  Product=RM500U-CN
    S:  SerialNumber=0123456789ABCDEF
    C:* #Ifs= 7 Cfg#= 1 Atr=c0 MxPwr=500mA
    A:  FirstIf#= 0 IfCount= 2 Cls=e0(wlcon) Sub=01 Prot=03
    I:* If#= 0 Alt= 0 #EPs= 1 Cls=e0(wlcon) Sub=01 Prot=03 Driver=rndis_host
    E:  Ad=82(I) Atr=03(Int.) MxPS=   8 Ivl=32ms
    I:* If#= 1 Alt= 0 #EPs= 2 Cls=0a(data ) Sub=00 Prot=00 Driver=rndis_host
    E:  Ad=81(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=01(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 2 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=83(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=02(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 3 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=84(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=03(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 4 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=85(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=04(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 5 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=86(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=05(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 6 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=87(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=06(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    
    ECM mode
    --------
    T:  Bus=01 Lev=01 Prnt=01 Port=00 Cnt=01 Dev#=  2 Spd=480  MxCh= 0
    D:  Ver= 2.10 Cls=00(>ifc ) Sub=00 Prot=00 MxPS=64 #Cfgs=  1
    P:  Vendor=2c7c ProdID=0900 Rev= 4.04
    S:  Manufacturer=Quectel
    S:  Product=RM500U-CN
    S:  SerialNumber=0123456789ABCDEF
    C:* #Ifs= 7 Cfg#= 1 Atr=c0 MxPwr=500mA
    A:  FirstIf#= 0 IfCount= 2 Cls=02(comm.) Sub=06 Prot=00
    I:* If#= 0 Alt= 0 #EPs= 1 Cls=02(comm.) Sub=06 Prot=00 Driver=cdc_ether
    E:  Ad=82(I) Atr=03(Int.) MxPS=  16 Ivl=32ms
    I:  If#= 1 Alt= 0 #EPs= 0 Cls=0a(data ) Sub=00 Prot=00 Driver=cdc_ether
    I:* If#= 1 Alt= 1 #EPs= 2 Cls=0a(data ) Sub=00 Prot=00 Driver=cdc_ether
    E:  Ad=81(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=01(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 2 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=83(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=02(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 3 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=84(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=03(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 4 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=85(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=04(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 5 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=86(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=05(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 6 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=87(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=06(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    
    NCM mode
    --------
    T:  Bus=01 Lev=01 Prnt=01 Port=00 Cnt=01 Dev#=  5 Spd=480  MxCh= 0
    D:  Ver= 2.10 Cls=00(>ifc ) Sub=00 Prot=00 MxPS=64 #Cfgs=  1
    P:  Vendor=2c7c ProdID=0900 Rev= 4.04
    S:  Manufacturer=Quectel
    S:  Product=RM500U-CN
    S:  SerialNumber=0123456789ABCDEF
    C:* #Ifs= 7 Cfg#= 1 Atr=c0 MxPwr=500mA
    A:  FirstIf#= 0 IfCount= 2 Cls=02(comm.) Sub=0d Prot=00
    I:* If#= 0 Alt= 0 #EPs= 1 Cls=02(comm.) Sub=0d Prot=00 Driver=cdc_ncm
    E:  Ad=82(I) Atr=03(Int.) MxPS=  16 Ivl=32ms
    I:  If#= 1 Alt= 0 #EPs= 0 Cls=0a(data ) Sub=00 Prot=01 Driver=cdc_ncm
    I:* If#= 1 Alt= 1 #EPs= 2 Cls=0a(data ) Sub=00 Prot=01 Driver=cdc_ncm
    E:  Ad=81(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=01(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 2 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=83(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=02(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 3 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=84(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=03(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 4 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=85(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=04(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 5 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=86(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=05(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    I:* If#= 6 Alt= 0 #EPs= 2 Cls=ff(vend.) Sub=00 Prot=00 Driver=option
    E:  Ad=87(I) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    E:  Ad=06(O) Atr=02(Bulk) MxPS= 512 Ivl=0ms
    
    Reported-by: Andrew Green <askgreen@gmail.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Bjørn Mork <bjorn@mork.no>
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7151d2af065668855bcac0bdffe346b55d43d0ad
Author: Enrico Sau <enrico.sau@gmail.com>
Date:   Tue Mar 14 10:00:59 2023 +0100

    USB: serial: option: add Telit FE990 compositions
    
    commit 773e8e7d07b753474b2ccd605ff092faaa9e65b9 upstream.
    
    Add the following Telit FE990 compositions:
    
    0x1080: tty, adb, rmnet, tty, tty, tty, tty
    0x1081: tty, adb, mbim, tty, tty, tty, tty
    0x1082: rndis, tty, adb, tty, tty, tty, tty
    0x1083: tty, adb, ecm, tty, tty, tty, tty
    
    Signed-off-by: Enrico Sau <enrico.sau@gmail.com>
    Link: https://lore.kernel.org/r/20230314090059.77876-1-enrico.sau@gmail.com
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e1aa1c1bc51f3bb45317d2ed58074e497c85f238
Author: RD Babiera <rdbabiera@google.com>
Date:   Wed Mar 29 21:51:59 2023 +0000

    usb: typec: altmodes/displayport: Fix configure initial pin assignment
    
    commit eddebe39602efe631b83ff8d03f26eba12cfd760 upstream.
    
    While determining the initial pin assignment to be sent in the configure
    message, using the DP_PIN_ASSIGN_DP_ONLY_MASK mask causes the DFP_U to
    send both Pin Assignment C and E when both are supported by the DFP_U and
    UFP_U. The spec (Table 5-7 DFP_U Pin Assignment Selection Mandates,
    VESA DisplayPort Alt Mode Standard v2.0) indicates that the DFP_U never
    selects Pin Assignment E when Pin Assignment C is offered.
    
    Update the DP_PIN_ASSIGN_DP_ONLY_MASK conditional to intially select only
    Pin Assignment C if it is available.
    
    Fixes: 0e3bb7d6894d ("usb: typec: Add driver for DisplayPort alternate mode")
    Cc: stable@vger.kernel.org
    Signed-off-by: RD Babiera <rdbabiera@google.com>
    Reviewed-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Link: https://lore.kernel.org/r/20230329215159.2046932-1-rdbabiera@google.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9cd66aa2fa044cb1a92fc5cc6aff945813e48263
Author: Kees Jan Koster <kjkoster@kjkoster.org>
Date:   Sat Feb 18 15:18:30 2023 +0100

    USB: serial: cp210x: add Silicon Labs IFS-USB-DATACABLE IDs
    
    commit 71f8afa2b66e356f435b6141b4a9ccf953e18356 upstream.
    
    The Silicon Labs IFS-USB-DATACABLE is used in conjunction with for example
    the Quint UPSes. It is used to enable Modbus communication with the UPS to
    query configuration, power and battery status.
    
    Signed-off-by: Kees Jan Koster <kjkoster@kjkoster.org>
    Cc: stable@vger.kernel.org
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f8d59e2a36acfe52e2a298bd10cb886f6f1e307a
Author: Heikki Krogerus <heikki.krogerus@linux.intel.com>
Date:   Thu Mar 30 18:02:24 2023 +0300

    usb: dwc3: pci: add support for the Intel Meteor Lake-S
    
    commit ec799c8a92e0be91e0940cc739a27f483242df65 upstream.
    
    This patch adds the necessary PCI ID for Intel Meteor Lake-S
    devices.
    
    Signed-off-by: Heikki Krogerus <heikki.krogerus@linux.intel.com>
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20230330150224.89316-1-heikki.krogerus@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 11453332fa40b5f1f23ebb0ad3a9877cd69dc693
Author: Pawel Laszczak <pawell@cadence.com>
Date:   Fri Mar 31 05:06:00 2023 -0400

    usb: cdnsp: Fixes error: uninitialized symbol 'len'
    
    commit 1edf48991a783d00a3a18dc0d27c88139e4030a2 upstream.
    
    The patch 5bc38d33a5a1: "usb: cdnsp: Fixes issue with redundant
    Status Stage" leads to the following Smatch static checker warning:
    
      drivers/usb/cdns3/cdnsp-ep0.c:470 cdnsp_setup_analyze()
      error: uninitialized symbol 'len'.
    
    cc: <stable@vger.kernel.org>
    Fixes: 5bc38d33a5a1 ("usb: cdnsp: Fixes issue with redundant Status Stage")
    Signed-off-by: Pawel Laszczak <pawell@cadence.com>
    Link: https://lore.kernel.org/r/20230331090600.454674-1-pawell@cadence.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 83637720ea20fbe465a5998cecaa83326d3149a7
Author: D Scott Phillips <scott@os.amperecomputing.com>
Date:   Thu Mar 30 17:30:54 2023 +0300

    xhci: also avoid the XHCI_ZERO_64B_REGS quirk with a passthrough iommu
    
    commit ecaa4902439298f6b0e29f47424a86b310a9ff4f upstream.
    
    Previously the quirk was skipped when no iommu was present. The same
    rationale for skipping the quirk also applies in the iommu.passthrough=1
    case.
    
    Skip applying the XHCI_ZERO_64B_REGS quirk if the device's iommu domain is
    passthrough.
    
    Fixes: 12de0a35c996 ("xhci: Add quirk to zero 64bit registers on Renesas PCIe controllers")
    Cc: stable <stable@kernel.org>
    Signed-off-by: D Scott Phillips <scott@os.amperecomputing.com>
    Acked-by: Marc Zyngier <maz@kernel.org>
    Signed-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>
    Link: https://lore.kernel.org/r/20230330143056.1390020-2-mathias.nyman@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1122474b757a5dd8b2b50008a97f33cdb10dff6e
Author: Wayne Chang <waynec@nvidia.com>
Date:   Mon Mar 27 17:55:48 2023 +0800

    usb: xhci: tegra: fix sleep in atomic call
    
    commit 4c7f9d2e413dc06a157c4e5dccde84aaf4655eb3 upstream.
    
    When we set the dual-role port to Host mode, we observed the following
    splat:
    [  167.057718] BUG: sleeping function called from invalid context at
    include/linux/sched/mm.h:229
    [  167.057872] Workqueue: events tegra_xusb_usb_phy_work
    [  167.057954] Call trace:
    [  167.057962]  dump_backtrace+0x0/0x210
    [  167.057996]  show_stack+0x30/0x50
    [  167.058020]  dump_stack_lvl+0x64/0x84
    [  167.058065]  dump_stack+0x14/0x34
    [  167.058100]  __might_resched+0x144/0x180
    [  167.058140]  __might_sleep+0x64/0xd0
    [  167.058171]  slab_pre_alloc_hook.constprop.0+0xa8/0x110
    [  167.058202]  __kmalloc_track_caller+0x74/0x2b0
    [  167.058233]  kvasprintf+0xa4/0x190
    [  167.058261]  kasprintf+0x58/0x90
    [  167.058285]  tegra_xusb_find_port_node.isra.0+0x58/0xd0
    [  167.058334]  tegra_xusb_find_port+0x38/0xa0
    [  167.058380]  tegra_xusb_padctl_get_usb3_companion+0x38/0xd0
    [  167.058430]  tegra_xhci_id_notify+0x8c/0x1e0
    [  167.058473]  notifier_call_chain+0x88/0x100
    [  167.058506]  atomic_notifier_call_chain+0x44/0x70
    [  167.058537]  tegra_xusb_usb_phy_work+0x60/0xd0
    [  167.058581]  process_one_work+0x1dc/0x4c0
    [  167.058618]  worker_thread+0x54/0x410
    [  167.058650]  kthread+0x188/0x1b0
    [  167.058672]  ret_from_fork+0x10/0x20
    
    The function tegra_xusb_padctl_get_usb3_companion eventually calls
    tegra_xusb_find_port and this in turn calls kasprintf which might sleep
    and so cannot be called from an atomic context.
    
    Fix this by moving the call to tegra_xusb_padctl_get_usb3_companion to
    the tegra_xhci_id_work function where it is really needed.
    
    Fixes: f836e7843036 ("usb: xhci-tegra: Add OTG support")
    Cc: stable@vger.kernel.org
    Signed-off-by: Wayne Chang <waynec@nvidia.com>
    Signed-off-by: Haotien Hsu <haotienh@nvidia.com>
    Link: https://lore.kernel.org/r/20230327095548.1599470-1-haotienh@nvidia.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f5c5934580e7a313aa500e1b1469beab94107459
Author: Masahiro Yamada <masahiroy@kernel.org>
Date:   Sun Aug 28 11:39:50 2022 +0900

    kbuild: refactor single builds of *.ko
    
    [ Upstream commit f110e5a250e3c5db417e094b3dd86f1c135291ca ]
    
    Remove the potentially invalid modules.order instead of using
    the temporary file.
    
    Also, KBUILD_MODULES is don't care for single builds. No need to
    cancel it.
    
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Stable-dep-of: ed1f4ccfe947 ("clk: imx: imx8mp: add shared clk gate for usb suspend clk")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e62d179b9177dcf63916bfcfda089f1ff8207e91
Author: Shailend Chand <shailend@google.com>
Date:   Mon Apr 3 10:28:09 2023 -0700

    gve: Secure enough bytes in the first TX desc for all TCP pkts
    
    [ Upstream commit 3ce9345580974863c060fa32971537996a7b2d57 ]
    
    Non-GSO TCP packets whose SKBs' linear portion did not include the
    entire TCP header were not populating the first Tx descriptor with
    as many bytes as the vNIC expected. This change ensures that all
    TCP packets populate the first descriptor with the correct number of
    bytes.
    
    Fixes: 893ce44df565 ("gve: Add basic driver framework for Compute Engine Virtual NIC")
    Signed-off-by: Shailend Chand <shailend@google.com>
    Link: https://lore.kernel.org/r/20230403172809.2939306-1-shailend@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 40c6802d7daeb6e17a2a9d50dee213e56a6848bd
Author: Andy Roulin <aroulin@nvidia.com>
Date:   Mon Apr 3 14:20:53 2023 -0700

    ethtool: reset #lanes when lanes is omitted
    
    [ Upstream commit e847c7675e19ef344913724dc68f83df31ad6a17 ]
    
    If the number of lanes was forced and then subsequently the user
    omits this parameter, the ksettings->lanes is reset. The driver
    should then reset the number of lanes to the device's default
    for the specified speed.
    
    However, although the ksettings->lanes is set to 0, the mod variable
    is not set to true to indicate the driver and userspace should be
    notified of the changes.
    
    The consequence is that the same ethtool operation will produce
    different results based on the initial state.
    
    If the initial state is:
    $ ethtool swp1 | grep -A 3 'Speed: '
            Speed: 500000Mb/s
            Lanes: 2
            Duplex: Full
            Auto-negotiation: on
    
    then executing 'ethtool -s swp1 speed 50000 autoneg off' will yield:
    $ ethtool swp1 | grep -A 3 'Speed: '
            Speed: 500000Mb/s
            Lanes: 2
            Duplex: Full
            Auto-negotiation: off
    
    While if the initial state is:
    $ ethtool swp1 | grep -A 3 'Speed: '
            Speed: 500000Mb/s
            Lanes: 1
            Duplex: Full
            Auto-negotiation: off
    
    executing the same 'ethtool -s swp1 speed 50000 autoneg off' results in:
    $ ethtool swp1 | grep -A 3 'Speed: '
            Speed: 500000Mb/s
            Lanes: 1
            Duplex: Full
            Auto-negotiation: off
    
    This patch fixes this behavior. Omitting lanes will always results in
    the driver choosing the default lane width for the chosen speed. In this
    scenario, regardless of the initial state, the end state will be, e.g.,
    
    $ ethtool swp1 | grep -A 3 'Speed: '
            Speed: 500000Mb/s
            Lanes: 2
            Duplex: Full
            Auto-negotiation: off
    
    Fixes: 012ce4dd3102 ("ethtool: Extend link modes settings uAPI with lanes")
    Signed-off-by: Andy Roulin <aroulin@nvidia.com>
    Reviewed-by: Danielle Ratson <danieller@nvidia.com>
    Reviewed-by: Ido Schimmel <idosch@nvidia.com>
    Link: https://lore.kernel.org/r/ac238d6b-8726-8156-3810-6471291dbc7f@nvidia.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4eada1dabdfb13b7535bc16a265830660556f90b
Author: Lingyu Liu <lingyu.liu@intel.com>
Date:   Tue Mar 28 10:49:11 2023 +0000

    ice: Reset FDIR counter in FDIR init stage
    
    [ Upstream commit 83c911dc5e0e8e6eaa6431c06972a8f159bfe2fc ]
    
    Reset the FDIR counters when FDIR inits. Without this patch,
    when VF initializes or resets, all the FDIR counters are not
    cleaned, which may cause unexpected behaviors for future FDIR
    rule create (e.g., rule conflict).
    
    Fixes: 1f7ea1cd6a37 ("ice: Enable FDIR Configure for AVF")
    Signed-off-by: Junfeng Guo <junfeng.guo@intel.com>
    Signed-off-by: Lingyu Liu <lingyu.liu@intel.com>
    Tested-by: Rafal Romanowski <rafal.romanowski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 391d28c0e38c0e5b11a4240a2b4976cf63e87f45
Author: Simei Su <simei.su@intel.com>
Date:   Wed Mar 22 10:24:15 2023 +0800

    ice: fix wrong fallback logic for FDIR
    
    [ Upstream commit b4a01ace20f5c93c724abffc0a83ec84f514b98d ]
    
    When adding a FDIR filter, if ice_vc_fdir_set_irq_ctx returns failure,
    the inserted fdir entry will not be removed and if ice_vc_fdir_write_fltr
    returns failure, the fdir context info for irq handler will not be cleared
    which may lead to inconsistent or memory leak issue. This patch refines
    failure cases to resolve this issue.
    
    Fixes: 1f7ea1cd6a37 ("ice: Enable FDIR Configure for AVF")
    Signed-off-by: Simei Su <simei.su@intel.com>
    Tested-by: Rafal Romanowski <rafal.romanowski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e215928a510ca0b0fc3fef31b7b22e2c90b8d355
Author: Dai Ngo <dai.ngo@oracle.com>
Date:   Sat Apr 1 13:22:08 2023 -0700

    NFSD: callback request does not use correct credential for AUTH_SYS
    
    [ Upstream commit 7de82c2f36fb26aa78440bbf0efcf360b691d98b ]
    
    Currently callback request does not use the credential specified in
    CREATE_SESSION if the security flavor for the back channel is AUTH_SYS.
    
    Problem was discovered by pynfs 4.1 DELEG5 and DELEG7 test with error:
    DELEG5   st_delegation.testCBSecParms     : FAILURE
               expected callback with uid, gid == 17, 19, got 0, 0
    
    Signed-off-by: Dai Ngo <dai.ngo@oracle.com>
    Reviewed-by: Jeff Layton <jlayton@kernel.org>
    Fixes: 8276c902bbe9 ("SUNRPC: remove uid and gid from struct auth_cred")
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bbca64f2052ed6c3132ea15f29f92a1436388547
Author: Jeff Layton <jlayton@kernel.org>
Date:   Thu Mar 30 14:24:27 2023 -0400

    sunrpc: only free unix grouplist after RCU settles
    
    [ Upstream commit 5085e41f9e83a1bec51da1f20b54f2ec3a13a3fe ]
    
    While the unix_gid object is rcu-freed, the group_info list that it
    contains is not. Ensure that we only put the group list reference once
    we are really freeing the unix_gid object.
    
    Reported-by: Zhi Li <yieli@redhat.com>
    Link: https://bugzilla.redhat.com/show_bug.cgi?id=2183056
    Signed-off-by: Jeff Layton <jlayton@kernel.org>
    Fixes: fd5d2f78261b ("SUNRPC: Make server side AUTH_UNIX use lockless lookups")
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ca7c3b4ae03eab9c6369038ce08df7ea7a341fb4
Author: Corinna Vinschen <vinschen@redhat.com>
Date:   Mon Apr 3 14:11:20 2023 +0200

    net: stmmac: fix up RX flow hash indirection table when setting channels
    
    [ Upstream commit 218c597325f4faf7b7a6049233a30d7842b5b2dc ]
    
    stmmac_reinit_queues() fails to fix up the RX hash.  Even if the number
    of channels gets restricted, the output of `ethtool -x' indicates that
    all RX queues are used:
    
      $ ethtool -l enp0s29f2
      Channel parameters for enp0s29f2:
      Pre-set maximums:
      RX:           8
      TX:           8
      Other:                n/a
      Combined:     n/a
      Current hardware settings:
      RX:           8
      TX:           8
      Other:                n/a
      Combined:     n/a
      $ ethtool -x enp0s29f2
      RX flow hash indirection table for enp0s29f2 with 8 RX ring(s):
          0:      0     1     2     3     4     5     6     7
          8:      0     1     2     3     4     5     6     7
      [...]
      $ ethtool -L enp0s29f2 rx 3
      $ ethtool -x enp0s29f2
      RX flow hash indirection table for enp0s29f2 with 3 RX ring(s):
          0:      0     1     2     3     4     5     6     7
          8:      0     1     2     3     4     5     6     7
      [...]
    
    Fix this by setting the indirection table according to the number
    of specified queues.  The result is now as expected:
    
      $ ethtool -L enp0s29f2 rx 3
      $ ethtool -x enp0s29f2
      RX flow hash indirection table for enp0s29f2 with 3 RX ring(s):
          0:      0     1     2     0     1     2     0     1
          8:      2     0     1     2     0     1     2     0
      [...]
    
    Tested on Intel Elkhart Lake.
    
    Fixes: 0366f7e06a6b ("net: stmmac: add ethtool support for get/set channels")
    Signed-off-by: Corinna Vinschen <vinschen@redhat.com>
    Link: https://lore.kernel.org/r/20230403121120.489138-1-vinschen@redhat.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3a997c0d2341398851f1249b68b7e5dc1a664094
Author: Siddharth Vadapalli <s-vadapalli@ti.com>
Date:   Mon Apr 3 14:33:21 2023 +0530

    net: ethernet: ti: am65-cpsw: Fix mdio cleanup in probe
    
    [ Upstream commit c6b486fb33680ad5a3a6390ce693c835caaae3f7 ]
    
    In the am65_cpsw_nuss_probe() function's cleanup path, the call to
    of_platform_device_destroy() for the common->mdio_dev device is invoked
    unconditionally. It is possible that either the MDIO node is not present
    in the device-tree, or the MDIO node is disabled in the device-tree. In
    both these cases, the MDIO device is not created, resulting in a NULL
    pointer dereference when the of_platform_device_destroy() function is
    invoked on the common->mdio_dev device on the cleanup path.
    
    Fix this by ensuring that the common->mdio_dev device exists, before
    attempting to invoke of_platform_device_destroy().
    
    Fixes: a45cfcc69a25 ("net: ethernet: ti: am65-cpsw-nuss: use of_platform_device_create() for mdio")
    Signed-off-by: Siddharth Vadapalli <s-vadapalli@ti.com>
    Reviewed-by: Roger Quadros <rogerq@kernel.org>
    Link: https://lore.kernel.org/r/20230403090321.835877-1-s-vadapalli@ti.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0ae8cdf0153cc68b8189bb361e29eff3f16e8a04
Author: Dhruva Gole <d-gole@ti.com>
Date:   Mon Apr 3 12:54:43 2023 +0530

    gpio: davinci: Add irq chip flag to skip set wake
    
    [ Upstream commit 7b75c4703609a3ebaf67271813521bc0281e1ec1 ]
    
    Add the IRQCHIP_SKIP_SET_WAKE flag since there are no special IRQ Wake
    bits that can be set to enable wakeup IRQ.
    
    Fixes: 3d9edf09d452 ("[ARM] 4457/2: davinci: GPIO support")
    Signed-off-by: Dhruva Gole <d-gole@ti.com>
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Bartosz Golaszewski <bartosz.golaszewski@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1c19a42b2863b0b17c4e7c33d6b303f4119b93be
Author: Mark Pearson <mpearson-lenovo@squebb.ca>
Date:   Sun Apr 2 21:31:20 2023 -0400

    platform/x86: think-lmi: Clean up display of current_value on Thinkstation
    
    [ Upstream commit 7065655216d4d034d71164641f3bec0b189ad6fa ]
    
    On ThinkStations on retrieving the attribute value the BIOS appends the
    possible values to the string.
    Clean up the display in the current_value_show function so the options
    part is not displayed.
    
    Fixes: a40cd7ef22fb ("platform/x86: think-lmi: Add WMI interface support on Lenovo platforms")
    Reported by Mario Limoncello <Mario.Limonciello@amd.com>
    Link: https://github.com/fwupd/fwupd/issues/5077#issuecomment-1488730526
    Signed-off-by: Mark Pearson <mpearson-lenovo@squebb.ca>
    Link: https://lore.kernel.org/r/20230403013120.2105-2-mpearson-lenovo@squebb.ca
    Tested-by: Mario Limonciello <mario.limonciello@amd.com>
    Tested-by: Mirsad Goran Todorovac <mirsad.todorovac@alu.unizg.hr>
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cccdb30935c82be805d3362a15680b95d5cb3ee0
Author: Mark Pearson <mpearson-lenovo@squebb.ca>
Date:   Sun Apr 2 21:31:19 2023 -0400

    platform/x86: think-lmi: Fix memory leaks when parsing ThinkStation WMI strings
    
    [ Upstream commit e7d796fccdc8d17c2d21817ebe4c7bf5bbfe5433 ]
    
    My previous commit introduced a memory leak where the item allocated
    from tlmi_setting was not freed.
    This commit also renames it to avoid confusion with the similarly name
    variable in the same function.
    
    Fixes: 8a02d70679fc ("platform/x86: think-lmi: Add possible_values for ThinkStation")
    Reported-by: Mirsad Todorovac <mirsad.todorovac@alu.unizg.hr>
    Link: https://lore.kernel.org/lkml/df26ff45-8933-f2b3-25f4-6ee51ccda7d8@gmx.de/T/
    Signed-off-by: Mark Pearson <mpearson-lenovo@squebb.ca>
    Link: https://lore.kernel.org/r/20230403013120.2105-1-mpearson-lenovo@squebb.ca
    Tested-by: Mario Limonciello <mario.limonciello@amd.com>
    Tested-by: Mirsad Goran Todorovac <mirsad.todorovac@alu.unizg.hr>
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b9396d991abe8d1ac31a043274ab20b49f92c2e6
Author: Armin Wolf <W_Armin@gmx.de>
Date:   Fri Mar 31 23:33:19 2023 +0200

    platform/x86: think-lmi: Fix memory leak when showing current settings
    
    [ Upstream commit a3c4c053014585dcf20f4df954791b74d8a8afcd ]
    
    When retriving a item string with tlmi_setting(), the result has to be
    freed using kfree(). In current_value_show() however, malformed
    item strings are not freed, causing a memory leak.
    Fix this by eliminating the early return responsible for this.
    
    Reported-by: Mirsad Goran Todorovac <mirsad.todorovac@alu.unizg.hr>
    Link: https://lore.kernel.org/platform-driver-x86/01e920bc-5882-ba0c-dd15-868bf0eca0b8@alu.unizg.hr/T/#t
    Tested-by: Mirsad Goran Todorovac <mirsad.todorovac@alu.unizg.hr>
    Fixes: 0fdf10e5fc96 ("platform/x86: think-lmi: Split current_value to reflect only the value")
    Signed-off-by: Armin Wolf <W_Armin@gmx.de>
    Link: https://lore.kernel.org/r/20230331213319.41040-1-W_Armin@gmx.de
    Tested-by: Mario Limonciello <mario.limonciello@amd.com>
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d65ff2fe877c471aa6e79efa7bd8ff66e147c317
Author: Ziyang Xuan <william.xuanziyang@huawei.com>
Date:   Mon Apr 3 15:34:17 2023 +0800

    ipv6: Fix an uninit variable access bug in __ip6_make_skb()
    
    [ Upstream commit ea30388baebcce37fd594d425a65037ca35e59e8 ]
    
    Syzbot reported a bug as following:
    
    =====================================================
    BUG: KMSAN: uninit-value in arch_atomic64_inc arch/x86/include/asm/atomic64_64.h:88 [inline]
    BUG: KMSAN: uninit-value in arch_atomic_long_inc include/linux/atomic/atomic-long.h:161 [inline]
    BUG: KMSAN: uninit-value in atomic_long_inc include/linux/atomic/atomic-instrumented.h:1429 [inline]
    BUG: KMSAN: uninit-value in __ip6_make_skb+0x2f37/0x30f0 net/ipv6/ip6_output.c:1956
     arch_atomic64_inc arch/x86/include/asm/atomic64_64.h:88 [inline]
     arch_atomic_long_inc include/linux/atomic/atomic-long.h:161 [inline]
     atomic_long_inc include/linux/atomic/atomic-instrumented.h:1429 [inline]
     __ip6_make_skb+0x2f37/0x30f0 net/ipv6/ip6_output.c:1956
     ip6_finish_skb include/net/ipv6.h:1122 [inline]
     ip6_push_pending_frames+0x10e/0x550 net/ipv6/ip6_output.c:1987
     rawv6_push_pending_frames+0xb12/0xb90 net/ipv6/raw.c:579
     rawv6_sendmsg+0x297e/0x2e60 net/ipv6/raw.c:922
     inet_sendmsg+0x101/0x180 net/ipv4/af_inet.c:827
     sock_sendmsg_nosec net/socket.c:714 [inline]
     sock_sendmsg net/socket.c:734 [inline]
     ____sys_sendmsg+0xa8e/0xe70 net/socket.c:2476
     ___sys_sendmsg+0x2a1/0x3f0 net/socket.c:2530
     __sys_sendmsg net/socket.c:2559 [inline]
     __do_sys_sendmsg net/socket.c:2568 [inline]
     __se_sys_sendmsg net/socket.c:2566 [inline]
     __x64_sys_sendmsg+0x367/0x540 net/socket.c:2566
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x3d/0xb0 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    Uninit was created at:
     slab_post_alloc_hook mm/slab.h:766 [inline]
     slab_alloc_node mm/slub.c:3452 [inline]
     __kmem_cache_alloc_node+0x71f/0xce0 mm/slub.c:3491
     __do_kmalloc_node mm/slab_common.c:967 [inline]
     __kmalloc_node_track_caller+0x114/0x3b0 mm/slab_common.c:988
     kmalloc_reserve net/core/skbuff.c:492 [inline]
     __alloc_skb+0x3af/0x8f0 net/core/skbuff.c:565
     alloc_skb include/linux/skbuff.h:1270 [inline]
     __ip6_append_data+0x51c1/0x6bb0 net/ipv6/ip6_output.c:1684
     ip6_append_data+0x411/0x580 net/ipv6/ip6_output.c:1854
     rawv6_sendmsg+0x2882/0x2e60 net/ipv6/raw.c:915
     inet_sendmsg+0x101/0x180 net/ipv4/af_inet.c:827
     sock_sendmsg_nosec net/socket.c:714 [inline]
     sock_sendmsg net/socket.c:734 [inline]
     ____sys_sendmsg+0xa8e/0xe70 net/socket.c:2476
     ___sys_sendmsg+0x2a1/0x3f0 net/socket.c:2530
     __sys_sendmsg net/socket.c:2559 [inline]
     __do_sys_sendmsg net/socket.c:2568 [inline]
     __se_sys_sendmsg net/socket.c:2566 [inline]
     __x64_sys_sendmsg+0x367/0x540 net/socket.c:2566
     do_syscall_x64 arch/x86/entry/common.c:50 [inline]
     do_syscall_64+0x3d/0xb0 arch/x86/entry/common.c:80
     entry_SYSCALL_64_after_hwframe+0x63/0xcd
    
    It is because icmp6hdr does not in skb linear region under the scenario
    of SOCK_RAW socket. Access icmp6_hdr(skb)->icmp6_type directly will
    trigger the uninit variable access bug.
    
    Use a local variable icmp6_type to carry the correct value in different
    scenarios.
    
    Fixes: 14878f75abd5 ("[IPV6]: Add ICMPMsgStats MIB (RFC 4293) [rev 2]")
    Reported-by: syzbot+8257f4dcef79de670baf@syzkaller.appspotmail.com
    Link: https://syzkaller.appspot.com/bug?id=3d605ec1d0a7f2a269a1a6936ac7f2b85975ee9c
    Signed-off-by: Ziyang Xuan <william.xuanziyang@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 926c8299ac3d4e9a6f3c9ec3ae8d00b17956d667
Author: Sricharan Ramabadhran <quic_srichara@quicinc.com>
Date:   Mon Apr 3 12:28:51 2023 +0530

    net: qrtr: Do not do DEL_SERVER broadcast after DEL_CLIENT
    
    [ Upstream commit 839349d13905927d8a567ca4d21d88c82028e31d ]
    
    On the remote side, when QRTR socket is removed, af_qrtr will call
    qrtr_port_remove() which broadcasts the DEL_CLIENT packet to all neighbours
    including local NS. NS upon receiving the DEL_CLIENT packet, will remove
    the lookups associated with the node:port and broadcasts the DEL_SERVER
    packet.
    
    But on the host side, due to the arrival of the DEL_CLIENT packet, the NS
    would've already deleted the server belonging to that port. So when the
    remote's NS again broadcasts the DEL_SERVER for that port, it throws below
    error message on the host:
    
    "failed while handling packet from 2:-2"
    
    So fix this error by not broadcasting the DEL_SERVER packet when the
    DEL_CLIENT packet gets processed."
    
    Fixes: 0c2204a4ad71 ("net: qrtr: Migrate nameservice to kernel from userspace")
    Reviewed-by: Manivannan Sadhasivam <mani@kernel.org>
    Signed-off-by: Ram Kumar Dharuman <quic_ramd@quicinc.com>
    Signed-off-by: Sricharan Ramabadhran <quic_srichara@quicinc.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 667eb99cf7c15fe5b0ecefe75cf658e20ef20c9f
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sat Apr 1 19:09:57 2023 -0400

    sctp: check send stream number after wait_for_sndbuf
    
    [ Upstream commit 2584024b23552c00d95b50255e47bd18d306d31a ]
    
    This patch fixes a corner case where the asoc out stream count may change
    after wait_for_sndbuf.
    
    When the main thread in the client starts a connection, if its out stream
    count is set to N while the in stream count in the server is set to N - 2,
    another thread in the client keeps sending the msgs with stream number
    N - 1, and waits for sndbuf before processing INIT_ACK.
    
    However, after processing INIT_ACK, the out stream count in the client is
    shrunk to N - 2, the same to the in stream count in the server. The crash
    occurs when the thread waiting for sndbuf is awake and sends the msg in a
    non-existing stream(N - 1), the call trace is as below:
    
      KASAN: null-ptr-deref in range [0x0000000000000038-0x000000000000003f]
      Call Trace:
       <TASK>
       sctp_cmd_send_msg net/sctp/sm_sideeffect.c:1114 [inline]
       sctp_cmd_interpreter net/sctp/sm_sideeffect.c:1777 [inline]
       sctp_side_effects net/sctp/sm_sideeffect.c:1199 [inline]
       sctp_do_sm+0x197d/0x5310 net/sctp/sm_sideeffect.c:1170
       sctp_primitive_SEND+0x9f/0xc0 net/sctp/primitive.c:163
       sctp_sendmsg_to_asoc+0x10eb/0x1a30 net/sctp/socket.c:1868
       sctp_sendmsg+0x8d4/0x1d90 net/sctp/socket.c:2026
       inet_sendmsg+0x9d/0xe0 net/ipv4/af_inet.c:825
       sock_sendmsg_nosec net/socket.c:722 [inline]
       sock_sendmsg+0xde/0x190 net/socket.c:745
    
    The fix is to add an unlikely check for the send stream number after the
    thread wakes up from the wait_for_sndbuf.
    
    Fixes: 5bbbbe32a431 ("sctp: introduce stream scheduler foundations")
    Reported-by: syzbot+47c24ca20a2fa01f082e@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9692e16b5991e3a4ef701eaa0e13b028f95c3608
Author: Gustav Ekelund <gustaek@axis.com>
Date:   Fri Mar 31 10:40:13 2023 +0200

    net: dsa: mv88e6xxx: Reset mv88e6393x force WD event bit
    
    [ Upstream commit 089b91a0155c4de1209a07ff2a7dd299ff3ece47 ]
    
    The force watchdog event bit is not cleared during SW reset in the
    mv88e6393x switch. This is a different behavior compared to mv886390 which
    clears the force WD event bit as advertised. This causes a force WD event
    to be handled over and over again as the SW reset following the event never
    clears the force WD event bit.
    
    Explicitly clear the watchdog event register to 0 in irq_action when
    handling an event to prevent the switch from sending continuous interrupts.
    Marvell aren't aware of any other stuck bits apart from the force WD
    bit.
    
    Fixes: de776d0d316f ("net: dsa: mv88e6xxx: add support for mv88e6393x family"
    Signed-off-by: Gustav Ekelund <gustaek@axis.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5d1007e81fb6c58104cc9a01d4f54a6bd95fea94
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Thu Mar 30 19:21:44 2023 -0700

    net: don't let netpoll invoke NAPI if in xmit context
    
    [ Upstream commit 275b471e3d2daf1472ae8fa70dc1b50c9e0b9e75 ]
    
    Commit 0db3dc73f7a3 ("[NETPOLL]: tx lock deadlock fix") narrowed
    down the region under netif_tx_trylock() inside netpoll_send_skb().
    (At that point in time netif_tx_trylock() would lock all queues of
    the device.) Taking the tx lock was problematic because driver's
    cleanup method may take the same lock. So the change made us hold
    the xmit lock only around xmit, and expected the driver to take
    care of locking within ->ndo_poll_controller().
    
    Unfortunately this only works if netpoll isn't itself called with
    the xmit lock already held. Netpoll code is careful and uses
    trylock(). The drivers, however, may be using plain lock().
    Printing while holding the xmit lock is going to result in rare
    deadlocks.
    
    Luckily we record the xmit lock owners, so we can scan all the queues,
    the same way we scan NAPI owners. If any of the xmit locks is held
    by the local CPU we better not attempt any polling.
    
    It would be nice if we could narrow down the check to only the NAPIs
    and the queue we're trying to use. I don't see a way to do that now.
    
    Reported-by: Roman Gushchin <roman.gushchin@linux.dev>
    Fixes: 0db3dc73f7a3 ("[NETPOLL]: tx lock deadlock fix")
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e150a5c9f44c300fe1aa49f0377b1f65b55fde2d
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Mar 30 17:45:02 2023 +0000

    icmp: guard against too small mtu
    
    [ Upstream commit 7d63b67125382ff0ffdfca434acbc94a38bd092b ]
    
    syzbot was able to trigger a panic [1] in icmp_glue_bits(), or
    more exactly in skb_copy_and_csum_bits()
    
    There is no repro yet, but I think the issue is that syzbot
    manages to lower device mtu to a small value, fooling __icmp_send()
    
    __icmp_send() must make sure there is enough room for the
    packet to include at least the headers.
    
    We might in the future refactor skb_copy_and_csum_bits() and its
    callers to no longer crash when something bad happens.
    
    [1]
    kernel BUG at net/core/skbuff.c:3343 !
    invalid opcode: 0000 [#1] PREEMPT SMP KASAN
    CPU: 0 PID: 15766 Comm: syz-executor.0 Not tainted 6.3.0-rc4-syzkaller-00039-gffe78bbd5121 #0
    Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 1.14.0-2 04/01/2014
    RIP: 0010:skb_copy_and_csum_bits+0x798/0x860 net/core/skbuff.c:3343
    Code: f0 c1 c8 08 41 89 c6 e9 73 ff ff ff e8 61 48 d4 f9 e9 41 fd ff ff 48 8b 7c 24 48 e8 52 48 d4 f9 e9 c3 fc ff ff e8 c8 27 84 f9 <0f> 0b 48 89 44 24 28 e8 3c 48 d4 f9 48 8b 44 24 28 e9 9d fb ff ff
    RSP: 0018:ffffc90000007620 EFLAGS: 00010246
    RAX: 0000000000000000 RBX: 00000000000001e8 RCX: 0000000000000100
    RDX: ffff8880276f6280 RSI: ffffffff87fdd138 RDI: 0000000000000005
    RBP: 0000000000000000 R08: 0000000000000005 R09: 0000000000000000
    R10: 00000000000001e8 R11: 0000000000000001 R12: 000000000000003c
    R13: 0000000000000000 R14: ffff888028244868 R15: 0000000000000b0e
    FS: 00007fbc81f1c700(0000) GS:ffff88802ca00000(0000) knlGS:0000000000000000
    CS: 0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000001b2df43000 CR3: 00000000744db000 CR4: 0000000000150ef0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
    <IRQ>
    icmp_glue_bits+0x7b/0x210 net/ipv4/icmp.c:353
    __ip_append_data+0x1d1b/0x39f0 net/ipv4/ip_output.c:1161
    ip_append_data net/ipv4/ip_output.c:1343 [inline]
    ip_append_data+0x115/0x1a0 net/ipv4/ip_output.c:1322
    icmp_push_reply+0xa8/0x440 net/ipv4/icmp.c:370
    __icmp_send+0xb80/0x1430 net/ipv4/icmp.c:765
    ipv4_send_dest_unreach net/ipv4/route.c:1239 [inline]
    ipv4_link_failure+0x5a9/0x9e0 net/ipv4/route.c:1246
    dst_link_failure include/net/dst.h:423 [inline]
    arp_error_report+0xcb/0x1c0 net/ipv4/arp.c:296
    neigh_invalidate+0x20d/0x560 net/core/neighbour.c:1079
    neigh_timer_handler+0xc77/0xff0 net/core/neighbour.c:1166
    call_timer_fn+0x1a0/0x580 kernel/time/timer.c:1700
    expire_timers+0x29b/0x4b0 kernel/time/timer.c:1751
    __run_timers kernel/time/timer.c:2022 [inline]
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Reported-by: syzbot+d373d60fddbdc915e666@syzkaller.appspotmail.com
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/20230330174502.1915328-1-edumazet@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a64160124d5a078be0c380b1e8a0bad2d040d3a1
Author: Chuck Lever <chuck.lever@oracle.com>
Date:   Fri Mar 31 16:31:19 2023 -0400

    NFSD: Avoid calling OPDESC() with ops->opnum == OP_ILLEGAL
    
    [ Upstream commit 804d8e0a6e54427268790472781e03bc243f4ee3 ]
    
    OPDESC() simply indexes into nfsd4_ops[] by the op's operation
    number, without range checking that value. It assumes callers are
    careful to avoid calling it with an out-of-bounds opnum value.
    
    nfsd4_decode_compound() is not so careful, and can invoke OPDESC()
    with opnum set to OP_ILLEGAL, which is 10044 -- well beyond the end
    of nfsd4_ops[].
    
    Reported-by: Jeff Layton <jlayton@kernel.org>
    Fixes: f4f9ef4a1b0a ("nfsd4: opdesc will be useful outside nfs4proc.c")
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b9ba5906c42089f8e1d0001b7b50a7940f086cbb
Author: Ziyang Xuan <william.xuanziyang@huawei.com>
Date:   Thu Mar 30 09:25:32 2023 +0800

    net: qrtr: Fix a refcount bug in qrtr_recvmsg()
    
    [ Upstream commit 44d807320000db0d0013372ad39b53e12d52f758 ]
    
    Syzbot reported a bug as following:
    
    refcount_t: addition on 0; use-after-free.
    ...
    RIP: 0010:refcount_warn_saturate+0x17c/0x1f0 lib/refcount.c:25
    ...
    Call Trace:
     <TASK>
     __refcount_add include/linux/refcount.h:199 [inline]
     __refcount_inc include/linux/refcount.h:250 [inline]
     refcount_inc include/linux/refcount.h:267 [inline]
     kref_get include/linux/kref.h:45 [inline]
     qrtr_node_acquire net/qrtr/af_qrtr.c:202 [inline]
     qrtr_node_lookup net/qrtr/af_qrtr.c:398 [inline]
     qrtr_send_resume_tx net/qrtr/af_qrtr.c:1003 [inline]
     qrtr_recvmsg+0x85f/0x990 net/qrtr/af_qrtr.c:1070
     sock_recvmsg_nosec net/socket.c:1017 [inline]
     sock_recvmsg+0xe2/0x160 net/socket.c:1038
     qrtr_ns_worker+0x170/0x1700 net/qrtr/ns.c:688
     process_one_work+0x991/0x15c0 kernel/workqueue.c:2390
     worker_thread+0x669/0x1090 kernel/workqueue.c:2537
    
    It occurs in the concurrent scenario of qrtr_recvmsg() and
    qrtr_endpoint_unregister() as following:
    
            cpu0                                    cpu1
    qrtr_recvmsg                            qrtr_endpoint_unregister
    qrtr_send_resume_tx                     qrtr_node_release
    qrtr_node_lookup                        mutex_lock(&qrtr_node_lock)
    spin_lock_irqsave(&qrtr_nodes_lock, )   refcount_dec_and_test(&node->ref) [node->ref == 0]
    radix_tree_lookup [node != NULL]        __qrtr_node_release
    qrtr_node_acquire                       spin_lock_irqsave(&qrtr_nodes_lock, )
    kref_get(&node->ref) [WARNING]          ...
                                            mutex_unlock(&qrtr_node_lock)
    
    Use qrtr_node_lock to protect qrtr_node_lookup() implementation, this
    is actually improving the protection of node reference.
    
    Fixes: 0a7e0d0ef054 ("net: qrtr: Migrate node lookup tree to spinlock")
    Reported-by: syzbot+a7492efaa5d61b51db23@syzkaller.appspotmail.com
    Link: https://syzkaller.appspot.com/bug?extid=a7492efaa5d61b51db23
    Signed-off-by: Ziyang Xuan <william.xuanziyang@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3ef52e4bcfd704e36c0a62e0d1b59fd48aba7fdb
Author: Luca Weiss <luca@z3ntu.xyz>
Date:   Tue Sep 28 19:11:57 2021 +0200

    net: qrtr: combine nameservice into main module
    
    [ Upstream commit a365023a76f231cc2fc6e33797e66f3bcaa9f9a9 ]
    
    Previously with CONFIG_QRTR=m a separate ns.ko would be built which
    wasn't done on purpose and should be included in qrtr.ko.
    
    Rename qrtr.c to af_qrtr.c so we can build a qrtr.ko with both af_qrtr.c
    and ns.c.
    
    Signed-off-by: Luca Weiss <luca@z3ntu.xyz>
    Reviewed-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Tested-By: Steev Klimaszewski <steev@kali.org>
    Reviewed-by: Manivannan Sadhasivam <mani@kernel.org>
    Link: https://lore.kernel.org/r/20210928171156.6353-1-luca@z3ntu.xyz
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Stable-dep-of: 44d807320000 ("net: qrtr: Fix a refcount bug in qrtr_recvmsg()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 30c5a016a37a668c1c07442cf94de6e99ea7417a
Author: Felix Fietkau <nbd@nbd.name>
Date:   Fri Mar 24 13:09:24 2023 +0100

    wifi: mac80211: fix invalid drv_sta_pre_rcu_remove calls for non-uploaded sta
    
    [ Upstream commit 12b220a6171faf10638ab683a975cadcf1a352d6 ]
    
    Avoid potential data corruption issues caused by uninitialized driver
    private data structures.
    
    Reported-by: Brian Coverstone <brian@mainsequence.net>
    Fixes: 6a9d1b91f34d ("mac80211: add pre-RCU-sync sta removal driver operation")
    Signed-off-by: Felix Fietkau <nbd@nbd.name>
    Link: https://lore.kernel.org/r/20230324120924.38412-3-nbd@nbd.name
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 32a8dc8d9ebe80eb352cf80d33c6c4a32aa1e18d
Author: Nico Boehr <nrb@linux.ibm.com>
Date:   Mon Feb 13 09:55:20 2023 +0100

    KVM: s390: pv: fix external interruption loop not always detected
    
    [ Upstream commit 21f27df854008b86349a203bf97fef79bb11f53e ]
    
    To determine whether the guest has caused an external interruption loop
    upon code 20 (external interrupt) intercepts, the ext_new_psw needs to
    be inspected to see whether external interrupts are enabled.
    
    Under non-PV, ext_new_psw can simply be taken from guest lowcore. Under
    PV, KVM can only access the encrypted guest lowcore and hence the
    ext_new_psw must not be taken from guest lowcore.
    
    handle_external_interrupt() incorrectly did that and hence was not able
    to reliably tell whether an external interruption loop is happening or
    not. False negatives cause spurious failures of my kvm-unit-test
    for extint loops[1] under PV.
    
    Since code 20 is only caused under PV if and only if the guest's
    ext_new_psw is enabled for external interrupts, false positive detection
    of a external interruption loop can not happen.
    
    Fix this issue by instead looking at the guest PSW in the state
    description. Since the PSW swap for external interrupt is done by the
    ultravisor before the intercept is caused, this reliably tells whether
    the guest is enabled for external interrupts in the ext_new_psw.
    
    Also update the comments to explain better what is happening.
    
    [1] https://lore.kernel.org/kvm/20220812062151.1980937-4-nrb@linux.ibm.com/
    
    Signed-off-by: Nico Boehr <nrb@linux.ibm.com>
    Reviewed-by: Janosch Frank <frankja@linux.ibm.com>
    Reviewed-by: Christian Borntraeger <borntraeger@linux.ibm.com>
    Fixes: 201ae986ead7 ("KVM: s390: protvirt: Implement interrupt injection")
    Link: https://lore.kernel.org/r/20230213085520.100756-2-nrb@linux.ibm.com
    Message-Id: <20230213085520.100756-2-nrb@linux.ibm.com>
    Signed-off-by: Janosch Frank <frankja@linux.ibm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fcd6c7476e43d97e98452714e52ac93886f0abbe
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Wed Mar 22 22:45:43 2023 +0100

    pwm: sprd: Explicitly set .polarity in .get_state()
    
    [ Upstream commit 2be4dcf6627e1bcbbef8e6ba1811f5127d39202c ]
    
    The driver only supports normal polarity. Complete the implementation of
    .get_state() by setting .polarity accordingly.
    
    Fixes: 8aae4b02e8a6 ("pwm: sprd: Add Spreadtrum PWM support")
    Link: https://lore.kernel.org/r/20230228135508.1798428-5-u.kleine-koenig@pengutronix.de
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Thierry Reding <thierry.reding@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a8ab13c732590692a52336a4b73973d27848d080
Author: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
Date:   Wed Mar 22 22:45:41 2023 +0100

    pwm: cros-ec: Explicitly set .polarity in .get_state()
    
    [ Upstream commit 30006b77c7e130e01d1ab2148cc8abf73dfcc4bf ]
    
    The driver only supports normal polarity. Complete the implementation of
    .get_state() by setting .polarity accordingly.
    
    Reviewed-by: Guenter Roeck <groeck@chromium.org>
    Fixes: 1f0d3bb02785 ("pwm: Add ChromeOS EC PWM driver")
    Link: https://lore.kernel.org/r/20230228135508.1798428-3-u.kleine-koenig@pengutronix.de
    Signed-off-by: Uwe Kleine-König <u.kleine-koenig@pengutronix.de>
    Signed-off-by: Thierry Reding <thierry.reding@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c373e49fbb87aa177819866ed9194ebc5414dfd6
Author: Mohammed Gamal <mgamal@redhat.com>
Date:   Fri Feb 17 22:44:11 2023 +0200

    Drivers: vmbus: Check for channel allocation before looking up relids
    
    [ Upstream commit 1eb65c8687316c65140b48fad27133d583178e15 ]
    
    relid2channel() assumes vmbus channel array to be allocated when called.
    However, in cases such as kdump/kexec, not all relids will be reset by the host.
    When the second kernel boots and if the guest receives a vmbus interrupt during
    vmbus driver initialization before vmbus_connect() is called, before it finishes,
    or if it fails, the vmbus interrupt service routine is called which in turn calls
    relid2channel() and can cause a null pointer dereference.
    
    Print a warning and error out in relid2channel() for a channel id that's invalid
    in the second kernel.
    
    Fixes: 8b6a877c060e ("Drivers: hv: vmbus: Replace the per-CPU channel lists with a global array of channels")
    
    Signed-off-by: Mohammed Gamal <mgamal@redhat.com>
    Reviewed-by: Dexuan Cui <decui@microsoft.com>
    Link: https://lore.kernel.org/r/20230217204411.212709-1-mgamal@redhat.com
    Signed-off-by: Wei Liu <wei.liu@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b50cd6789dbb732555f869d1ba396de3f96eec3c
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Sat Feb 25 21:39:48 2023 -0800

    gpio: GPIO_REGMAP: select REGMAP instead of depending on it
    
    [ Upstream commit d49765b5f4320a402fbc4ed5edfd73d87640f27c ]
    
    REGMAP is a hidden (not user visible) symbol. Users cannot set it
    directly thru "make *config", so drivers should select it instead of
    depending on it if they need it.
    
    Consistently using "select" or "depends on" can also help reduce
    Kconfig circular dependency issues.
    
    Therefore, change the use of "depends on REGMAP" to "select REGMAP".
    
    Fixes: ebe363197e52 ("gpio: add a reusable generic gpio_chip using regmap")
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Cc: Michael Walle <michael@walle.cc>
    Cc: Linus Walleij <linus.walleij@linaro.org>
    Cc: Bartosz Golaszewski <brgl@bgdev.pl>
    Cc: linux-gpio@vger.kernel.org
    Acked-by: Michael Walle <michael@walle.cc>
    Signed-off-by: Bartosz Golaszewski <bartosz.golaszewski@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0a473f83439310f14ad189f435049871dfd7efef
Author: Tonghao Zhang <tong@infragraf.org>
Date:   Wed Jan 11 17:29:01 2023 +0800

    bpf: hash map, avoid deadlock with suitable hash mask
    
    [ Upstream commit 9f907439dc80e4a2fcfb949927b36c036468dbb3 ]
    
    The deadlock still may occur while accessed in NMI and non-NMI
    context. Because in NMI, we still may access the same bucket but with
    different map_locked index.
    
    For example, on the same CPU, .max_entries = 2, we update the hash map,
    with key = 4, while running bpf prog in NMI nmi_handle(), to update
    hash map with key = 20, so it will have the same bucket index but have
    different map_locked index.
    
    To fix this issue, using min mask to hash again.
    
    Fixes: 20b6cc34ea74 ("bpf: Avoid hashtab deadlock with map_locked")
    Signed-off-by: Tonghao Zhang <tong@infragraf.org>
    Cc: Alexei Starovoitov <ast@kernel.org>
    Cc: Daniel Borkmann <daniel@iogearbox.net>
    Cc: Andrii Nakryiko <andrii@kernel.org>
    Cc: Martin KaFai Lau <martin.lau@linux.dev>
    Cc: Song Liu <song@kernel.org>
    Cc: Yonghong Song <yhs@fb.com>
    Cc: John Fastabend <john.fastabend@gmail.com>
    Cc: KP Singh <kpsingh@kernel.org>
    Cc: Stanislav Fomichev <sdf@google.com>
    Cc: Hao Luo <haoluo@google.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Hou Tao <houtao1@huawei.com>
    Acked-by: Yonghong Song <yhs@fb.com>
    Acked-by: Hou Tao <houtao1@huawei.com>
    Link: https://lore.kernel.org/r/20230111092903.92389-1-tong@infragraf.org
    Signed-off-by: Martin KaFai Lau <martin.lau@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 543d66a54dbf6358e9112bda1f1b5b9b64fc2f49
Author: Matthew Howell <matthew.howell@sealevel.com>
Date:   Thu Jan 19 14:40:29 2023 -0500

    serial: exar: Add support for Sealevel 7xxxC serial cards
    
    [ Upstream commit 14ee78d5932afeb710c8305196a676a715bfdea8 ]
    
    Add support for Sealevel 7xxxC serial cards.
    
    This patch:
    * Adds IDs to recognize 7xxxC cards from Sealevel Systems.
    * Updates exar_pci_probe() to set nr_ports to last two bytes of primary
      dev ID for these cards.
    
    Signed-off-by: Matthew Howell <matthew.howell@sealevel.com>
    Cc: stable <stable@kernel.org>
    Link: https://lore.kernel.org/r/alpine.DEB.2.21.2301191440010.22558@tstest-VirtualBox
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7773bb08e8b6a9b28ec90b2b6904bd46a162548d
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Thu Jan 27 20:06:08 2022 +0200

    serial: 8250_exar: derive nr_ports from PCI ID for Acces I/O cards
    
    [ Upstream commit 8e4413aaf6a2e3a46e99a0718ca54c0cf8609cb2 ]
    
    In the similar way how it's done in 8250_pericom, derive the number of
    the UART ports from PCI ID for Acces I/O cards.
    
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Link: https://lore.kernel.org/r/20220127180608.71509-1-andriy.shevchenko@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Stable-dep-of: 14ee78d5932a ("serial: exar: Add support for Sealevel 7xxxC serial cards")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c73db89da68677f41a32f1a77c3ec50edf6488ee
Author: Daniil Tatianin <d-tatianin@yandex-team.ru>
Date:   Tue Dec 20 09:32:46 2022 +0300

    iavf/iavf_main: actually log ->src mask when talking about it
    
    [ Upstream commit 6650c8e906ce58404bfdfceceeba7bd10d397d40 ]
    
    This fixes a copy-paste issue where dev_err would log the dst mask even
    though it is clearly talking about src.
    
    Found by Linux Verification Center (linuxtesting.org) with the SVACE
    static analysis tool.
    
    Fixes: 0075fa0fadd0 ("i40evf: Add support to apply cloud filters")
    Signed-off-by: Daniil Tatianin <d-tatianin@yandex-team.ru>
    Reviewed-by: Michal Swiatkowski <michal.swiatkowski@linux.intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b2d29830db30e6d02161c813091ff7e1d01c4645
Author: Jacob Keller <jacob.e.keller@intel.com>
Date:   Fri Jun 4 09:53:34 2021 -0700

    iavf: return errno code instead of status code
    
    [ Upstream commit 9f4651ea3e07339b460d403ff01b7cc2178fef7b ]
    
    The iavf_parse_cls_flower function returns an integer error code, and
    not an iavf_status enumeration.
    
    Fix the function to use the standard errno value EINVAL as its return
    instead of using IAVF_ERR_CONFIG.
    
    Signed-off-by: Jacob Keller <jacob.e.keller@intel.com>
    Tested-by: Konrad Jankowski <konrad0.jankowski@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Stable-dep-of: 6650c8e906ce ("iavf/iavf_main: actually log ->src mask when talking about it")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cdf3f5ef1893e60de15fabfdfba8301bc152f0c6
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Wed Jan 11 21:14:26 2023 +0100

    platform/x86: int3472/discrete: Ensure the clk/power enable pins are in output mode
    
    [ Upstream commit cf5ac2d45f6e4d11ad78e7b10ae9a4121ba5e995 ]
    
    acpi_get_and_request_gpiod() does not take a gpio_lookup_flags argument
    specifying that the pins direction should be initialized to a specific
    value.
    
    This means that in some cases the pins might be left in input mode, causing
    the gpiod_set() calls made to enable the clk / regulator to not work.
    
    One example of this problem is the clk-enable GPIO for the ov01a1s sensor
    on a Dell Latitude 9420 being left in input mode causing the clk to
    never get enabled.
    
    Explicitly set the direction of the pins to output to fix this.
    
    Fixes: 5de691bffe57 ("platform/x86: Add intel_skl_int3472 driver")
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Reviewed-by: Andy Shevchenko <andy@kernel.org>
    Reviewed-by: Daniel Scally <djrscally@gmail.com>
    Reviewed-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Link: https://lore.kernel.org/r/20230111201426.947853-1-hdegoede@redhat.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7798cd69cfc31910409a61748d6cbe926e243bd6
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Fri Dec 3 11:28:50 2021 +0100

    platform/x86: int3472: Split into 2 drivers
    
    [ Upstream commit a2f9fbc247eea0ad1b0b59bc29bec144c5ead03c ]
    
    The intel_skl_int3472.ko module contains 2 separate drivers,
    the int3472_discrete platform driver and the int3472_tps68470
    I2C-driver.
    
    These 2 drivers contain very little shared code, only
    skl_int3472_get_acpi_buffer() and skl_int3472_fill_cldb() are
    shared.
    
    Split the module into 2 drivers, linking the little shared code
    directly into both.
    
    This will allow us to add soft-module dependencies for the
    tps68470 clk, gpio and regulator drivers to the new
    intel_skl_int3472_tps68470.ko to help with probe ordering issues
    without causing these modules to get loaded on boards which only
    use the int3472_discrete platform driver.
    
    While at it also rename the .c and .h files to remove the
    cumbersome intel_skl_int3472_ prefix.
    
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20211203102857.44539-8-hdegoede@redhat.com
    Stable-dep-of: cf5ac2d45f6e ("platform/x86: int3472/discrete: Ensure the clk/power enable pins are in output mode")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5cc70e78bbcc1e0e907a3996a3868155c6eb0391
Author: Mustafa Ismail <mustafa.ismail@intel.com>
Date:   Mon Nov 14 19:17:01 2022 -0600

    RDMA/irdma: Do not request 2-level PBLEs for CQ alloc
    
    [ Upstream commit 8f7e2daa6336f9f4b6f8a4715a809674606df16b ]
    
    When allocating PBLE's for a large CQ, it is possible
    that a 2-level PBLE is returned which would cause the
    CQ allocation to fail since 1-level is assumed and checked for.
    Fix this by requesting a level one PBLE only.
    
    Fixes: b48c24c2d710 ("RDMA/irdma: Implement device supported verb APIs")
    Signed-off-by: Mustafa Ismail <mustafa.ismail@intel.com>
    Signed-off-by: Shiraz Saleem <shiraz.saleem@intel.com>
    Link: https://lore.kernel.org/r/20221115011701.1379-4-shiraz.saleem@intel.com
    Signed-off-by: Leon Romanovsky <leon@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c22ac849aabb7909eecd89d23afee9933d7f08e9
Author: Brian Foster <bfoster@redhat.com>
Date:   Wed Nov 16 10:28:36 2022 -0500

    NFSD: pass range end to vfs_fsync_range() instead of count
    
    [ Upstream commit 79a1d88a36f77374c77fd41a4386d8c2736b8704 ]
    
    _nfsd_copy_file_range() calls vfs_fsync_range() with an offset and
    count (bytes written), but the former wants the start and end bytes
    of the range to sync. Fix it up.
    
    Fixes: eac0b17a77fb ("NFSD add vfs_fsync after async copy is done")
    Signed-off-by: Brian Foster <bfoster@redhat.com>
    Tested-by: Dai Ngo <dai.ngo@oracle.com>
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 34a14759d90c094202715f0176155da0c17a5e0d
Author: Chuck Lever <chuck.lever@oracle.com>
Date:   Wed Oct 13 16:44:20 2021 -0400

    NFSD: Fix sparse warning
    
    [ Upstream commit c2f1c4bd20621175c581f298b4943df0cffbd841 ]
    
    /home/cel/src/linux/linux/fs/nfsd/nfs4proc.c:1539:24: warning: incorrect type in assignment (different base types)
    /home/cel/src/linux/linux/fs/nfsd/nfs4proc.c:1539:24:    expected restricted __be32 [usertype] status
    /home/cel/src/linux/linux/fs/nfsd/nfs4proc.c:1539:24:    got int
    
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Stable-dep-of: 79a1d88a36f7 ("NFSD: pass range end to vfs_fsync_range() instead of count")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8059e200259e9c483d715fc2df6340c227c3e196
Author: Li Zetao <ocfs2-devel@oss.oracle.com>
Date:   Wed Nov 9 15:46:27 2022 +0800

    ocfs2: fix memory leak in ocfs2_mount_volume()
    
    [ Upstream commit ce2fcf1516d674a174d9b34d1e1024d64de9fba3 ]
    
    There is a memory leak reported by kmemleak:
    
      unreferenced object 0xffff88810cc65e60 (size 32):
        comm "mount.ocfs2", pid 23753, jiffies 4302528942 (age 34735.105s)
        hex dump (first 32 bytes):
          10 00 00 00 00 00 00 00 00 01 01 01 01 01 01 01  ................
          01 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00  ................
        backtrace:
          [<ffffffff8170f73d>] __kmalloc+0x4d/0x150
          [<ffffffffa0ac3f51>] ocfs2_compute_replay_slots+0x121/0x330 [ocfs2]
          [<ffffffffa0b65165>] ocfs2_check_volume+0x485/0x900 [ocfs2]
          [<ffffffffa0b68129>] ocfs2_mount_volume.isra.0+0x1e9/0x650 [ocfs2]
          [<ffffffffa0b7160b>] ocfs2_fill_super+0xe0b/0x1740 [ocfs2]
          [<ffffffff818e1fe2>] mount_bdev+0x312/0x400
          [<ffffffff819a086d>] legacy_get_tree+0xed/0x1d0
          [<ffffffff818de82d>] vfs_get_tree+0x7d/0x230
          [<ffffffff81957f92>] path_mount+0xd62/0x1760
          [<ffffffff81958a5a>] do_mount+0xca/0xe0
          [<ffffffff81958d3c>] __x64_sys_mount+0x12c/0x1a0
          [<ffffffff82f26f15>] do_syscall_64+0x35/0x80
          [<ffffffff8300006a>] entry_SYSCALL_64_after_hwframe+0x46/0xb0
    
    This call stack is related to two problems.  Firstly, the ocfs2 super uses
    "replay_map" to trace online/offline slots, in order to recover offline
    slots during recovery and mount.  But when ocfs2_truncate_log_init()
    returns an error in ocfs2_mount_volume(), the memory of "replay_map" will
    not be freed in error handling path.  Secondly, the memory of "replay_map"
    will not be freed if d_make_root() returns an error in ocfs2_fill_super().
    But the memory of "replay_map" will be freed normally when completing
    recovery and mount in ocfs2_complete_mount_recovery().
    
    Fix the first problem by adding error handling path to free "replay_map"
    when ocfs2_truncate_log_init() fails.  And fix the second problem by
    calling ocfs2_free_replay_slots(osb) in the error handling path
    "out_dismount".  In addition, since ocfs2_free_replay_slots() is static,
    it is necessary to remove its static attribute and declare it in header
    file.
    
    Link: https://lkml.kernel.org/r/20221109074627.2303950-1-lizetao1@huawei.com
    Fixes: 9140db04ef18 ("ocfs2: recover orphans in offline slots during recovery and mount")
    Signed-off-by: Li Zetao <lizetao1@huawei.com>
    Reviewed-by: Joseph Qi <joseph.qi@linux.alibaba.com>
    Cc: Mark Fasheh <mark@fasheh.com>
    Cc: Joel Becker <jlbec@evilplan.org>
    Cc: Junxiao Bi <junxiao.bi@oracle.com>
    Cc: Changwei Ge <gechangwei@live.cn>
    Cc: Gang He <ghe@suse.com>
    Cc: Jun Piao <piaojun@huawei.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b613d8dcdff322a28783aea971b005e025553b5a
Author: Heming Zhao via Ocfs2-devel <ocfs2-devel@oss.oracle.com>
Date:   Fri Apr 29 14:37:58 2022 -0700

    ocfs2: rewrite error handling of ocfs2_fill_super
    
    [ Upstream commit f1e75d128b46e3b066e7b2e7cfca10491109d44d ]
    
    Current ocfs2_fill_super() uses one goto label "read_super_error" to
    handle all error cases.  And with previous serial patches, the error
    handling should fork more branches to handle different error cases.  This
    patch rewrite the error handling of ocfs2_fill_super.
    
    Link: https://lkml.kernel.org/r/20220424130952.2436-6-heming.zhao@suse.com
    Signed-off-by: Heming Zhao <heming.zhao@suse.com>
    Reviewed-by: Joseph Qi <joseph.qi@linux.alibaba.com>
    Cc: Changwei Ge <gechangwei@live.cn>
    Cc: Gang He <ghe@suse.com>
    Cc: Joel Becker <jlbec@evilplan.org>
    Cc: Jun Piao <piaojun@huawei.com>
    Cc: Junxiao Bi <junxiao.bi@oracle.com>
    Cc: Mark Fasheh <mark@fasheh.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Stable-dep-of: ce2fcf1516d6 ("ocfs2: fix memory leak in ocfs2_mount_volume()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 05abe9c0bf38e8d86c9321affe269a900e787a63
Author: Heming Zhao via Ocfs2-devel <ocfs2-devel@oss.oracle.com>
Date:   Fri Apr 29 14:37:58 2022 -0700

    ocfs2: ocfs2_mount_volume does cleanup job before return error
    
    [ Upstream commit 0737e01de9c411e4db87dcedf4a9789d41b1c5c1 ]
    
    After this patch, when error, ocfs2_fill_super doesn't take care to
    release resources which are allocated in ocfs2_mount_volume.
    
    Link: https://lkml.kernel.org/r/20220424130952.2436-5-heming.zhao@suse.com
    Signed-off-by: Heming Zhao <heming.zhao@suse.com>
    Reviewed-by: Joseph Qi <joseph.qi@linux.alibaba.com>
    Cc: Changwei Ge <gechangwei@live.cn>
    Cc: Gang He <ghe@suse.com>
    Cc: Joel Becker <jlbec@evilplan.org>
    Cc: Jun Piao <piaojun@huawei.com>
    Cc: Junxiao Bi <junxiao.bi@oracle.com>
    Cc: Mark Fasheh <mark@fasheh.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Stable-dep-of: ce2fcf1516d6 ("ocfs2: fix memory leak in ocfs2_mount_volume()")
    Signed-off-by: Sasha Levin <sashal@kernel.org>
